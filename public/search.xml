<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git分支</title>
      <link href="/git%E5%88%86%E6%94%AF.html"/>
      <url>/git%E5%88%86%E6%94%AF.html</url>
      
        <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支就是一个指针，跟随者最新提交。<br><img src="./uploads/git/git%E5%88%86%E6%94%AF.png" alt=""></p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p><strong>查看本地分支：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p><strong>查看远端仓库分支：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* hexo</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/hexo</span><br><span class="line">  remotes/origin/dependabot/npm_and_yarn/acorn-6.4.1</span><br><span class="line">  remotes/origin/dependabot/npm_and_yarn/https-proxy-agent-2.2.4</span><br><span class="line">  remotes/origin/hexo</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><p><strong>查看每个分支的最后一次提交：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (b2)</span><br><span class="line">$ git branch -v</span><br><span class="line">* b2     86a66e5 1.txt</span><br><span class="line">  master 86a66e5 1.txt</span><br></pre></td></tr></table></figure><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p><strong>基于当前最后一次提交创建：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch b1</span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">  b1</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p><strong>指定基于某个提交创建分支：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (master)</span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">2137bd7 (HEAD -&gt; master) 3.txt</span><br><span class="line">7c5ea26 2.txt</span><br><span class="line">86a66e5 (b1) 1.txt</span><br><span class="line">8502169 msg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于2.txt这个提交对象来创建b2分支</span></span><br><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (master)</span><br><span class="line">$ git branch b2 7c5ea26</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功切换，可以看到b2的最后一次提交未2.txt</span></span><br><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">  b1     86a66e5 1.txt</span><br><span class="line">  b2     7c5ea26 2.txt</span><br><span class="line">* master 2137bd7 3.txt</span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (master)</span><br><span class="line">$ git checkout b1</span><br><span class="line">Switched to branch <span class="string">'b1'</span></span><br><span class="line">-</span><br><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (b1)</span><br><span class="line">$ git branch</span><br><span class="line">* b1</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>还可以创建和切换一步完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (b1)</span><br><span class="line">$ git checkout -b b2</span><br><span class="line">Switched to a new branch <span class="string">'b2'</span></span><br><span class="line"></span><br><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (b2)</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>切换分支时，尽量在切换之前保持当前分支是干净的，也就是该暂存的暂存，该提交的提交，最好是提交后再切换。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p><strong>删除本地分支：</strong></p><blockquote><p>删除一个分支时，不能处于这个分支，只能切换到另一个分支才能把它删除</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (b2)</span><br><span class="line">$ git branch</span><br><span class="line">  b1</span><br><span class="line">* b2</span><br><span class="line">  master</span><br><span class="line"></span><br><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (b2)</span><br><span class="line">$ git branch -d b1</span><br><span class="line">Deleted branch b1 (was 86a66e5).</span><br></pre></td></tr></table></figure><p><strong>强制删除：</strong></p><blockquote><p>当我们创建分支产生了提交信息时，但是还没有往主分支合并，删除时就会失败提示，可以强制删除。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (master)</span><br><span class="line">$ git branch -d b2</span><br><span class="line">error: The branch <span class="string">'b2'</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">'git branch -D b2'</span>.</span><br><span class="line"></span><br><span class="line">jw199@DESKTOP-2OG3D2D MINGW64 /c/my_code/git_study (master)</span><br><span class="line">$ git branch -D b2</span><br><span class="line">Deleted branch b2 (was ef5e3ea).</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
      <url>/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>克隆远程仓库，把服务器的代码拉到本地工作目录。</p><h3 id="全克隆"><a href="#全克隆" class="headerlink" title="全克隆"></a>全克隆</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></table></figure><p>找个会默认把一次性的把所有分支拉取下来到本地。好处就是方便切换，但是消耗时间很长，而且会占用很大的磁盘空间。</p><h3 id="单一克隆"><a href="#单一克隆" class="headerlink" title="单一克隆"></a>单一克隆</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branch1 远程仓库地址</span><br></pre></td></tr></table></figure><p>这条命令看上去像是只拉取指定的分支：branch1。其实不然，它和全克隆一样，都会拉取所有代码。只是拉取后所在的分支就是指定的分支。所以需要配合其他一些命令参数来达到这种效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branch2 --single-branch 远程仓库地址</span><br></pre></td></tr></table></figure><p>找个命令行参数代表着单一克隆。只会拉取-b参数指定的分支。</p><h3 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h3><p>因为git保存了很多的历史提交信息，我们可以通过<code>--depth num</code>来指定拉取最近几次提交的代码。大大减少占用磁盘的空间和加大拉取速度。但是一般也是配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b branch3 --single-branch --depth 1 远程仓库地址</span><br></pre></td></tr></table></figure><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git diff</span><br></pre></td></tr></table></figure><h2 id="将工作区的文件添加到缓存区"><a href="#将工作区的文件添加到缓存区" class="headerlink" title="将工作区的文件添加到缓存区"></a>将工作区的文件添加到缓存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"将缓存区的文件提交到本地仓库"</span></span><br><span class="line"></span><br><span class="line">git commit -a <span class="string">"两步合成一步，也就是add commit 一条命令解决"</span></span><br></pre></td></tr></table></figure><h2 id="查看历史提交记录"><a href="#查看历史提交记录" class="headerlink" title="查看历史提交记录"></a>查看历史提交记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长命令</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 短命令</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><h2 id="删除和重命名"><a href="#删除和重命名" class="headerlink" title="删除和重命名"></a>删除和重命名</h2><h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动删除</span></span><br><span class="line">rm -rf file</span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit</span></span><br><span class="line">git commit -m <span class="string">"delete"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动重命名</span></span><br><span class="line">mv file1 file2</span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit</span></span><br><span class="line">git commit -m <span class="string">"mv"</span></span><br></pre></td></tr></table></figure><h3 id="git-自动"><a href="#git-自动" class="headerlink" title="git 自动"></a>git 自动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git rm file</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"delete"</span></span><br><span class="line"></span><br><span class="line">git mv file1 file2</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"mv"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iptables四表五链</title>
      <link href="/iptables%E5%9B%9B%E8%A1%A8%E4%BA%94%E9%93%BE.html"/>
      <url>/iptables%E5%9B%9B%E8%A1%A8%E4%BA%94%E9%93%BE.html</url>
      
        <content type="html"><![CDATA[<h1 id="iptables四表五链"><a href="#iptables四表五链" class="headerlink" title="iptables四表五链"></a>iptables四表五链</h1><p>iptables是一种数据包过滤很强大的工具，可以用于添加、编辑、删除规则。这些规则是在做数据包过滤决定时，防火墙所遵循和组成的规则。这些规则是存储在数据包过滤表中，而这些表集成在Linux内核中。在数据包过滤表中，规则被分组放在所谓的链(chain)中。</p><h2 id="四表"><a href="#四表" class="headerlink" title="四表"></a>四表</h2><ul><li>raw：优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能</li><li>mangle：用于对特定数据包的修改</li><li>nat：用于nat功能（端口映射，地址映射等）</li><li>filter：一般的过滤功能</li></ul><p>默认表是filter（没有指定表的时候就是filter表)</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>表的处理优先级：<code>raw &gt; mangle &gt; nat &gt; filter</code></p><p>RAW 表只使用在PREROUTING链和OUTPUT链上,因为优先级最高，从而可以对收到的数据包在连接跟踪前进行处理。一但用户使用了RAW表,在某个链 上,RAW表处理完后,将跳过NAT表和 ip_conntrack处理,即不再做地址转换和数据包的链接跟踪处理了。</p><p> RAW表可以应用在那些不需要做nat的情况下，以提高性能。如大量访问的web服务器，可以让80端口不再让iptables做数据包的链接跟踪处理，以提高用户的访问速度。</p><h2 id="五链"><a href="#五链" class="headerlink" title="五链"></a>五链</h2><p>链是穿插在各个表之间，与表组成的就是规则。</p><ul><li>PREROUTING：数据包进入路由表之前</li><li>INPUT：通过路由表后目的地为本机，处理入站数据包</li><li>FORWARD：通过路由表后，目的地不为本机，处理转发数据包</li><li>OUTPUT：由本机产生，向外转发，处理出站数据包</li><li>POSTROUTIONG：发送到网卡接口之前</li></ul><p>如下图：</p><p><img src="/uploads/iptables/1590461504602.png" alt="1590461504602"></p><h2 id="表与链对应关系"><a href="#表与链对应关系" class="headerlink" title="表与链对应关系"></a>表与链对应关系</h2><p> iptables中表和链的对应关系如下：</p><p><img src="/uploads/iptables/1590461552065.png" alt="1590461552065"></p><h2 id="数据包流程"><a href="#数据包流程" class="headerlink" title="数据包流程"></a>数据包流程</h2><p>一个数据包到达时,是怎么依次穿过各个链和表的（图）。 </p><p><img src="/uploads/iptables/1590461589291.png" alt="1590461589291"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>数据包到达网络接口，比如 eth0。 </li><li>进入 raw 表的 PREROUTING 链，这个链的作用是赶在连接跟踪之前处理数据包。 </li><li>如果进行了连接跟踪，在此处理。 </li><li>进入 mangle 表的 PREROUTING 链，在此可以修改数据包，比如 TOS 等。 </li><li>进入 nat 表的 PREROUTING 链，可以在此做DNAT，但不要做过滤。 </li><li>路由决策，看是交给本地主机还是转发给其它主机。 </li></ol><h5 id="交给其他主机"><a href="#交给其他主机" class="headerlink" title="交给其他主机"></a>交给其他主机</h5><p><strong>到了这里我们就得分两种不同的情况进行讨论了，一种情况就是数据包要转发给其它主机，这时候它会依次经过：</strong> </p><ol start="7"><li>进入 mangle 表的 FORWARD 链，这里也比较特殊，这是在第一次路由决策之后，在进行最后的路由决策之前，我们仍然可以对数据包进行某些修改。 </li><li>进入 filter 表的 FORWARD 链，在这里我们可以对所有转发的数据包进行过滤。需要注意的是：经过这里的数据包是转发的，方向是双向的。 </li><li>进入 mangle 表的 POSTROUTING 链，到这里已经做完了所有的路由决定，但数据包仍然在本地主机，我们还可以进行某些修改。 </li><li>进入 nat 表的 POSTROUTING 链，在这里一般都是用来做 SNAT ，不要在这里进行过滤。 </li><li>进入出去的网络接口。完毕。 </li></ol><h5 id="交给本机"><a href="#交给本机" class="headerlink" title="交给本机"></a>交给本机</h5><p><strong>另一种情况是，数据包就是发给本地主机的，那么它会依次穿过：</strong> </p><ol start="7"><li>进入 mangle 表的 INPUT 链，这里是在路由之后，交由本地主机之前，我们也可以进行一些相应的修改。 </li><li>进入 filter 表的 INPUT 链，在这里我们可以对流入的所有数据包进行过滤，无论它来自哪个网络接口。 </li><li>交给本地主机的应用程序进行处理。 </li><li>处理完毕后进行路由决定，看该往那里发出。 </li><li>进入 raw 表的 OUTPUT 链，这里是在连接跟踪处理本地的数据包之前。 </li><li>连接跟踪对本地的数据包进行处理。 </li><li>进入 mangle 表的 OUTPUT 链，在这里我们可以修改数据包，但不要做过滤。 </li><li>进入 nat 表的 OUTPUT 链，可以对防火墙自己发出的数据做 NAT 。 </li><li>再次进行路由决定。 </li><li>进入 filter 表的 OUTPUT 链，可以对本地出去的数据包进行过滤。 </li><li>进入 mangle 表的 POSTROUTING 链，同上一种情况的第9步。注意，这里不光对经过防火墙的数据包进行处理，还对防火墙自己产生的数据包进行处理。 </li><li>进入 nat 表的 POSTROUTING 链，同上一种情况的第10步。 </li><li>进入出去的网络接口。完毕。</li></ol>]]></content>
      
      
      <categories>
          
          <category> iptables </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git初始化</title>
      <link href="/git%E5%88%9D%E5%A7%8B%E5%8C%96.html"/>
      <url>/git%E5%88%9D%E5%A7%8B%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="git初始化"><a href="#git初始化" class="headerlink" title="git初始化"></a>git初始化</h1><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.18.0.windows.1</span><br></pre></td></tr></table></figure><h2 id="创建版本库及第一次提交"><a href="#创建版本库及第一次提交" class="headerlink" title="创建版本库及第一次提交"></a>创建版本库及第一次提交</h2><p>在开始git之旅之前，需要设置一下git的环境变量，这个设置是一次性的工作。也就是说，这些设置会在全局文件：<code>~/.gitconfig</code>或者<code>/etc/gitconfig</code>中做永久的记录。</p><h3 id="用户名和邮件地址"><a href="#用户名和邮件地址" class="headerlink" title="用户名和邮件地址"></a>用户名和邮件地址</h3><p>配置提交时作为提交者的用户名和邮件地址，这里<code>--global</code>是设置全局。也可以针对不同项目做不同设置：<code>--local</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置系统(所有用户)</span></span><br><span class="line">$ git config --system user.name <span class="string">"CodingJzy"</span></span><br><span class="line">$ git config --system user.email <span class="string">"jw19961019@gmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置全局</span></span><br><span class="line">$ git config --global user.name <span class="string">"CodingJzy"</span></span><br><span class="line">$ git config --global user.email <span class="string">"jw19961019@gmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置当前</span></span><br><span class="line">$ git config --<span class="built_in">local</span> user.name <span class="string">"jiang_wei"</span></span><br><span class="line">$ git config --<span class="built_in">local</span> user.email <span class="string">"jiang_wei@topsec.com.cm"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全局配置</span></span><br><span class="line">$ git config --global  --list |grep user</span><br><span class="line">user.name=CodingJzy</span><br><span class="line">user.email=jw19961019@gmail.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line">$ git config --<span class="built_in">local</span> --list|grep user</span><br><span class="line">user.name=jiang_wei</span><br><span class="line">user.email=jiang_wei@topsec.com.cm</span><br></pre></td></tr></table></figure><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>可以和linux命令一样，取一些别名，方便敲。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line">root@wy:~<span class="comment"># sudo git config --system alias.br branch</span></span><br><span class="line">root@wy:~<span class="comment"># sudo git config --system alias.ci commit</span></span><br><span class="line">root@wy:~<span class="comment"># sudo git config --system alias.co checkout</span></span><br><span class="line">root@wy:~<span class="comment"># sudo git config --system alias.st status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">$ git br</span><br><span class="line">  master</span><br><span class="line">* pubsub</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先建立一个新的工作目录，进入该目录后，执行<code>git init</code>创建版本库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jiangziya@jiang_wei MINGW64 /d/github</span><br><span class="line">$ mkdir demo</span><br><span class="line"></span><br><span class="line">jiangziya@jiang_wei MINGW64 /d/github</span><br><span class="line">$ <span class="built_in">cd</span> demo/</span><br><span class="line"></span><br><span class="line">jiangziya@jiang_wei MINGW64 /d/github/demo</span><br><span class="line">$ ls</span><br><span class="line"></span><br><span class="line">jiangziya@jiang_wei MINGW64 /d/github/demo</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> D:/github/demo/.git/</span><br><span class="line"></span><br><span class="line">jiangziya@jiang_wei MINGW64 /d/github/demo (master)</span><br><span class="line">$ ls -a</span><br><span class="line">./  ../  .git/</span><br></pre></td></tr></table></figure><p>实际上，也可以一步到位。直接<code>git init dir</code>，自动完成目录的创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jiangziya@jiang_wei MINGW64 /d/github</span><br><span class="line">$ git init demo1</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> D:/github/demo1/.git/</span><br><span class="line"></span><br><span class="line">jiangziya@jiang_wei MINGW64 /d/github</span><br><span class="line">$ <span class="built_in">cd</span> demo1 &amp;&amp; ls -a</span><br><span class="line">./  ../  .git/</span><br></pre></td></tr></table></figure><p>上面的两个操作中，都可以看到创建了一个隐藏文件夹<code>.git</code>。这个隐藏的目录就是git版本库(又叫仓库，<code>repository</code>)。</p><p><code>demo</code>所在的目录被称为工作区。目前工作区除了隐藏文件外，空无一物。</p><p>下面为工作区加点料：创建一个hello-git.txt。文件内容为<code>hello git</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"hello git"</span> &gt; hello-git.txt</span><br><span class="line"></span><br><span class="line">jiangziya@jiang_wei MINGW64 /d/github/demo (master)</span><br><span class="line">$ cat -n hello-git.txt</span><br><span class="line">     1  hello git</span><br></pre></td></tr></table></figure><p>为了将这个新建的文件添加到版本库，需要执行<code>git add</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jiangziya@jiang_wei MINGW64 /d/github/demo (master)</span><br><span class="line">$ git add hello-git.txt</span><br></pre></td></tr></table></figure><p>切记，到这里还没有完，数据只是从工作区添加到了缓存区，并没有添加到本地仓库。还要进行<code>git commit</code>一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jiangziya@jiang_wei MINGW64 /d/github/demo (master)</span><br><span class="line"><span class="comment"># -m 代表提交的信息，就算不加这个参数，直接commit也会弹出一个窗口来编写提交信息</span></span><br><span class="line">$ git commit -m <span class="string">"git init "</span></span><br><span class="line">[master (root-commit) 727bc99] git init</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello-git.txt</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>工作区</li><li>缓存区</li><li>本地仓库</li><li>远程仓库</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python-函数进阶</title>
      <link href="/python-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6.html"/>
      <url>/python-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2>]]></content>
      
      
      <categories>
          
          <category> Python---函数编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件与目录管理</title>
      <link href="/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86.html"/>
      <url>/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件与目录管理"><a href="#Linux文件与目录管理" class="headerlink" title="Linux文件与目录管理"></a>Linux文件与目录管理</h1><h2 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h2><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><ul><li>绝对路径：一定由根目录<code>/</code>写起，例如：<code>/home/jiangwei</code>、<code>/etc/docker</code></li><li>相对路径：相对于当前路径，一般有<code>./</code>,<code>../</code>等，例如：<code>./a/b/c</code>，<code>../docker/config</code></li></ul><p>注意：绝对路径的写法虽然长了点，但是一定不会出问题，相对路径虽然短点，但是可能存在问题。</p><h3 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h3><p>切换目录的指令是<code>cd</code>。比较特殊的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录</span></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上一层目录</span></span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上一个工作目录，可快速切换到执行切换到当前目录下的目录</span></span><br><span class="line">-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前登录用户所在的家目录</span></span><br><span class="line">～</span><br></pre></td></tr></table></figure><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p><code>cd</code>表示切换目录，后面跟相对路径或绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到当前用户的家目录</span></span><br><span class="line">jiang_wei@master01:/etc/docker$ <span class="built_in">cd</span> ~</span><br><span class="line">jiang_wei@master01:~$ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换上一层目录</span></span><br><span class="line">jiang_wei@master01:~$ <span class="built_in">cd</span> ..</span><br><span class="line">jiang_wei@master01:/home$ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到家目录</span></span><br><span class="line">jiang_wei@master01:/home$ <span class="built_in">cd</span></span><br><span class="line">jiang_wei@master01:~$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到绝对路径</span></span><br><span class="line">jiang_wei@master01:/etc/docker$ <span class="built_in">cd</span> /home/jiang_wei/code/gin/</span><br><span class="line">jiang_wei@master01:~/code/gin$ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个工作目录</span></span><br><span class="line">jiang_wei@master01:~/code/gin$ <span class="built_in">cd</span> -</span><br><span class="line">/etc/docker</span><br><span class="line">jiang_wei@master01:/etc/docker$ <span class="built_in">cd</span> -</span><br><span class="line">/home/jiang_wei/code/gin</span><br></pre></td></tr></table></figure><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>显示当前所在的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~/code/etcd$ <span class="built_in">pwd</span></span><br><span class="line">/home/jiang_wei/code/etcd</span><br><span class="line"></span><br><span class="line">jiang_wei@master01:~/code/etcd$ <span class="built_in">cd</span> ../docker/anchore/</span><br><span class="line">jiang_wei@master01:~/code/docker/anchore$ <span class="built_in">pwd</span></span><br><span class="line">/home/jiang_wei/code/docker/anchore</span><br></pre></td></tr></table></figure><h2 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a>目录浏览</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>查看目录的相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录</span></span><br><span class="line">root@master01:~<span class="comment"># ls</span></span><br><span class="line">模板</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看隐藏文件，以.开头的文件或文件夹</span></span><br><span class="line">root@master01:~<span class="comment"># ls -a</span></span><br><span class="line">.   .bash_history  .cache   .dbus   .ipython  .node_repl_history  .profile   .ssh  .viminfo</span><br><span class="line">..  .bashrc   .config  .gconf  .<span class="built_in">local</span>    .npm  .python_history  .vim  模板</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看形式以列的方式显示文件与文件夹的其他信息</span></span><br><span class="line">root@master01:~<span class="comment"># ls -l</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x 2 root root 4096 7月  19 22:42 模板</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面的选项可以相互组合</span></span><br><span class="line">root@master01:~<span class="comment"># ls -al</span></span><br><span class="line">总用量 76</span><br><span class="line">drwx------ 12 root root  4096 8月  10 08:22 .</span><br><span class="line">drwxr-xr-x 20 root root  4096 8月  10 09:18 ..</span><br><span class="line">-rw-------  1 root root  2608 8月  11 17:30 .bash_history</span><br><span class="line">-rw-r--r--  1 root root   570 6月  22 19:08 .bashrc</span><br><span class="line">drwx------  6 root root  4096 6月  30 10:49 .cache</span><br><span class="line">drwxr-xr-x  5 root root  4096 7月  20 09:52 .config</span><br><span class="line">drwx------  3 root root  4096 6月  22 11:28 .dbus</span><br><span class="line">drwx------  2 root root  4096 7月  28 16:33 .gconf</span><br><span class="line">drwxr-xr-x  5 root root  4096 6月  30 10:50 .ipython</span><br><span class="line">drwxr-xr-x  3 root root  4096 6月  29 21:28 .<span class="built_in">local</span></span><br><span class="line">-rw-------  1 root root     0 7月  20 09:43 .node_repl_history</span><br><span class="line">drwxr-xr-x  5 root root  4096 7月  20 10:47 .npm</span><br><span class="line">-rw-r--r--  1 root root   140 6月  22 19:08 .profile</span><br><span class="line">-rw-------  1 root root     7 6月  30 10:48 .python_history</span><br><span class="line">drwx------  2 root root  4096 6月  26 22:28 .ssh</span><br><span class="line">drwxr-xr-x  2 root root  4096 7月   7 10:37 .vim</span><br><span class="line">-rw-------  1 root root 11413 8月  10 08:22 .viminfo</span><br><span class="line">drwxr-xr-x  2 root root  4096 7月  19 22:42 模板</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以人性化的方式显示文件与文件夹相关信息，比如文件大小</span></span><br><span class="line">root@master01:~<span class="comment"># ls -alh</span></span><br><span class="line">总用量 76K</span><br><span class="line">drwx------ 12 root root 4.0K 8月  10 08:22 .</span><br><span class="line">drwxr-xr-x 20 root root 4.0K 8月  10 09:18 ..</span><br><span class="line">-rw-------  1 root root 2.6K 8月  11 17:30 .bash_history</span><br><span class="line">-rw-r--r--  1 root root  570 6月  22 19:08 .bashrc</span><br><span class="line">drwx------  6 root root 4.0K 6月  30 10:49 .cache</span><br><span class="line">drwxr-xr-x  5 root root 4.0K 7月  20 09:52 .config</span><br><span class="line">drwx------  3 root root 4.0K 6月  22 11:28 .dbus</span><br><span class="line">drwx------  2 root root 4.0K 7月  28 16:33 .gconf</span><br><span class="line">drwxr-xr-x  5 root root 4.0K 6月  30 10:50 .ipython</span><br><span class="line">drwxr-xr-x  3 root root 4.0K 6月  29 21:28 .<span class="built_in">local</span></span><br><span class="line">-rw-------  1 root root    0 7月  20 09:43 .node_repl_history</span><br><span class="line">drwxr-xr-x  5 root root 4.0K 7月  20 10:47 .npm</span><br><span class="line">-rw-r--r--  1 root root  140 6月  22 19:08 .profile</span><br><span class="line">-rw-------  1 root root    7 6月  30 10:48 .python_history</span><br><span class="line">drwx------  2 root root 4.0K 6月  26 22:28 .ssh</span><br><span class="line">drwxr-xr-x  2 root root 4.0K 7月   7 10:37 .vim</span><br><span class="line">-rw-------  1 root root  12K 8月  10 08:22 .viminfo</span><br><span class="line">drwxr-xr-x  2 root root 4.0K 7月  19 22:42 模板</span><br></pre></td></tr></table></figure><h2 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p><code>touch</code>：创建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个普通文件</span></span><br><span class="line">[root@jw-etcd01 <span class="built_in">test</span>]<span class="comment"># touch 1.py</span></span><br><span class="line">[root@jw-etcd01 <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">1.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个文件</span></span><br><span class="line">[root@jw-etcd01 <span class="built_in">test</span>]<span class="comment"># touch &#123;2..10&#125;.py</span></span><br><span class="line">[root@jw-etcd01 <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">10.py  1.py  2.py  3.py  4.py  5.py  6.py  7.py  8.py  9.py</span><br></pre></td></tr></table></figure><h4 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h4><p><code>mkdir</code>：创建一个新的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立新的目录</span></span><br><span class="line">jiang_wei@master01:~/<span class="built_in">test</span>$ mkdir a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立多层目录，一层一层创建很类</span></span><br><span class="line">jiang_wei@master01:~/<span class="built_in">test</span>$ mkdir -p a/b/c/d/e/f/g</span><br><span class="line"><span class="comment"># 树状形式显示当前目录下的层级</span></span><br><span class="line">jiang_wei@master01:~/<span class="built_in">test</span>$ tree</span><br><span class="line">.</span><br><span class="line">└── a</span><br><span class="line">    └── b</span><br><span class="line">        └── c</span><br><span class="line">            └── d</span><br><span class="line">                └── e</span><br><span class="line">                    └── f</span><br><span class="line">                        └── g</span><br><span class="line"></span><br><span class="line">7 directories, 0 files</span><br></pre></td></tr></table></figure><p>另外：还可以加<code>-m</code>选项来为目录文件直接设定权限，不需要看预设权限<code>umask</code>的脸色。</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p><code>cp</code>：拷贝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝文件，*代表所有，但是只能拷贝文件</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># cp test/* test1/</span></span><br><span class="line">cp: 略过目录<span class="string">"test/t1"</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># ls test1/</span></span><br><span class="line">10.py  1.py  2.py  3.py  4.py  5.py  6.py  7.py  8.py  9.py</span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># ls test</span></span><br><span class="line">10.py  1.py  2.py  3.py  4.py  5.py  6.py  7.py  8.py  9.py  t1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件和文件夹，递归拷贝</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># cp -r test/* test1/</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># ls test1</span></span><br><span class="line">10.py  1.py  2.py  3.py  4.py  5.py  6.py  7.py  8.py  9.py  t1</span><br></pre></td></tr></table></figure><h3 id="移动、重命名"><a href="#移动、重命名" class="headerlink" title="移动、重命名"></a>移动、重命名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]<span class="comment"># mkdir -p  a/b/c/d</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># tree a</span></span><br><span class="line">a</span><br><span class="line">└── b</span><br><span class="line">    └── c</span><br><span class="line">        └── d</span><br><span class="line"></span><br><span class="line">3 directories, 0 files</span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># mv a/b/c/ a/b/c1</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># tree a</span></span><br><span class="line">a</span><br><span class="line">└── b</span><br><span class="line">    └── c1</span><br><span class="line">        └── d</span><br><span class="line"></span><br><span class="line">3 directories, 0 files</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h4><ul><li><code>rm -rf /home/test.go</code></li></ul><h4 id="文件夹-1"><a href="#文件夹-1" class="headerlink" title="文件夹"></a>文件夹</h4><ul><li><p><code>rmdir</code> ：只能删除一个空的目录。对于该目录下有文件内容的删除不了。</p></li><li><p><code>rm -rf /a/b/c</code>：r表示递归删除，f表示强制且不提示</p></li></ul><h3 id="取文件路径"><a href="#取文件路径" class="headerlink" title="取文件路径"></a>取文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取路径最后的档名</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># basename /etc/etcd/conf-discovery</span></span><br><span class="line">conf-discovery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录名</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># dirname /etc/etcd/conf-discovery</span></span><br><span class="line">/etc/etcd</span><br></pre></td></tr></table></figure><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p><code>cat</code>：直接从头开始查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有内容</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># cat 1.py </span></span><br><span class="line"><span class="built_in">print</span>(1)</span><br><span class="line"><span class="built_in">print</span>(2)</span><br><span class="line"><span class="built_in">print</span>(3)</span><br><span class="line"><span class="built_in">print</span>(4)</span><br><span class="line"><span class="built_in">print</span>(5)</span><br><span class="line"><span class="built_in">print</span>(6)</span><br><span class="line"><span class="built_in">print</span>(7)</span><br><span class="line"><span class="built_in">print</span>(8)</span><br><span class="line"><span class="built_in">print</span>(9)</span><br><span class="line"><span class="built_in">print</span>(10)</span><br><span class="line"><span class="built_in">print</span>(11)</span><br><span class="line"><span class="built_in">print</span>(12)</span><br><span class="line"><span class="built_in">print</span>(13)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(14)</span><br><span class="line"><span class="built_in">print</span>(15)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(16)</span><br><span class="line"><span class="built_in">print</span>(17)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># cat -n 1.py </span></span><br><span class="line">     1<span class="built_in">print</span>(1)</span><br><span class="line">     2<span class="built_in">print</span>(2)</span><br><span class="line">     3<span class="built_in">print</span>(3)</span><br><span class="line">     4<span class="built_in">print</span>(4)</span><br><span class="line">     5<span class="built_in">print</span>(5)</span><br><span class="line">     6<span class="built_in">print</span>(6)</span><br><span class="line">     7<span class="built_in">print</span>(7)</span><br><span class="line">     8<span class="built_in">print</span>(8)</span><br><span class="line">     9<span class="built_in">print</span>(9)</span><br><span class="line">    10<span class="built_in">print</span>(10)</span><br><span class="line">    11<span class="built_in">print</span>(11)</span><br><span class="line">    12<span class="built_in">print</span>(12)</span><br><span class="line">    13<span class="built_in">print</span>(13)</span><br><span class="line">    14</span><br><span class="line">    15<span class="built_in">print</span>(14)</span><br><span class="line">    16<span class="built_in">print</span>(15)</span><br><span class="line">    17</span><br><span class="line">    18</span><br><span class="line">    19<span class="built_in">print</span>(16)</span><br><span class="line">    20<span class="built_in">print</span>(17)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示行号，但是空行本身不显示</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># cat -b 1.py </span></span><br><span class="line">     1<span class="built_in">print</span>(1)</span><br><span class="line">     2<span class="built_in">print</span>(2)</span><br><span class="line">     3<span class="built_in">print</span>(3)</span><br><span class="line">     4<span class="built_in">print</span>(4)</span><br><span class="line">     5<span class="built_in">print</span>(5)</span><br><span class="line">     6<span class="built_in">print</span>(6)</span><br><span class="line">     7<span class="built_in">print</span>(7)</span><br><span class="line">     8<span class="built_in">print</span>(8)</span><br><span class="line">     9<span class="built_in">print</span>(9)</span><br><span class="line">    10<span class="built_in">print</span>(10)</span><br><span class="line">    11<span class="built_in">print</span>(11)</span><br><span class="line">    12<span class="built_in">print</span>(12)</span><br><span class="line">    13<span class="built_in">print</span>(13)</span><br><span class="line"></span><br><span class="line">    14<span class="built_in">print</span>(14)</span><br><span class="line">    15<span class="built_in">print</span>(15)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    16<span class="built_in">print</span>(16)</span><br><span class="line">    17<span class="built_in">print</span>(17)</span><br></pre></td></tr></table></figure><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>与<code>cat</code>相反，从后面向前输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]<span class="comment"># tac  2.py </span></span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p><code>nl</code>：显示行号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认去除本身的空行，其实是加了参数 -bt</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># nl 3.py </span></span><br><span class="line">     1一</span><br><span class="line">     2二</span><br><span class="line">       </span><br><span class="line">     3三</span><br><span class="line">       </span><br><span class="line">     4四</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示空白行本身</span></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># nl -ba  3.py </span></span><br><span class="line">     1一</span><br><span class="line">     2二</span><br><span class="line">     3</span><br><span class="line">     4三</span><br><span class="line">     5</span><br><span class="line">     6四</span><br></pre></td></tr></table></figure><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>当文件内容过多时，可以使用<code>more</code>命令。一页一页看。执行命令之后，可以按<code>space</code>键向下翻页，按<code>Enter</code>向下翻一行。<code>:f</code>显示当前内容的行数，最后按<code>q</code>或者<code>b</code>退出。</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p><code>more</code>命令只能往下翻着看，而<code>less</code>则比它更灵活。可以自由上下。其余退出和操作和<code>more</code>类似。</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>顾名思义，头的意思，代表取出前面几行。</p><p>默认显示前10行，加参数<code>-n100</code> or <code>-n 100</code>表示取出前面100行。<code>n</code>可省略。</p><p>如果不知道文件一共有多少行，只想显示最后100行前面的内容，可以在数字前加负号，比如：<code>head -n -100 1.py</code> 。</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>顾名思义，尾巴的意思，代表取出后面几行。</p><p>默认显示后10行，用法和<code>head</code>一样。</p><p>如果不知道文件一共有多少行。只想显示前面100行后面的数据，可以把数字前面加号，比如：<code>tail -n +100 1.py</code> 。</p><p>另外，它还有个特别的功能，就是滚动输出，常用语日志查看。<code>tail -f /log/nginx.log</code>。按<code>ctrl + c</code>退出。</p><h2 id="文件搜寻"><a href="#文件搜寻" class="headerlink" title="文件搜寻"></a>文件搜寻</h2><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>脚本文件的搜寻。在终端的输入的一些命令。比如<code>ls、python、etcdctl、ping、ifocnfig</code>等。可以通过<code>which</code>查出它们的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]<span class="comment"># which python</span></span><br><span class="line">/usr/bin/python</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># which etcd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/etcd/etcd</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># which ping</span></span><br><span class="line">/usr/bin/ping</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># which ifconfig</span></span><br><span class="line">/usr/sbin/ifconfig</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># which consul</span></span><br><span class="line">/root/consul/consul</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项-a：将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称</span></span><br><span class="line"><span class="comment"># 有些也是找不到的，毕竟which只是根据找PATH所规范的目录，比如history。</span></span><br></pre></td></tr></table></figure><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>只找系统中某些特定目录底下的文件而已。</p><p>它主要针对一些<code>/bin/sbin</code>下的执行文件、<code>/usr/share/man</code>下的<code>man page</code>文件，速度很快。就是有些目录是找不到的。可以加<code>-l</code>查看到底查询了多少目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]<span class="comment"># whereis python</span></span><br><span class="line">python: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># whereis etcd</span></span><br><span class="line">etcd: /etc/etcd /usr/<span class="built_in">local</span>/etcd /usr/<span class="built_in">local</span>/etcd/etcd</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># whereis consul</span></span><br><span class="line">consul: /etc/consul /root/consul/consul /root/consul/consul.d</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>最强大的就是它了，但是它是直接查询硬盘的数据，速度不理想。</p><p>最标准的用法就是<code>find / -name python</code>，从根目录开始查，耗时。</p><p>还有一些筛选，就是<code>/</code>换成只查找指定目录下的数据。</p><p>搜索关键词也支持正则匹配，比如<code>*.py</code></p><p>指定筛选查找大小的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]<span class="comment"># find /root -name "*.py"</span></span><br><span class="line">/root/1.py</span><br><span class="line">/root/2.py</span><br><span class="line">/root/3.py</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># find / -name  "python"</span></span><br><span class="line">/etc/python</span><br><span class="line">/usr/bin/python</span><br><span class="line">/usr/share/gcc-4.8.2/python</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]<span class="comment"># find / -size +100M</span></span><br><span class="line">/proc/kcore</span><br><span class="line">find: ‘/proc/3918/task/3918/fd/6’: 没有那个文件或目录</span><br><span class="line">find: ‘/proc/3918/task/3918/fdinfo/6’: 没有那个文件或目录</span><br><span class="line">find: ‘/proc/3918/fd/5’: 没有那个文件或目录</span><br><span class="line">find: ‘/proc/3918/fdinfo/5’: 没有那个文件或目录</span><br><span class="line">/sys/devices/pci0000:00/0000:00:0f.0/resource1_wc</span><br><span class="line">/sys/devices/pci0000:00/0000:00:0f.0/resource1</span><br><span class="line">/root/consul/consul</span><br><span class="line">/usr/lib/locale/locale-archive</span><br><span class="line">/home/consul</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包管理</title>
      <link href="/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86.html"/>
      <url>/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑器</title>
      <link href="/Vim%E7%BC%96%E8%BE%91%E5%99%A8.html"/>
      <url>/Vim%E7%BC%96%E8%BE%91%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程管理</title>
      <link href="/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html"/>
      <url>/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="进程的观察"><a href="#进程的观察" class="headerlink" title="进程的观察"></a>进程的观察</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>显示某个时间点的进程运作情况</p><ul><li><code>ps aux</code>：观察系统所有的进程数据</li><li><code>ps -lA</code>：观察系统所有的进程数据</li><li><code>ps axjf</code>：连同部分进程数</li></ul><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p><strong>动态观察进程的变化：</strong></p><ul><li><code>top</code>：预设5秒来更新进程的画面</li><li><code>top -d 1</code>：设置更新进程信息的时间为1秒</li><li><code>top -d 1 -p 111</code>：只显示pid为111的进程动态信息</li></ul><p><strong>top执行过程中常用指令：</strong></p><ul><li><code>P</code>：以CPU资源使用率排序显示</li><li><code>M</code>：以内存使用率排序</li><li><code>N</code>：以PID来排序</li><li><code>T</code>：以该进程使用的cpu累积时间排序</li><li><code>q</code>：退出top动态刷新的界面</li></ul><p><strong>相关信息：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">top - 14:08:56 up 15 days,  2:56,  1 user,  load average: 0.05, 0.05, 0.05</span><br><span class="line">Tasks: 164 total,   1 running, 163 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.3 us,  0.5 sy,  0.0 ni, 99.2 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  3881276 total,  2925316 free,   157624 used,   798336 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  3209712 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                       </span><br><span class="line"> 1534 root      20   0   10.0g  28460   8464 S   1.0  0.7 253:05.33 etcd</span><br></pre></td></tr></table></figure><ul><li>第一行(top)<ul><li>目前时间，14:08:56</li><li>开机到目前为止所经过的时间，15 days</li><li>已经登录系统的用户人数：1 个 user</li><li>工作负载，越小代表系统越闲置，若高于1就得注意系统进程是否太过繁复</li></ul></li><li>第二行(Tasks)<ul><li>显示的是目前进程的总量与个别进程在什么状态，需要注意的是最后一个，如果不是0，那就好好看看那个process变成了僵尸进程吧</li></ul></li><li>第三行(%Cpus)<ul><li>显示的是CPU的整体负载，需要注意的是wa。通常这个代表I/Owait，通常系统变慢是大量I/O产生的问题。如果是多核心的设备，可以按下1来切换不同cpu的负载率。</li></ul></li><li>第四行与第五行<ul><li>表示目前的物理内存和虚拟内存的使用情况，swap尽量要使用，被用的多的话，表示系统物理内存实在不足</li></ul></li><li>第六行(每个进程使用的资源情况)<ul><li>PID：每个进程的id号</li><li>USER：该进程的所属使用者</li><li>PR：进程的优先执行顺序，越小越早被执行</li><li>NI：越小越早被执行</li></ul></li></ul><p><strong>注意：</strong></p><p>top预设使用cpu使用率作为排序的重点，如果想要更换为内存使用率排序，则可以按字母键<code>M</code>。如果要恢复按<code>P</code>。如果想离开top，按<code>q</code>。</p><h2 id="进程的管理"><a href="#进程的管理" class="headerlink" title="进程的管理"></a>进程的管理</h2><p>进程之间是可以相互控制的，可以关闭、重启。实际上是通过给它一个信号去告知该进程做什么。</p><p><strong>主要信号：</strong></p><table><thead><tr><th>数字代号</th><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>1</td><td>sighup</td><td>启动被终止的进程，可以让该进程重新读取自己的配置文件，类似重新启动</td></tr><tr><td>9</td><td>sigkill</td><td>代表强制中端一个进程的进行，如果该进程进行到一半，就可能有半产品产生，比如说vim，会生成.swp隐藏文件</td></tr><tr><td>15</td><td>sigterm</td><td>以正常的结束进程来终止该进程，但是如果这个进程本身已经发生问题，就无法通过正常的方法终止，也就是这个信号是无效的</td></tr></tbody></table><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p><strong>格式：</strong><code>kill -signal PID</code></p><p><strong>比如：</strong><code>kill -9 1111</code>：强制终止pid为1111的进程</p><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h3><p>由于kill后面必须跟PIDD，所以通常会结合ps指令使用。我们也可以不用PID，直接下达名称</p><p><strong>格式：</strong><code>killall -signal name</code></p><p><strong>比如：</strong></p><ul><li><code>killall -1 rsyslogd</code>：给rsylogd这个指令启动的PID一个代号为1的信号</li><li><code>killadd -9 httpd</code>：强制终止以httpd启动的所有进程</li></ul><h2 id="系统资源的观察"><a href="#系统资源的观察" class="headerlink" title="系统资源的观察"></a>系统资源的观察</h2><p>除了系统的进程之外，我们还必须就系统的一些资源来进行检查。</p><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>观察内存使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 jw]<span class="comment"># free</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        3881276      161628     2961180      178876      758468     3245956</span><br><span class="line">Swap:       2097148           0     2097148</span><br><span class="line">[root@jw-etcd01 jw]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3790         157        2891         174         740        3169</span><br><span class="line">Swap:          2047           0        2047</span><br></pre></td></tr></table></figure><p>仔细看看，前面的好理解，第一行是物理内存使用情况，第二行是虚拟内存使用情况。我还有2891mb物理内存可以用。后面的<code>shared buff/cache</code>是在已被使用的量中，用来作为缓冲及快取的量，是缓存。在系统比较忙碌时，可以被释放出来而继续利用，因此后面有个`available（可用的）数值。</p><p>我什么也没做，但是有740mb缓存。其实，系统把这些文件暂时存储下来，目的为了下次运作可以更快速取出之意。未来系统要用到该文件时，就可以直接在内存中搜寻取出，而不需要重新读取硬盘，速度会加快很多。</p><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><p>查阅系统与核心相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 jw]<span class="comment"># uname --help</span></span><br><span class="line">用法：uname [选项]...</span><br><span class="line">输出一组系统信息。如果不跟随选项，则视为只附加-s 选项。</span><br><span class="line"></span><br><span class="line">  -a, --all以如下次序输出所有信息。其中若-p 和</span><br><span class="line">                -i 的探测结果不可知则被省略：</span><br><span class="line">  -s, --kernel-name输出内核名称</span><br><span class="line">  -n, --nodename输出网络节点上的主机名</span><br><span class="line">  -r, --kernel-release输出内核发行号</span><br><span class="line">  -v, --kernel-version输出内核版本</span><br><span class="line">  -m, --machine输出主机的硬件架构名称,例如i686、x86_64、sw_64</span><br><span class="line">  -p, --processor输出处理器类型或<span class="string">"unknown"</span></span><br><span class="line">  -i, --hardware-platform输出硬件平台或<span class="string">"unknown"</span></span><br><span class="line">  -o, --operating-system输出操作系统名称</span><br><span class="line">      --<span class="built_in">help</span>显示此帮助信息并退出</span><br><span class="line">      --version显示版本信息并退出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件与文件系统的压缩、打包、备份</title>
      <link href="/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9-%E6%89%93%E5%8C%85-%E5%A4%87%E4%BB%BD.html"/>
      <url>/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9-%E6%89%93%E5%8C%85-%E5%A4%87%E4%BB%BD.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux权限</title>
      <link href="/Linux%E6%9D%83%E9%99%90.html"/>
      <url>/Linux%E6%9D%83%E9%99%90.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker仓库操作</title>
      <link href="/docker%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C.html"/>
      <url>/docker%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h1><p>仓库(Repository)是集中存放镜像(Image)的地方，分为私有仓库和公共仓库。</p><p>有时候我们喜欢把仓库和注册服务器(<code>Registry</code>)混淆，实际上并不是。注册服务器又称仓库服务器，是存放仓库的具体服务器。一个仓库服务器下可以有好多仓库。但是，你也别太较真，口语和概念本来就是有点不一样，大家心里清楚就行了。</p><p>例如：<code>docker.io/library/nginx:latest</code>。</p><ul><li>注册服务器(Registry)：<code>docker.io</code></li><li>仓库(Repository)：<code>library/nginx</code></li><li>标签(Tag)：<code>latest</code></li></ul><h2 id="docker-hub公共镜像市场"><a href="#docker-hub公共镜像市场" class="headerlink" title="docker hub公共镜像市场"></a>docker hub公共镜像市场</h2><p><a href="https://hub.docker.com" target="_blank" rel="noopener">docker官方仓库</a>。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>通过<code>docker login</code>命令登录，需提前注册好用户。登录成功后，会在宿主机当前用户的家目录创建一个<code>~/.docker/config.json</code>文件。保存用户的认证信息，之后就可以和<code>git</code>操作一样，进行<code>pull</code>和<code>push</code>。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>无需登录就可以<code>docker search</code>命令来查找官方仓库的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker search python</span></span><br><span class="line">NAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">python                           Python is an interpreted, interactive, objec…   <span class="number">4421</span>                [OK]                </span><br><span class="line">django                           Django is a free web application framework, …   <span class="number">863</span>                 [OK]                </span><br><span class="line">pypy                             PyPy is a fast, compliant alternative implem…   <span class="number">203</span>                 [OK]                </span><br><span class="line">kaggle/python                    Docker image for Python scripts <span class="keyword">run</span><span class="bash"> on Kaggle   128                                     [OK]</span></span><br><span class="line">arm32v7/python                   Python is an interpreted, interactive, objec…   <span class="number">38</span>                                      </span><br><span class="line">centos/python-<span class="number">35</span>-centos7         Platform for building and running Python <span class="number">3.5</span>…   <span class="number">36</span>                                      </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="第三方镜像市场"><a href="#第三方镜像市场" class="headerlink" title="第三方镜像市场"></a>第三方镜像市场</h2><h2 id="搭建本地私有仓库"><a href="#搭建本地私有仓库" class="headerlink" title="搭建本地私有仓库"></a>搭建本地私有仓库</h2><h3 id="使用自签发证书搭建私有仓库"><a href="#使用自签发证书搭建私有仓库" class="headerlink" title="使用自签发证书搭建私有仓库"></a>使用自签发证书搭建私有仓库</h3><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建证书文件夹</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># mkdir certs</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># ls</span></span><br><span class="line">certs images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -x509 -days 365 -out certs/domain.crt</span></span><br><span class="line">Generating a 4096 bit RSA private key</span><br><span class="line">..........................................++++</span><br><span class="line">......................................................................................................................................................................................................................................................................................................................................................................++++</span><br><span class="line">writing new private key to <span class="string">'certs/domain.key'</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CH</span><br><span class="line">State or Province Name (full name) [Some-State]:BeiJing</span><br><span class="line">Locality Name (eg, city) []:HaiDian</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:jiang_wei</span><br><span class="line">Organizational Unit Name (eg, section) []:linux</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:jiangwei.org          </span><br><span class="line">Email Address []:jw19961019@gmail.com</span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="编写compose-yaml"><a href="#编写compose-yaml" class="headerlink" title="编写compose.yaml"></a>编写compose.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  registry:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">registry:2.1</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      REGISTRY_HTTP_ADDR:</span> <span class="string">"0.0.0.0:5000"</span></span><br><span class="line"><span class="attr">      REGISTRY_HTTP_TLS_CERTIFICATE:</span> <span class="string">"/certs/domain.crt"</span></span><br><span class="line"><span class="attr">      REGISTRY_HTTP_TLS_KEY:</span> <span class="string">"/certs/domain.key"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"./images:/var/lib/registry"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"./certs:/certs"</span></span><br></pre></td></tr></table></figure><h4 id="启动私有仓库"><a href="#启动私有仓库" class="headerlink" title="启动私有仓库"></a>启动私有仓库</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># docker-compose up -d</span></span><br><span class="line">WARNING: The Docker Engine you<span class="string">'re using is running in swarm mode.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Compose does not use swarm mode to deploy services to multiple nodes in a swarm. All containers will be scheduled on the current node.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To deploy your application across the swarm, use `docker stack deploy`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pulling registry (registry:2.1)...</span></span><br><span class="line"><span class="string">2.1: Pulling from library/registry</span></span><br><span class="line"><span class="string">9943fffae777: Pull complete</span></span><br><span class="line"><span class="string">fb15e825cb68: Pull complete</span></span><br><span class="line"><span class="string">b9583a207297: Pull complete</span></span><br><span class="line"><span class="string">a3ed95caeb02: Pull complete</span></span><br><span class="line"><span class="string">87fee1c528e9: Pull complete</span></span><br><span class="line"><span class="string">829473b2393f: Pull complete</span></span><br><span class="line"><span class="string">2c1adb4b358c: Pull complete</span></span><br><span class="line"><span class="string">Digest: sha256:e641943a78a8f634c16ad69f5c9d779f470b147865c2121d89c52ea0da6fc1bd</span></span><br><span class="line"><span class="string">Status: Downloaded newer image for registry:2.1</span></span><br><span class="line"><span class="string">Creating registry ... done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root@jw-ubuntu01:/home/registry# docker-compose ps</span></span><br><span class="line"><span class="string">  Name                Command               State           Ports         </span></span><br><span class="line"><span class="string">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">registry   /bin/registry /etc/docker/ ...   Up      0.0.0.0:5000-&gt;5000/tcp</span></span><br></pre></td></tr></table></figure><h4 id="实验1：忽略证书访问"><a href="#实验1：忽略证书访问" class="headerlink" title="实验1：忽略证书访问"></a>实验1：忽略证书访问</h4><p>添加域名解析(另外的机器上)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~/dsec/DSec/registry<span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">172.0.0.1       sw1</span><br><span class="line">192.168.32.88 jiangwei.org</span><br></pre></td></tr></table></figure><p><code>ping</code>测试(另外的机器上)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~/dsec/DSec/registry<span class="comment"># ping jiangwei.org</span></span><br><span class="line">PING jiangwei.org (192.168.32.88) 56(84) bytes of data.</span><br><span class="line">64 bytes from jiangwei.org (192.168.32.88): icmp_seq=1 ttl=60 time=0.894 ms</span><br><span class="line">64 bytes from jiangwei.org (192.168.32.88): icmp_seq=2 ttl=60 time=0.799 ms</span><br></pre></td></tr></table></figure><h5 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不带证书访问，--noproxy是因为公司走的是内网，设置下不走代理</span></span><br><span class="line">root@sw1:~/dsec/DSec/registry<span class="comment"># curl --noproxy jiangwei.org  https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line">curl: (60) SSL certificate problem: self signed certificate</span><br><span class="line">More details here: https://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl performs SSL certificate verification by default, using a <span class="string">"bundle"</span></span><br><span class="line"> of Certificate Authority (CA) public keys (CA certs). If the default</span><br><span class="line"> bundle file isn<span class="string">'t adequate, you can specify an alternate file</span></span><br><span class="line"><span class="string"> using the --cacert option.</span></span><br><span class="line"><span class="string">If this HTTPS server uses a certificate signed by a CA represented in</span></span><br><span class="line"><span class="string"> the bundle, the certificate verification probably failed due to a</span></span><br><span class="line"><span class="string"> problem with the certificate (it might be expired, or the name might</span></span><br><span class="line"><span class="string"> not match the domain name in the URL).</span></span><br><span class="line"><span class="string">If you'</span>d like to turn off curl<span class="string">'s verification of the certificate, use</span></span><br><span class="line"><span class="string"> the -k (or --insecure) option.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 忽略证书访问：-k or --insecure代表忽略证书</span></span><br><span class="line"><span class="string">root@sw1:~/dsec/DSec/registry# curl --noproxy jiangwei.org  -k https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line"><span class="string">&#123;"repositories":[]&#125;</span></span><br></pre></td></tr></table></figure><h5 id="push、pull"><a href="#push、pull" class="headerlink" title="push、pull"></a>push、pull</h5><p>在docker的配置文件中加一个参数(另外的机器上)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:/etc/systemd/system/docker.service.d<span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"insecure-registries"</span>: [<span class="string">"jiangwei.org:5000"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>该参数就是你生成证书时填写的<code>CN</code>+<code>port</code>。我填的是<code>jiangwei.org</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~/jiangwei<span class="comment"># docker push jiangwei.org:5000/test/busybox:latest</span></span><br><span class="line">The push refers to a repository [jiangwei.org:5000/<span class="built_in">test</span>/busybox]</span><br><span class="line">27a32be9858c: Pushed </span><br><span class="line">latest: digest: sha256:e9e3f57925c4725fc56076f9637adc80a45ac8f86161199926025a9455eb8e37 size: 2136</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是我之前push过的，所以可以直接</span></span><br><span class="line">root@sw1:~/jiangwei<span class="comment"># docker pull jiangwei.org:5000/test/alpine:3.8</span></span><br><span class="line">3.8: Pulling from <span class="built_in">test</span>/alpine</span><br><span class="line">c87736221ed0: Pull complete </span><br><span class="line">Digest: sha256:030cbfe2fcf9627378255cf237b51a17dcbae11dee29a00f13670caf3fb09b80</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> jiangwei.org:5000/<span class="built_in">test</span>/alpine:3.8</span><br></pre></td></tr></table></figure><h4 id="实验2：带证书访问"><a href="#实验2：带证书访问" class="headerlink" title="实验2：带证书访问"></a>实验2：带证书访问</h4><p>把证书从机器1拷贝到另一机器到<code>/etc/docker/certs.d/jiangwei.org:5000/</code>下面，没有就创建这个文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># scp certs/domain.crt sw1:/etc/docker/certs.d/jiangwei.org:5000/</span></span><br><span class="line">domain.crt</span><br></pre></td></tr></table></figure><h5 id="curl-1"><a href="#curl-1" class="headerlink" title="curl"></a>curl</h5><p>之前的curl就可以跳过证书访问。现在来检验携带证书访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一样的-x 是因为我走了公司内网，这里设置代理为空。</span></span><br><span class="line">root@sw1:/etc/docker/certs.d/jiangwei.org:5000<span class="comment"># curl --cacert ./domain.crt -x ""  https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"pause"</span>,<span class="string">"test/alpine"</span>,<span class="string">"test/busybox"</span>]&#125;</span><br></pre></td></tr></table></figure><h5 id="push、pull-1"><a href="#push、pull-1" class="headerlink" title="push、pull"></a>push、pull</h5><p>为了检验有效性，把之前添加的<code>daemon.json</code>下的参数先删除。然后再重启docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以正常推</span></span><br><span class="line">root@sw1:/etc/docker/certs.d/jiangwei.org:5000<span class="comment"># docker push jiangwei.org:5000/pause</span></span><br><span class="line">The push refers to a repository [jiangwei.org:5000/pause]</span><br><span class="line">5f70bf18a086: Pushed </span><br><span class="line">41ff149e94f2: Pushed </span><br><span class="line">latest: digest: sha256:ccc01f0fd7377553737ab082f9ff2cc4d6f00491146001aa55d4fdf5a07960ba size: 3061</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以正常拉</span></span><br><span class="line">root@sw1:/etc/docker/certs.d/jiangwei.org:5000<span class="comment"># docker pull jiangwei.org:5000/test/alpine:3.8</span></span><br><span class="line">3.8: Pulling from <span class="built_in">test</span>/alpine</span><br><span class="line">c87736221ed0: Already exists </span><br><span class="line">Digest: sha256:030cbfe2fcf9627378255cf237b51a17dcbae11dee29a00f13670caf3fb09b80</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> jiangwei.org:5000/<span class="built_in">test</span>/alpine:3.8</span><br></pre></td></tr></table></figure><h4 id="实验3：全局带证书访问"><a href="#实验3：全局带证书访问" class="headerlink" title="实验3：全局带证书访问"></a>实验3：全局带证书访问</h4><p>现在不是把证书放在docker那个配置目录下，而是<code>/usr/local/share/ca-certificate/</code>目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用mv命令，这样原来的方式应该已经失效</span></span><br><span class="line">root@sw1:/usr/<span class="built_in">local</span>/share/ca-certificates<span class="comment"># mv /etc/docker/certs.d/jiangwei.org\:5000/domain.crt ./</span></span><br><span class="line">root@sw1:/usr/<span class="built_in">local</span>/share/ca-certificates<span class="comment"># ls</span></span><br><span class="line">cacert.crt  docker-hub.cloud.top.crt  domain.crt</span><br></pre></td></tr></table></figure><p>更新证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:/usr/<span class="built_in">local</span>/share/ca-certificates<span class="comment"># update-ca-certificates </span></span><br><span class="line">Updating certificates <span class="keyword">in</span> /etc/ssl/certs...</span><br><span class="line">WARNING: ca.pem does not contain a certificate or CRL: skipping</span><br><span class="line">1 added, 0 removed; <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><h5 id="curl-2"><a href="#curl-2" class="headerlink" title="curl"></a>curl</h5><p>现在curl可以不用证书访问了，直接get。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:/<span class="comment"># curl  -x ""  https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"pause"</span>,<span class="string">"test/alpine"</span>,<span class="string">"test/busybox"</span>]&#125;</span><br></pre></td></tr></table></figure><h5 id="push、pull-2"><a href="#push、pull-2" class="headerlink" title="push、pull"></a>push、pull</h5><p>重启docker，看看docker是否也可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:/<span class="comment"># systemctl restart docker</span></span><br><span class="line"><span class="comment"># 第一种忽略证书已经清空</span></span><br><span class="line">root@sw1:/<span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第二种证书访问也已经被清空</span></span><br><span class="line">root@sw1:/<span class="comment"># ls /etc/docker/certs.d/jiangwei.org\:5000/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种push：检验通过</span></span><br><span class="line">root@sw1:/<span class="comment"># docker tag harbor.sh.deepin.com/sunway/rabbitmq:3.6.6 jiangwei.org:5000/test/rabbitmq:3.6.6</span></span><br><span class="line">root@sw1:/<span class="comment"># docker push jiangwei.org:5000/test/rabbitmq:3.6.6</span></span><br><span class="line">The push refers to a repository [jiangwei.org:5000/<span class="built_in">test</span>/rabbitmq]</span><br><span class="line">0da07d84e27d: Pushed </span><br><span class="line">7bf1a725df91: Pushing [==============&gt;                                    ]  27.68MB/97.76MB</span><br><span class="line">b1a42145e518: Pushed </span><br><span class="line">121d220e2d64: Pushing [================&gt;                                  ]  21.02MB/65.63MB</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>实验都是在另外一台机器上做的。</p><h3 id="登录认证方式搭建私有仓库"><a href="#登录认证方式搭建私有仓库" class="headerlink" title="登录认证方式搭建私有仓库"></a>登录认证方式搭建私有仓库</h3><p>就算有证书，浏览器或者docker都可以设置忽略证书，然后进行<code>push、pull</code>操作。或者通过<code>https</code>获取相关信息，这还是有点不安全。所以可以加入用户认证，就算他忽略了证书，也必须通过用户认证才能进行<code>push、pull</code>操作。或者通过<code>https</code>获取相关信息。</p><h4 id="生成用户认证文件"><a href="#生成用户认证文件" class="headerlink" title="生成用户认证文件"></a>生成用户认证文件</h4><p>在运行仓库容器的服务器上操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建auth文件夹</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># mkdir auth</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生生成认证文件：创建了一个用户名为testuser、密码为testpassword的文件</span></span><br><span class="line">docker run  --entrypoint htpasswd  --rm registry:2.1 -Bbn testuser testpassword &gt; auth/htpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># cat auth/htpasswd </span></span><br><span class="line">testuser:<span class="variable">$2y</span><span class="variable">$05</span><span class="variable">$Rds3vlTUjEYKlLcgasiIBeARLtTwQrxfZ0Jgp6YsUCn5hExmdMFCu</span></span><br></pre></td></tr></table></figure><h4 id="修改compose-yaml文件"><a href="#修改compose-yaml文件" class="headerlink" title="修改compose.yaml文件"></a>修改compose.yaml文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># vim docker-compose.yaml </span></span><br><span class="line">version: <span class="string">"2"</span></span><br><span class="line">  </span><br><span class="line">services:</span><br><span class="line">  registry:</span><br><span class="line">    image: registry:2.1</span><br><span class="line">    container_name: registry</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"5000:5000"</span></span><br><span class="line">    environment:</span><br><span class="line">      REGISTRY_HTTP_ADDR: <span class="string">"0.0.0.0:5000"</span></span><br><span class="line">      REGISTRY_HTTP_TLS_CERTIFICATE: <span class="string">"/certs/domain.crt"</span></span><br><span class="line">      REGISTRY_HTTP_TLS_KEY: <span class="string">"/certs/domain.key"</span></span><br><span class="line">      REGISTRY_AUTH: <span class="string">"htpasswd"</span></span><br><span class="line">      REGISTRY_AUTH_HTPASSWD_REALM: <span class="string">"Registry Realm"</span></span><br><span class="line">      REGISTRY_AUTH_HTPASSWD_PATH: <span class="string">"/auth/htpasswd"</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">"./images:/var/lib/registry"</span></span><br><span class="line">      - <span class="string">"./certs:/certs"</span></span><br><span class="line">      - <span class="string">"./auth:/auth"</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="curl-3"><a href="#curl-3" class="headerlink" title="curl"></a>curl</h5><p>为了互不影响，在第三台机器上测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消证书验证，但是不携带用户认证</span></span><br><span class="line">root@sw2:/<span class="comment"># curl  -k -x ""    https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"errors"</span>:[&#123;<span class="string">"code"</span>:<span class="string">"UNAUTHORIZED"</span>,<span class="string">"message"</span>:<span class="string">"access to the requested resource is not authorized"</span>,<span class="string">"detail"</span>:[&#123;<span class="string">"Type"</span>:<span class="string">"registry"</span>,<span class="string">"Name"</span>:<span class="string">"catalog"</span>,<span class="string">"Action"</span>:<span class="string">"*"</span>&#125;]&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消证书验证，但是携带错误口令认证</span></span><br><span class="line">root@sw2:/<span class="comment"># curl  -k -x "" -u testuser:password    https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"errors"</span>:[&#123;<span class="string">"code"</span>:<span class="string">"UNAUTHORIZED"</span>,<span class="string">"message"</span>:<span class="string">"access to the requested resource is not authorized"</span>,<span class="string">"detail"</span>:[&#123;<span class="string">"Type"</span>:<span class="string">"registry"</span>,<span class="string">"Name"</span>:<span class="string">"catalog"</span>,<span class="string">"Action"</span>:<span class="string">"*"</span>&#125;]&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消证书验证，携带正确令认证</span></span><br><span class="line">root@sw2:/<span class="comment"># curl  -k -x "" -u testuser:testpassword    https://jiangwei.org:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"pause"</span>,<span class="string">"test/alpine"</span>,<span class="string">"test/busybox"</span>,<span class="string">"test/rabbitmq"</span>]&#125;</span><br></pre></td></tr></table></figure><h5 id="docker-login"><a href="#docker-login" class="headerlink" title="docker login"></a>docker login</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有登录就push</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># docker push  jiangwei.org:5000/test/alpine</span></span><br><span class="line">The push refers to repository [jiangwei.org:5000/<span class="built_in">test</span>/alpine]</span><br><span class="line">d9ff549177a9: Preparing </span><br><span class="line">no basic auth credentials</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录，携带错误口令</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># docker login jiangwei.org:5000</span></span><br><span class="line">Username: testuser</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: login attempt to https://jiangwei.org:5000/v2/ failed with status: 401 Unauthorized</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录，携带正确口令</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># docker login jiangwei.org:5000</span></span><br><span class="line">Username: testuser</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始推送</span></span><br><span class="line">root@jw-ubuntu01:/home/registry<span class="comment"># docker push  jiangwei.org:5000/test/alpine</span></span><br><span class="line">The push refers to repository [jiangwei.org:5000/<span class="built_in">test</span>/alpine]</span><br><span class="line">d9ff549177a9: Layer already exists </span><br><span class="line">latest: digest: sha256:94acf7e9dabda295562ebf24085bf8d4785cda54ceacc8ec879ff481d0dba708 size: 2140</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>：您不能将身份验证和将凭据作为明文发送的身份验证方案使用。您必须首先<a href="https://docs.docker.com/registry/deploying/#running-a-domain-registry" target="_blank" rel="noopener">配置TLS</a>才能进行身份验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为机器2没有证书，是登录不了的</span></span><br><span class="line">root@sw2:/<span class="comment"># docker login jiangwei.org:5000</span></span><br><span class="line">Username: 1</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: Get https://jiangwei.org:5000/v2/: x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile</title>
      <link href="/docker-dockerfile.html"/>
      <url>/docker-dockerfile.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Dockerfile是一个文本格式的配置文件，我们可以通过编写dockerfile构建自己的镜像。</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>dockerfile由一行行命令语组成，支持<code>#</code>注释。</p><ul><li>基础镜像</li><li>维护中信息</li><li>构建镜像的指令</li><li>容器启动执行指令</li></ul><p>先来看个示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-slim as build</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> author=jiang_wei email=jw19961019@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># anchore version</span></span><br><span class="line"><span class="keyword">ARG</span> ANCHORE=<span class="number">0.4</span></span><br><span class="line"><span class="keyword">ARG</span> ANCHORE_CLI=<span class="number">0.4</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change mirrors</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./build/configs/sources.list /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y gcc git &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;git clone anchore&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> -b <span class="variable">$&#123;ANCHORE&#125;</span> https://github.com/anchore/anchore-engine.git &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;python wheels&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> anchore-engine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span>  <span class="string">"anchorecli==<span class="variable">$&#123;ANCHORE_CLI&#125;</span>"</span> &gt;&gt; ./requirements.txt &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip3 wheel -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --wheel-dir=/build/wheels  . &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;copy config&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir /build/configs &amp;&amp; \ </span></span><br><span class="line">    cp ./conf/default_config.yaml /build/configs/default_config.yaml &amp;&amp; \</span><br><span class="line">    cp ./docker-compose.yaml /build/configs/docker-compose.yaml &amp;&amp; \</span><br><span class="line">    cp ./docker-compose-dev.yaml /build/configs/docker-compose-dev.yaml &amp;&amp; \</span><br><span class="line">    cp ./docker-<span class="keyword">entrypoint</span>.<span class="bash">sh /build/configs/docker-entrypoint.sh &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"clean cache"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get autoremove -y gcc git &amp;&amp; apt-get autoclean &amp;&amp; apt-get clean  &amp;&amp; apt-get autoremove &amp;&amp; rm -rf /var/cache/apt/ &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /build/anchore-engine/</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -z -c -v -C /build -f /build.tgz .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /build /build</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /etc/apt/sources.list /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./build/deps/skopeo /usr/bin/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./build/configs/skopeo-policy.json /etc/containers/policy.json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span> LC_ALL=C.UTF-<span class="number">8</span> \</span><br><span class="line">    ANCHORE_CONFIG_DIR=/config \</span><br><span class="line">    ANCHORE_SERVICE_DIR=/anchore_service \</span><br><span class="line">    ANCHORE_LOG_LEVEL=INFO \</span><br><span class="line">    ANCHORE_ENABLE_METRICS=false \</span><br><span class="line">    ANCHORE_INTERNAL_SSL_VERIFY=false \</span><br><span class="line">    ANCHORE_WEBHOOK_DESTINATION_URL=null \</span><br><span class="line">    ANCHORE_FEEDS_ENABLED=true \</span><br><span class="line">    ANCHORE_FEEDS_SELECTIVE_ENABLED=true \</span><br><span class="line">    ANCHORE_FEEDS_SSL_VERIFY=true \</span><br><span class="line">    ANCHORE_ENDPOINT_HOSTNAME=localhost \</span><br><span class="line">    ANCHORE_EVENTS_NOTIFICATIONS_ENABLED=false \</span><br><span class="line">    ANCHORE_FEED_SYNC_INTERVAL_SEC=<span class="number">21600</span> \</span><br><span class="line">    ANCHORE_EXTERNAL_PORT=null \</span><br><span class="line">    ANCHORE_EXTERNAL_TLS=false \</span><br><span class="line">    ANCHORE_AUTHZ_HANDLER=native \</span><br><span class="line">    ANCHORE_EXTERNAL_AUTHZ_ENDPOINT=null \</span><br><span class="line">    ANCHORE_ADMIN_PASSWORD=foobar \</span><br><span class="line">    ANCHORE_ADMIN_EMAIL=admin@myanchore \</span><br><span class="line">    ANCHORE_HOST_ID=<span class="string">"anchore-quickstart"</span> \</span><br><span class="line">    ANCHORE_DB_PORT=<span class="number">5432</span> \</span><br><span class="line">    ANCHORE_DB_NAME=postgres \</span><br><span class="line">    ANCHORE_DB_USER=postgres \</span><br><span class="line">    SET_HOSTID_TO_HOSTNAME=false \</span><br><span class="line">    ANCHORE_CLI_USER=admin \</span><br><span class="line">    ANCHORE_CLI_PASS=foobar \</span><br><span class="line">    ANCHORE_SERVICE_PORT=<span class="number">8228</span> \</span><br><span class="line">    ANCHORE_CLI_URL=<span class="string">"http://localhost:8228"</span> \</span><br><span class="line">    ANCHORE_FEEDS_URL=<span class="string">"https://ancho.re/v1/service/feeds"</span> \</span><br><span class="line">    ANCHORE_FEEDS_CLIENT_URL=<span class="string">"https://ancho.re/v1/account/users"</span> \</span><br><span class="line">    ANCHORE_FEEDS_TOKEN_URL=<span class="string">"https://ancho.re/oauth/token"</span> \</span><br><span class="line">    ANCHORE_GLOBAL_CLIENT_READ_TIMEOUT=<span class="number">0</span> \</span><br><span class="line">    ANCHORE_GLOBAL_CLIENT_CONNECT_TIMEOUT=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;ANCHORE_SERVICE_PORT&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y curl &amp;&amp; \</span></span><br><span class="line"><span class="bash">    groupadd --gid 1000 anchore &amp;&amp; \</span></span><br><span class="line"><span class="bash">    useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir <span class="variable">$&#123;ANCHORE_SERVICE_DIR&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir /config &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /var/<span class="built_in">log</span>/anchore &amp;&amp; chown -R anchore:anchore /var/<span class="built_in">log</span>/anchore &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /var/run/anchore &amp;&amp; chown -R anchore:anchore /var/run/anchore &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /analysis_scratch &amp;&amp; chown -R anchore:anchore /analysis_scratch &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /workspace &amp;&amp; chown -R anchore:anchore /workspace &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p <span class="variable">$&#123;ANCHORE_SERVICE_DIR&#125;</span> &amp;&amp; chown -R anchore:anchore /anchore_service &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp /build/configs/default_config.yaml /config/config.yaml &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp /build/configs/docker-compose.yaml /docker-compose.yaml &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp /build/configs/docker-compose-dev.yaml /docker-compose-dev.yaml &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp /build/configs/docker-entrypoint.sh /docker-entrypoint.sh &amp;&amp; \</span></span><br><span class="line"><span class="bash">    md5sum /config/config.yaml &gt; /config/build_installed &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /docker-entrypoint.sh &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip3 install --no-index --find-links=./ /build/wheels/*.whl &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/skopeo &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod 777 /etc/containers/policy.json &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /build /root/.cache &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"clean cache"</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get autoclean &amp;&amp; apt-get clean  &amp;&amp; apt-get autoremove &amp;&amp; rm -rf /var/cache/apt/</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> --start-period=20s \</span></span><br><span class="line"><span class="bash">    CMD curl -f http://localhost:8228/health || <span class="built_in">exit</span> 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> anchore:anchore</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/docker-entrypoint.sh"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"anchore-manager"</span>, <span class="string">"service"</span>, <span class="string">"start"</span>, <span class="string">"--all"</span>]</span></span><br></pre></td></tr></table></figure><p>看不懂没关系，哈哈！！！看下面的指令介绍。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令分为两种，包括<code>配置指令</code>、<code>操作指令</code>。</p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>指定构建自定义镜像的基础镜像。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt; [as &lt;name&gt;]</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;:&lt;tag&gt; [as &lt;name&gt;]</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;:&lt;digest&gt; [as &lt;name&gt;]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有指定tag，就默认latest</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取别名，下一个FROM用的到</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-slim as build</span><br></pre></td></tr></table></figure><p>任何一个dockerfile文件第一行指令必须为<code>FROM</code>，注释除外。</p><p>可以为基础镜像取别名，多用在构建多阶镜像。</p><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p>定义构建镜像过程中使用的变量。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明python</span></span><br><span class="line"><span class="keyword">ARG</span> python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明go版本为1.12(带有默认值)</span></span><br><span class="line"><span class="keyword">ARG</span> GOVERSION=<span class="number">1.12</span></span><br></pre></td></tr></table></figure><p>在执行<code>docker build</code>命令构建镜像的时候，可以通过参数<code>--build-arg k1=v1 --build-arg k2=v2</code>来为变量赋值，也会覆盖dockerfile定义的默认值。镜像构建成功后，该变量将不再保存。</p><p>docker内置了一些默认的ARG变量，用户无需声明而直接使用。比如，在公司内网经常遇到代理的问题。可以通过设置这几个(不区分大小写)：</p><ul><li><code>HTTP_PROXY</code></li><li><code>HTTS_PROXY</code></li><li><code>FTP_PROXY</code></li><li><code>NO_PROXY</code></li></ul><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>为镜像元数据标签信息，这些信息可以用来辅助过滤特定的镜像。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> k1=v1 k2=v2 ...</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> k3=v3</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> author=jiang_wei email=jw19961019@gmail.com</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"dockerfile"</span></span></span><br></pre></td></tr></table></figure><p>可以有多个<code>LABEL</code>，但是为了尽量减少镜像构建层数，应该写一起。</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>声明容器运行时监听的端口，只是起到声明作用，并不会自动完成映射。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">81</span>/tcp</span><br></pre></td></tr></table></figure><p>如果要将端口映射出来，启动容器时，可以加<code>-P</code>参数。docker主机就会默认分配一个宿主机的随机端口映射到声明的一个端口上。或者加<code>-p</code>参数，指定宿主机的某个端口映射到声明的某个端口。比如将宿主机的8080映射到nginx容器的80：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 8080:80 -p 8181:81 nginx</span></span><br></pre></td></tr></table></figure><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>指定环境变量，在镜像生成过程中会被后续的<code>RUN</code>指令使用，在镜像启动的容器中也会存在，不会像<code>ARG</code>那样。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> k1 v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> K2=V2 K3=V3</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \ 代表换行</span></span><br><span class="line"><span class="keyword">ENV</span> username=jiang_wei \</span><br><span class="line">    password=root \</span><br><span class="line">    host=localhost \</span><br><span class="line">    port=<span class="number">3306</span> \</span><br><span class="line">    database=test</span><br></pre></td></tr></table></figure><p>同样，为了减少镜像层数，应该使用少的<code>ENV</code>声明。</p><p>指定的环境变量可以被运行时指定的覆盖，比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> mysql -e password=1 -e username=2</span></span><br></pre></td></tr></table></figure><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>指定启动容器时默认执行的命令。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相当于执行executable param1 param2，不会启动一个新的终端，推荐此方式。</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在默认的shell中执行，提供给需要交互的应用，少用。</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供给ENTRYPOINT的默认参数</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></span><br></pre></td></tr></table></figure><p>每个dockerfile只能有一个<code>CMD</code>，如果指定了多条，只有最后一条生效。</p><p>如果用户启动容器的时候手动指定了运行的命令，则会覆盖CMD指定的命令。</p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>指定容器启动时最先执行的命令，也是入口命令。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec调用执行</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shell中执行</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure><p>每个dockerfile只能有一个该指令，当存在多个时，以最后一条为准。</p><p>运行时，也可被<code>--entrypoint</code>参数覆盖，比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --entrypoint ls</span></span><br></pre></td></tr></table></figure><p>该命令和<code>CMD</code>有着对比。</p><p>相同点：</p><ul><li><strong>都可以指定shell或exec函数调用的方式执行命令</strong></li><li><strong>多个CMD或ENTRYPOINT指令时，只有最后一个生效</strong></li></ul><p>不同点：</p><ul><li><strong>CMD指令指定的容器启动时命令可以被docker run指定的命令覆盖，而ENTRYPOINT指令指定的命令不能被覆盖，而是将docker run指定的参数当做ENTRYPOINT指定命令的参数。除非加<code>--entrypoint</code></strong></li><li><strong>CMD指令可以为ENTRYPOINT指令设置默认参数，而且可以被docker run指定的参数覆盖</strong></li></ul><p>另外注意一点：</p><p><strong>CMD指令为ENTRYPOINT指令提供默认参数是基于镜像层次结构生效的，而不是基于是否在同个Dockerfile文件中。意思就是说，如果Dockerfile指定基础镜像中是ENTRYPOINT指定的启动命令，则该Dockerfile中的CMD依然是为基础镜像中的ENTRYPOINT设置默认参数。除非当前dockerfile，重新定义entrypoint。</strong></p><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>创建一个数据卷挂载点。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/data"</span>]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/path1"</span>,<span class="string">"/path2"</span>]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/<span class="built_in">log</span></span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/db /var/nginx</span></span><br></pre></td></tr></table></figure><p>注意：数据卷也有多种，有容器运行时指定数据卷或者数据卷容器等。</p><p>这个只是其中一种，通过此方式创建的数据卷挂载点，并不友好。</p><p>它只是会在容器运行时，把容器的挂载卷目录挂到宿主机上的一个随机目录，我们无法指定指定主机上对应的目录。况且如果容器销毁了，重新启动一个容器的时候，会重新挂载随机目录，没多大意义。当然，容器停止再次启动时，还是会用已经挂到宿主机上的卷。</p><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>指定运行容器时的用户名或uid，后续的RUN等指令也会使用指定的用户身份。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> postgres</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> filebeat</span><br></pre></td></tr></table></figure><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>设置工作目录，对后续的<code>RUN CMD ENTRYPOINT COPY ADDs</code>生效，如果此目录不存在就会创建。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /filebeat</span></span><br></pre></td></tr></table></figure><p>为避免出错，推荐后面指定的是绝对路径。</p><h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p>这个指定只对当前镜像的子镜像生效，就是以该镜像为基础镜像的其他镜像，构建的时候，会执行此命令。</p><p>比如，当前A镜像的dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="bash"> ls</span></span><br></pre></td></tr></table></figure><p>这个命令在A镜像构建过程和启动A镜像的一个容器时并不会执行。</p><p>在B镜像的dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> A</span><br></pre></td></tr></table></figure><p>此时，在构建B镜像时，因为基于了A镜像构建，而又声明了<code>ONBUILD</code>。会执行<code>ls</code>这个命令，隐式构建。</p><h4 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h4><p>配置启动的容器如何进行健康检查。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据所执行命令的返回值为0来判断</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> [OPTIONS] CMD <span class="built_in">command</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止健康检查</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> NONE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">--start-period=DURATION 默认<span class="number">0</span>s：启动时间，如果指定这个参数，则必须大于 <span class="number">0</span>s ；为需要启动的容器提供了初始化的时间段，在这个时间段内如果检查失败，则不会记录失败次数。 如果在启动时间内成功执行了健康检查，则容器将被视为已经启动，如果在启动时间内再次出现检查失败，则会记录失败次数。</span><br><span class="line">--interval=duration 默认<span class="number">30</span>s:经过多久检查一次</span><br><span class="line">--timeout=dauration 默认<span class="number">30</span>s：每次检查等待结果的超时设置</span><br><span class="line">--retries=N 默认<span class="number">3</span>：如果失败了，重试的次数才最终确定失败</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> --start-period=20s \</span></span><br><span class="line"><span class="bash">    CMD curl -f http://localhost:8228/health || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>运行指定命令。</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在shell终端中执行命令，即/bin/sh -c，推荐使用此方式</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令会解析为json数组，使用exec执行，不会启动新的shell环境，也就是不会启动新的进程</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></span><br></pre></td></tr></table></figure><p>每条指令将在当前镜像基础上执行命令，并提交为新的镜像层，当命令较长时，可以使用<code>\</code>来换行。<code>cmd1 &amp;&amp; cmd2</code> 代表 一次性执行两条命令。</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>添加内容到镜像、</p><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> &lt;src&gt; &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>src</code>可以是dockerfile所在目录的相对路径(文件或目录)，也可以是一个<code>URL</code>，或者一个<code>tar</code>文件，会自动解压为目录。</p><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制内容到镜像，与<code>ADD</code>类似。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t image:v1 .</span><br></pre></td></tr></table></figure><p>该命令会读取当前的Dockerfilke文件，并将该文件路径下的所有数据作为上下文(Context)发送到docker server端，服务的校验文件内指令的个时候，逐行执行命令。每一个指令会生成一层新的镜像。创建成功后，会返回最终镜像的ID。</p><p>如果上下文过大，会导致发送大量数据给服务端，延缓创建过程，因此除非是生成镜像所必须的文件，不然最好不要放到上下文路径下。如果使用非上下文路径下的Dockerfile文件，可以通过<code>-f</code>指定。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /home/dockerfile -t image:v2 .</span><br></pre></td></tr></table></figure><p>注意不要少了最后一个<code>.</code>，它代表以当前路径为上下文，如果构建镜像的文件不在当前目录，也可以指定其他路径为当前构建镜像所需要的上下文。例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /home/dockerfile -t image:v3 /home/context/</span><br></pre></td></tr></table></figure><h4 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h4><p>使用<code>docker build</code>命令构建镜像时，还支持一些选项来调整创建镜像过程的行为。</p><ul><li><code>--build-arg list</code>：添加创建时变量，给dockerfile中的<code>ARG</code>变量赋值或者覆盖</li><li><code>--force-rm</code>：总是删除中间过程的容器</li><li><code>--label list</code>：添加一些镜像的元数据标签</li><li><code>--network string</code>：指定<code>RUN</code>命令时的网络模式</li><li><code>--no-cache</code>：创建镜像时，不使用缓存</li><li><code>--rm</code>：创建成功后自动删除中间过程容器，默认为真</li></ul><h1 id="优化dockerfile"><a href="#优化dockerfile" class="headerlink" title="优化dockerfile"></a>优化dockerfile</h1><h2 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h2><h2 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h2><h2 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h2><h2 id="及时清除缓存和缓存文件"><a href="#及时清除缓存和缓存文件" class="headerlink" title="及时清除缓存和缓存文件"></a>及时清除缓存和缓存文件</h2><h2 id="构建顺序"><a href="#构建顺序" class="headerlink" title="构建顺序"></a>构建顺序</h2>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器操作</title>
      <link href="/docker%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C.html"/>
      <url>/docker%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><p>容器是docker的另一个核心概念。简单来说，容器是镜像的一个运行实例。不同的是，镜像是静态的只读文件，而容器有运行时需要的可写文件层。同时，容器的应用进程处于运行状态。</p><p>从现在开始忘掉臃肿的虚拟机吧，对容器的操作就行直接操作应用一样简单、快速。</p><p>容器的生命周期就是：创建–启动–停止–删除。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create--start--stop--rm</span><br></pre></td></tr></table></figure><p>命令通过docker命令就可以查看帮助。命令多，但是用得少。好多都是基本不使用的命令。但是，我可以不用，你不能没有。</p><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>我们平时很少手动先创建<code>create</code>好一个容器，创建好之后，容器是处于停止状态的。需要再手动启动<code>start</code>这个容器。这样很麻烦。</p><p>docker有个<code>run</code>命令直接运行。因为直接运行它会先自己创建，再自己启动。所以我这里不写。后面看<code>run</code>命令就行了。</p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>对于通过<code>stop</code>命令停止的容器和<code>create</code>好的容器，可以通过<code>start</code>命令启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker start --help</span><br><span class="line"></span><br><span class="line">Usage:docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Start one or more stopped containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --attach               Attach STDOUT&#x2F;STDERR and forward signals</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a container</span><br><span class="line">  -i, --interactive          Attach container&#39;s STDIN</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>我们常用<code>run</code>命令代替<code>create</code>和<code>start</code>。它可以跟好多参数。这些参数在<code>create</code>也一样可以用。</p><ul><li><p><code>--add-host list</code>：在容器内添加一个主机名到ip地址的映射关系，通过<code>/etc/hosts</code></p></li><li><p><code>-d, --detach</code>：是否在后台运行容器，默认为否</p></li><li><p><code>--dns list</code>：设置dns服务器</p></li><li><p><code>--dns-search list</code>：设置dns搜索域</p></li><li><p><code>-e, --env list</code>：指定容器内的环境变量</p></li><li><p><code>--env-file</code>：从宿主机文件中读取环境变量到容器内</p></li><li><p><code>--entrypoint string</code>：如果镜像存在入口命令时，覆盖为新的命令</p></li><li><p><code>--expose list</code>：指定容器会暴露出来的端口或端口范围</p></li><li><p><code>-h</code>：指定容器内的主机名</p></li><li><p><code>-i, --interactive</code>：保持标准输入打开，默认为false</p></li><li><p><code>-t</code>：是否分配一个为终端。默认false，通常<code>-it</code>连用</p></li><li><p><code>--link list</code>：连接到其他容器，比如：<code>--link kibana=kibana-host</code>，<code>kibana</code>可以是容器名也可以是容器名称。之后，本容器就可以通过<code>kibana-host</code>来访问<code>kibana</code>容器了。=</p></li><li><p><code>--name</code>：为容器指定一个别名。可以通过别名和容器id操作容器</p></li><li><p><code>--network string</code>：指定容器网络模式，包括bridge、none、其他容器内网络、host的网络、某个现有网络。默认default</p></li><li><p><code>--p, --publish list</code>：指定如何映射到宿主机端口，如：<code>-p 8000:80</code>。把容器的80端口映射到主机的8000端口</p></li><li><p><code>--restart string</code>：指定容器的重启策略。包括<code>no、on-faile、always、unless-stopped</code>等</p></li><li><p><code>--rm</code>：容器退出后自动删除，不能跟<code>-d</code>同时使用，因为<code>-d</code>代表是后台运行</p></li><li><p><code>-v, --volume</code>：挂载主机上的文件到容器内</p></li><li><p><code>-w, --workdir</code>：容器内的默认工作目录</p></li><li><p><code>--privileged</code>：是否给执行命令以最高权限，默认为false</p></li><li><p><code>-u，--user</code>：指定用户身份执行容器内的命令。也就是指定什么用户登录容器</p></li></ul><p>省略的还有一些和cpu、内存、权限、安全相关的参数。实际我们也不会使用这些命令来控制容器。会有编排工具，比如小的有<code>docker-compose</code>、<code>docker swarm</code>，大的有<code>k8s</code>。但是你还是要懂。。。即使是有管理工具，yaml文件里的各种参数用的参数和指令也都离不开上面这些。</p><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><p>容器即一个进程，linux查看进程的命令是<code>ps</code>，docker也有个类似的命令：</p><h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS                          PORTS                                            NAMES</span><br><span class="line">d2e9a26de0b3        topsec-beat:latest       <span class="string">"/usr/share/filebeat…"</span>   <span class="number">27</span> hours ago        Up <span class="number">4</span> hours                                                                       topsec-beat</span><br><span class="line"><span class="number">861845</span>f000a6        topsec-kibana:latest     <span class="string">"/usr/local/bin/kiba…"</span>   <span class="number">27</span> hours ago        Up <span class="number">4</span> hours                      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5601</span>-&gt;<span class="number">5601</span>/tcp                           topsec-kibana</span><br><span class="line"><span class="number">03</span>f640fd23d5        topsec-elastic:latest    <span class="string">"/usr/local/bin/dock…"</span>   <span class="number">27</span> hours ago        Up <span class="number">4</span> hours                      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9200</span>-&gt;<span class="number">9200</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9300</span>-&gt;<span class="number">9300</span>/tcp   topsec-elastic</span><br><span class="line"><span class="number">64459</span>acc2f0b        topsec-ips:latest        <span class="string">"/root/start.sh"</span>         <span class="number">27</span> hours ago        Up <span class="number">4</span> hours                                                                       topsec-ips</span><br><span class="line">a33b55f3af4a        topsec-registry:latest   <span class="string">"/entrypoint.sh /etc…"</span>   <span class="number">27</span> hours ago        Restarting (<span class="number">1</span>) <span class="number">39</span> seconds ago                                                    topsec-registry</span><br></pre></td></tr></table></figure><h3 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line"><span class="number">13035</span>c87a226        psql:v2             <span class="string">"docker-entrypoint.s…"</span>   <span class="number">24</span> hours ago        Up <span class="number">24</span> hours         <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5432</span>-&gt;<span class="number">5432</span>/tcp   anchore_anchore-db_1</span><br></pre></td></tr></table></figure><h3 id="查看容器详情"><a href="#查看容器详情" class="headerlink" title="查看容器详情"></a>查看容器详情</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker container inspect --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker container inspect [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Display detailed information on one or more containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line">  -s, --size            Display total file sizes</span><br></pre></td></tr></table></figure><h3 id="查看容器内进程"><a href="#查看容器内进程" class="headerlink" title="查看容器内进程"></a>查看容器内进程</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker container top --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker container top CONTAINER [ps OPTIONS]</span><br><span class="line"></span><br><span class="line">Display the running processes of a container</span><br></pre></td></tr></table></figure><h3 id="查看所有容器的运行状态"><a href="#查看所有容器的运行状态" class="headerlink" title="查看所有容器的运行状态"></a>查看所有容器的运行状态</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker stats --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker stats [OPTIONS] [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Display a live stream of container(s) resource usage statistics</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-stream       Disable streaming stats and only pull the first result</span><br><span class="line">      --no-trunc        Do not truncate output</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker stats</span></span><br><span class="line">CONTAINER ID        NAME                   CPU %               MEM USAGE / LIMIT    MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line"><span class="number">13035</span>c87a226        anchore_anchore-db_1   <span class="number">2.48</span>%               <span class="number">36.79</span>MiB / <span class="number">5.81</span>GiB   <span class="number">0.62</span>%               <span class="number">3.27</span>GB / <span class="number">2.58</span>GB     <span class="number">242</span>MB / <span class="number">4.38</span>GB      <span class="number">26</span></span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>对于正在运行的容器，可以使用命令进入到容器里面，常用的是<code>exec</code>命令。另一个<code>attch</code>很少用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker exec --help</span><br><span class="line"></span><br><span class="line">Usage:docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Run a command in a running container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d, --detach               Detached mode: run command in the background</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a container</span><br><span class="line">  -e, --env list             Set environment variables</span><br><span class="line">  -i, --interactive          Keep STDIN open even if not attached</span><br><span class="line">      --privileged           Give extended privileges to the command</span><br><span class="line">  -t, --tty                  Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>：在容器中后台执行命令</li><li><code>-e</code>：指定环境变量列表</li><li><code>-i，--interactive=true|false</code>：打开标准输入接受用户输入命令，默认为false</li><li><code>-t</code>：分配伪终端，通常与<code>-i</code>结合使用，<code>-it</code></li><li><code>--privileged</code>：是否给执行命令以最高权限，默认为false</li><li><code>-u，--user</code>：指定用户身份执行容器内的命令。也就是指定什么用户登录容器</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line"><span class="number">13035</span>c87a226        psql:v2             <span class="string">"docker-entrypoint.s…"</span>   <span class="number">25</span> hours ago        Up <span class="number">25</span> hours         <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5432</span>-&gt;<span class="number">5432</span>/tcp   anchore_anchore-db_1</span><br><span class="line">root@jw-ubuntu01:~<span class="comment"># docker exec -it -u postgres -e  a=1  -e b=2  1303   bash</span></span><br><span class="line">bash-<span class="number">5.0</span>$ echo $&#123;a&#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line">bash-<span class="number">5.0</span>$ whoami</span><br><span class="line">postgres</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><h3 id="暂停容器"><a href="#暂停容器" class="headerlink" title="暂停容器"></a>暂停容器</h3><p>暂停一个或多个容器中的所有进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker pause --help</span><br><span class="line"></span><br><span class="line">Usage:docker pause CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Pause all processes within one or more containers</span><br></pre></td></tr></table></figure><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker stop --help</span><br><span class="line"></span><br><span class="line">Usage:docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Stop one or more running containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --time int   Seconds to wait for stop before killing it (default 10)</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker rm --help</span><br><span class="line"></span><br><span class="line">Usage:docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Remove one or more containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --force     Force the removal of a running container (uses SIGKILL)</span><br><span class="line">  -l, --link      Remove the specified link</span><br><span class="line">  -v, --volumes   Remove the volumes associated with the container</span><br></pre></td></tr></table></figure><p>对于多个处于停止状态的容器，可以使用<code>docker container prune -f</code>来自动清除所有。</p><h2 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>导出容器是指。导出一个已经创建好的容器到一个文件，不管这个容器此时是否处于运行状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker export --help</span><br><span class="line"></span><br><span class="line">Usage:docker export [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Export a container&#39;s filesystem as a tar archive</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>使用该命令导入变成镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker import --help</span><br><span class="line"></span><br><span class="line">Usage:docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">Import the contents from a tarball to create a filesystem image</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -c, --change list      Apply Dockerfile instruction to the created image</span><br><span class="line">  -m, --message string   Set commit message for imported image</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>docker load</code>：将保存完整记录，体积更大。</li><li><code>docker import</code>：丢弃所有的历史记录和元数据信息。仅保留容器当时的快照状态，导入时还可以指定标签等元数据信息。</li></ul><p>反正我很少用到<code>import</code>，大多数都是直接<code>load</code>。</p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="容器与宿主机的文件复制"><a href="#容器与宿主机的文件复制" class="headerlink" title="容器与宿主机的文件复制"></a>容器与宿主机的文件复制</h3><p>在工作中，经常进入到一个容器里面操作和测试。但是里面文件操作必定有局限性，这时候可以用命令复制文件进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~# docker cp --help</span><br><span class="line"></span><br><span class="line">Usage:docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">    docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"></span><br><span class="line">Copy files&#x2F;folders between a container and the local filesystem</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --archive       Archive mode (copy all uid&#x2F;gid information)</span><br><span class="line">  -L, --follow-link   Always follow symbol link in SRC_PATH</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker exec -it 1303 ls /</span></span><br><span class="line">bin                         proc</span><br><span class="line">dev                         root</span><br><span class="line">docker-<span class="keyword">entrypoint</span><span class="bash">-initdb.d  run</span></span><br><span class="line">docker-<span class="keyword">entrypoint</span>.<span class="bash">sh        sbin</span></span><br><span class="line">etc                         srv</span><br><span class="line">home                        sys</span><br><span class="line">lib                         tmp</span><br><span class="line">media                       usr</span><br><span class="line">mnt                         var</span><br><span class="line">opt</span><br><span class="line">root@jw-ubuntu01:~<span class="comment"># docker cp ./test.py 1303:/</span></span><br><span class="line">root@jw-ubuntu01:~<span class="comment"># docker exec -it 1303 ls /</span></span><br><span class="line">bin                         proc</span><br><span class="line">dev                         root</span><br><span class="line">docker-<span class="keyword">entrypoint</span><span class="bash">-initdb.d  run</span></span><br><span class="line">docker-<span class="keyword">entrypoint</span>.<span class="bash">sh        sbin</span></span><br><span class="line">etc                         srv</span><br><span class="line">home                        sys</span><br><span class="line">lib                         test.py</span><br><span class="line">media                       tmp</span><br><span class="line">mnt                         usr</span><br><span class="line">opt                         var</span><br></pre></td></tr></table></figure><h3 id="查看变更"><a href="#查看变更" class="headerlink" title="查看变更"></a>查看变更</h3><p>查看容器内的数据修改</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker diff --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker diff CONTAINER</span><br><span class="line"></span><br><span class="line">Inspect changes to files or directories on a container<span class="string">'s filesystem</span></span><br></pre></td></tr></table></figure><h3 id="查看端口映射"><a href="#查看端口映射" class="headerlink" title="查看端口映射"></a>查看端口映射</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker port --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker port CONTAINER [PRIVATE_PORT[/PROTO]]</span><br><span class="line"></span><br><span class="line">List port mappings or a specific mapping for the container</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker port anchore_anchore-db_1 </span></span><br><span class="line"><span class="number">5432</span>/tcp -&gt; <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5432</span></span><br></pre></td></tr></table></figure><h3 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h3><p>更新容器运行时的一些配置，主要是限制一些资源份额。比如说：cpu调度、内存分配、重启策略等。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~<span class="comment"># docker update --help</span></span><br><span class="line"></span><br><span class="line">Usage:docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Update configuration of one or more containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --blkio-weight uint16        Block IO (relative weight), between <span class="number">10</span> and <span class="number">1000</span>, or <span class="number">0</span> to disable (default <span class="number">0</span>)</span><br><span class="line">      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class="line">      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class="line">      --cpu-rt-period int          Limit the CPU real-time period in microseconds</span><br><span class="line">      --cpu-rt-runtime int         Limit the CPU real-time runtime in microseconds</span><br><span class="line">  -c, --cpu-shares int             CPU shares (relative weight)</span><br><span class="line">      --cpus decimal               Number of CPUs</span><br><span class="line">      --cpuset-cpus string         CPUs in which to allow execution (<span class="number">0</span>-<span class="number">3</span>, <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">      --cpuset-mems string         MEMs in which to allow execution (<span class="number">0</span>-<span class="number">3</span>, <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">      --kernel-memory bytes        Kernel memory limit</span><br><span class="line">  -m, --memory bytes               Memory limit</span><br><span class="line">      --memory-reservation bytes   Memory soft limit</span><br><span class="line">      --memory-swap bytes          Swap limit equal to memory plus swap: <span class="string">'-1'</span> to enable unlimited swap</span><br><span class="line">      --restart string             Restart policy to apply when a container exits</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言标准库之flag</title>
      <link href="/go-flag.html"/>
      <url>/go-flag.html</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言标准库flag"><a href="#Go语言标准库flag" class="headerlink" title="Go语言标准库flag"></a>Go语言标准库flag</h2><h3 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h3><p>简单的获取命令行参数，可以通过<code>os.Args</code>获取。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// os.args 是一个字符串切片类型</span></span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, os.Args)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历每个命令行参数</span></span><br><span class="line">    <span class="keyword">for</span> index, arg := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"第%d个 参数值：%v\n"</span>, index, arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run args.go arg1 arg2 arg3</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[C:\Users\JIANGZ~1\AppData\Local\Temp\go-build073370358\b001\exe\args.exe arg1 arg2 arg3]</span><br><span class="line">第0个 参数值：C:\Users\JIANGZ~1\AppData\Local\Temp\go-build073370358\b001\exe\args.exe</span><br><span class="line">第1个 参数值：arg1</span><br><span class="line">第2个 参数值：arg2</span><br><span class="line">第3个 参数值：arg3</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"flag"</span></span><br></pre></td></tr></table></figure><h4 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h4><p>支持的命令行参数有<code>bool</code>、<code>int</code>、<code>int64</code>、<code>uint</code>、<code>uint64</code>、<code>float</code>、<code>float64</code>、<code>string</code>等</p><h4 id="定义命令行参数"><a href="#定义命令行参数" class="headerlink" title="定义命令行参数"></a>定义命令行参数</h4><h5 id="flag-Type"><a href="#flag-Type" class="headerlink" title="flag.Type()"></a>flag.Type()</h5><p>格式：<code>flag.Type(flag名, 默认值, 帮助信息)</code></p><p>比如说我们要定义姓名、年龄、婚否三个命令行参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := flag.String(<span class="string">"name"</span>, <span class="string">"江子牙"</span>, <span class="string">"姓名"</span>)</span><br><span class="line">    age := flag.Int(<span class="string">"age"</span>, <span class="number">23</span>, <span class="string">"年龄"</span>)</span><br><span class="line">    isLogin := flag.Bool(<span class="string">"isLogin"</span>, <span class="literal">true</span>, <span class="string">"是都登录"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时三个变量都是对应类型的指针, 可以用*取值</span></span><br><span class="line">    fmt.Printf(<span class="string">"%p %v \n"</span>, name, *name)</span><br><span class="line">    fmt.Printf(<span class="string">"%p %v \n"</span>, age, *age)</span><br><span class="line">    fmt.Printf(<span class="string">"%p %v \n"</span>, isLogin, *isLogin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行和输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;go run flag_type1.go</span><br><span class="line">0xc000046200 江子牙</span><br><span class="line">0xc00005a058 23</span><br><span class="line">0xc00005a070 true</span><br></pre></td></tr></table></figure><h5 id="flag-TypeVar"><a href="#flag-TypeVar" class="headerlink" title="flag.TypeVar()"></a>flag.TypeVar()</h5><p>格式：<code>flag.TypeVar(Type指针, flag名, 默认值, 帮助信息)</code></p><p>比如说我们要定义姓名、年龄、婚否三个命令行参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        name    <span class="keyword">string</span></span><br><span class="line">        age     <span class="keyword">int</span></span><br><span class="line">        isLogin <span class="keyword">bool</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    flag.StringVar(&amp;name, <span class="string">"name"</span>, <span class="string">"江子牙"</span>, <span class="string">"姓名"</span>)</span><br><span class="line">    flag.IntVar(&amp;age, <span class="string">"age"</span>, <span class="number">23</span>, <span class="string">"年龄"</span>)</span><br><span class="line">    flag.BoolVar(&amp;isLogin, <span class="string">"isLogin"</span>, <span class="literal">false</span>, <span class="string">"是否登录"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时三个变量均有有默认值</span></span><br><span class="line">    fmt.Printf(<span class="string">"%#v\n"</span>, name)</span><br><span class="line">    fmt.Printf(<span class="string">"%#v\n"</span>, age)</span><br><span class="line">    fmt.Printf(<span class="string">"%#v\n"</span>, isLogin)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行和输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">go</span> run flag_type2.<span class="keyword">go</span></span><br><span class="line"><span class="string">"江子牙"</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="解析命令行参数"><a href="#解析命令行参数" class="headerlink" title="解析命令行参数"></a>解析命令行参数</h4><p>通过两种方法定义好命令行flag参数后，需要通过flag.Parse()来对命令进行参数解析。  </p><p>支持的格式有以下几种：</p><ul><li><code>-flag xxx</code>：使用空格，1个符号</li><li><code>--flag xxx</code>：使用空格，2个符号</li><li><code>-flag=xxx</code>：使用等号，一个符号</li><li><code>--flag=xxx</code>：使用等号，一个符号</li></ul><p>其中布尔类型的必须使用等号的方式指定。</p><p>另外还有一些其他方法：</p><ul><li><code>flag.NFlag()</code>：返回命令行参数个数</li><li><code>flag.Args()</code>：返回命令行参数之后的其他参数</li><li><code>flag.NArg()</code>：返回命令行参数之后的其他参数个数</li></ul><p>完整示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义命令行参数</span></span><br><span class="line">    name := flag.String(<span class="string">"name"</span>, <span class="string">"江子牙"</span>, <span class="string">"姓名"</span>)</span><br><span class="line">    age := flag.Int(<span class="string">"age"</span>, <span class="number">23</span>, <span class="string">"年龄"</span>)</span><br><span class="line">    isLogin := flag.Bool(<span class="string">"isLogin"</span>, <span class="literal">true</span>, <span class="string">"是都登录"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析命令行参数</span></span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    fmt.Println(*name, *age, *isLogin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回命令行参数个数</span></span><br><span class="line">    fmt.Println(flag.NFlag())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回命令行参数之后的其他参数</span></span><br><span class="line">    fmt.Println(flag.Args())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回命令行参数之后的其他参数个数</span></span><br><span class="line">    fmt.Println(flag.NArg())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行和输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run  flag_parse.go --name&#x3D;&quot;江子牙&quot; --age 21 -isLogin&#x3D;false hehe haha</span><br><span class="line">江子牙 21 false</span><br><span class="line">3</span><br><span class="line">[hehe haha]</span><br><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python函数基础</title>
      <link href="/python-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html"/>
      <url>/python-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><p>函数就是功能的封装，将一组语句通过一个函数名封装起来。要想执行这个函数，调用其函数名即可。</p><p>函数的特性：</p><ul><li>减少重复代码</li><li>可扩展性强</li><li>代码易维护  </li></ul><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>python使用关键字<code>def</code>定义一个函数，后面跟函数名。要想调用这个函数，<code>函数名+()</code>就可以完成调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'函数的定义'</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用函数    </span></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h4><p>形式上定义的参数，只有在函数调用的时候才分配内存单元，只在函数内部有效。函数调用结束则形参失效。</p><h4 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h4><p>实际传入的参数，可以是常量、变量、表达式、函数等、无论是何种类型的值，在进行函数调用的时候必须要有确定的值，实参是要传给形参。</p><p>比如说：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算两个数的和的函数</span></span><br><span class="line"><span class="string">    :param x:形参 x</span></span><br><span class="line"><span class="string">    :param y:形参 y</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = x + y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(calc(<span class="number">10</span>, <span class="number">10</span>))  <span class="comment"># 传入两个实参，调用函数获取计算结果</span></span><br></pre></td></tr></table></figure><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>根据形参，传入的参数一一对应，按照顺序传入，叫做位置参数。  </p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>先写一个打印学生信息的函数，传入的参数为姓名、年龄、性别、班级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">students</span><span class="params">(name, age, sex, classes)</span>:</span></span><br><span class="line">    print(<span class="string">'学生姓名：&#123;0&#125;；年龄：&#123;1&#125;；性别：&#123;2&#125;；班级：&#123;3&#125;'</span>.format(name, age, sex, classes))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">students(<span class="string">'江子牙'</span>, <span class="number">21</span>, <span class="string">'男'</span>, <span class="string">'Python1期'</span>)</span><br><span class="line">students(<span class="string">'江xx'</span>, <span class="number">19</span>, <span class="string">'女'</span>, <span class="string">'Python1期'</span>)</span><br><span class="line">students(<span class="string">'江yy'</span>, <span class="number">15</span>, <span class="string">'不男不女'</span>, <span class="string">'Python1期'</span>)</span><br><span class="line">students(<span class="string">'子 牙'</span>, <span class="number">25</span>, <span class="string">'男'</span>, <span class="string">'Python1期'</span>)</span><br></pre></td></tr></table></figure><p>可以看出我们写了重复代码(参数Python1期)，python语言有个默认参数可以解决此问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">students</span><span class="params">(name, age, sex, classes=<span class="string">'Python1期'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'学生姓名：&#123;0&#125;；年龄：&#123;1&#125;；性别：&#123;2&#125;；班级：&#123;3&#125;'</span>.format(name, age, sex, classes))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">students(<span class="string">'江子牙'</span>, <span class="number">21</span>, <span class="string">'男'</span>, )</span><br><span class="line">students(<span class="string">'江xx'</span>, <span class="number">19</span>, <span class="string">'女'</span>, )</span><br><span class="line">students(<span class="string">'江yy'</span>, <span class="number">15</span>, <span class="string">'不男不女'</span>, )</span><br><span class="line">students(<span class="string">'子 牙'</span>, <span class="number">25</span>, <span class="string">'男'</span>, <span class="string">'Python2期'</span>)</span><br></pre></td></tr></table></figure><p>  没有传值则是默认的值，传入了值的就会是这个值。  </p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>正常情况下，传参数要一一对应，形参也一一对应值。但是如果不想按顺序，就可以是关键字参数。但是，关键字必须放在位置参数后面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu_info</span><span class="params">(name,age,course=<span class="string">'高三一班'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'-----学生信息-----'</span>)</span><br><span class="line">    print(<span class="string">'姓名：'</span>,name)</span><br><span class="line">    print(<span class="string">'年龄：'</span>,age)</span><br><span class="line">    print(<span class="string">'课程：'</span>,course)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 传入的参数可以先传age，不一定要根据形参的顺序。这就是关键字参数传参。</span></span><br><span class="line">stu_info(age=<span class="number">199</span>,course=<span class="string">'大学啦'</span>,name=<span class="string">'小天文'</span>)</span><br><span class="line">stu_info(age=<span class="number">20</span>,name=<span class="string">'文帅'</span>)</span><br></pre></td></tr></table></figure><h4 id="非固定参数"><a href="#非固定参数" class="headerlink" title="非固定参数"></a>非固定参数</h4><p>当传入的参数个数不确定的情况下，就可以使用非固定参数，也叫做不定长参数。</p><h5 id="args"><a href="#args" class="headerlink" title="args"></a>args</h5><p><code>*args</code> 实际上是接收的一个元祖，打包所有不固定参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def send(msg, *args):</span><br><span class="line">    print(&#39;固定参数&#39;, msg)</span><br><span class="line">    print(&#39;所有非固定参数&#39;, args)</span><br><span class="line">    for i in args:</span><br><span class="line">        print(&#39;我是非固定参数&#39;, i)</span><br><span class="line">    print(&#39;------------------&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">send(&#39;别浪了……&#39;, &#39;a&#39;)</span><br><span class="line">send(&#39;别浪了……&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span><br><span class="line">send(&#39;别浪了……&#39;, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">固定参数 别浪了……</span><br><span class="line">所有非固定参数 (&#39;a&#39;,)</span><br><span class="line">我是非固定参数 a</span><br><span class="line">------------------</span><br><span class="line">固定参数 别浪了……</span><br><span class="line">所有非固定参数 (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span><br><span class="line">我是非固定参数 a</span><br><span class="line">我是非固定参数 b</span><br><span class="line">我是非固定参数 c</span><br><span class="line">------------------</span><br><span class="line">固定参数 别浪了……</span><br><span class="line">所有非固定参数 ([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;],)</span><br><span class="line">我是非固定参数 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">------------------</span><br></pre></td></tr></table></figure><p>可以发现，当我们传入一个列表的时候，会把它当作一个整体接收。如果我们只是想把列表的元素一个个作为参数传入，而不是一个整体的时候，可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(msg, *args)</span>:</span></span><br><span class="line">    print(<span class="string">'固定参数'</span>, msg)</span><br><span class="line">    print(<span class="string">'所有非固定参数'</span>, args)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        print(<span class="string">'我是非固定参数'</span>, i)</span><br><span class="line">    print(<span class="string">'------------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">send(<span class="string">'分开传吧...'</span>, *[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">固定参数 分开传吧...</span><br><span class="line">所有非固定参数 (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)</span><br><span class="line">我是非固定参数 a</span><br><span class="line">我是非固定参数 b</span><br><span class="line">我是非固定参数 c</span><br><span class="line">我是非固定参数 d</span><br><span class="line">------------------</span><br></pre></td></tr></table></figure><h5 id="kwargs"><a href="#kwargs" class="headerlink" title="kwargs"></a>kwargs</h5><p>当我们传入的参数不固定，又想通过关键字参数的方式传入的时候，python语言有个<code>**kwargs</code>可以接收。</p><p><code>**kwargs</code>接收的实际上一个字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(name, age, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'固定参数：'</span>, name, age)</span><br><span class="line">    print(<span class="string">'所有不固定参数：'</span>, kwargs)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(k, v)</span><br><span class="line">    print(<span class="string">'------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info(<span class="string">'111'</span>, <span class="number">222</span>, sex=<span class="string">'男'</span>, money=<span class="number">9.9</span>)</span><br><span class="line"><span class="comment"># 同样，想通过一个整体传入多个关键字参数时，可以构造成一个字典，前面加**</span></span><br><span class="line">info(<span class="string">'111'</span>, <span class="number">222</span>, **&#123;<span class="string">'sex'</span>: <span class="string">'变态'</span>, <span class="string">'money'</span>: <span class="number">100</span>, <span class="string">'mobile'</span>: <span class="number">13006293101</span>&#125;)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">固定参数： 111 222</span><br><span class="line">所有不固定参数： &#123;&#39;sex&#39;: &#39;男&#39;, &#39;money&#39;: 9.9&#125;</span><br><span class="line">sex 男</span><br><span class="line">money 9.9</span><br><span class="line">------------------------------</span><br><span class="line">固定参数： 111 222</span><br><span class="line">所有不固定参数： &#123;&#39;sex&#39;: &#39;变态&#39;, &#39;money&#39;: 100, &#39;mobile&#39;: 13006293101&#125;</span><br><span class="line">sex 变态</span><br><span class="line">money 100</span><br><span class="line">mobile 13006293101</span><br><span class="line">------------------------------</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p><code>args、kwargs</code>只是名称，不一定要以它为名，约定成俗而已。</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(name, age, **k)</span>:</span></span><br><span class="line">    print(<span class="string">'固定参数：'</span>, name, age)</span><br><span class="line">    print(<span class="string">'所有不固定参数：'</span>, k)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> k.items():</span><br><span class="line">        print(k, v)</span><br><span class="line">    print(<span class="string">'------------------------------'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">info(<span class="string">'111'</span>, <span class="number">222</span>, sex=<span class="string">'男'</span>, money=<span class="number">9.9</span>)</span><br><span class="line">info(<span class="string">'111'</span>, <span class="number">222</span>, **&#123;<span class="string">'sex'</span>: <span class="string">'变态'</span>, <span class="string">'money'</span>: <span class="number">100</span>, <span class="string">'mobile'</span>: <span class="number">13006293101</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>python语言中，用<code>return</code>关键字表示函数返回。它具有以下含义：</p><ul><li>函数外部的代码想要获取函数内部执行的结果，就用<code>return</code>把结果返回。</li><li>代表函数的执行结束，并返回结果，如果函数没有指定<code>return</code>，返回值默认为None<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算两个数的和的函数</span></span><br><span class="line"><span class="string">    :param x:形参 x</span></span><br><span class="line"><span class="string">    :param y:形参 y</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = x + y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'函数执行的结果：'</span>,calc(<span class="number">10</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="全局和局部变量"><a href="#全局和局部变量" class="headerlink" title="全局和局部变量"></a>全局和局部变量</h3><ul><li>在函数内部定义的变量成为局部变量，在程序一开始定义的变量称为全局变量。</li><li>全局变量的作用域是整个程序，局部变量的作用域是定义该变量的函数。</li><li>当全局变量和局部变量重名时，在函数内，局部变量优先。在其余地方，全局变量优先。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Black girl'</span>     <span class="comment"># 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'黑色姑娘'</span>    <span class="comment"># 局部变量，定义在函数里面的变量，函数一旦执行完毕，则释放局部变量，如果里面没有定义，则使用外面的，</span></span><br><span class="line">    print(name)         <span class="comment"># 黑色姑娘---&gt;如果加global，就可以使用全局变量</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">change_name()</span><br><span class="line">print(name)             <span class="comment"># Black girl 修改局部变量并不影响全局变量的值，作用域不一样。</span></span><br></pre></td></tr></table></figure>执行结果：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">黑色姑娘</span><br><span class="line">Black girl</span><br></pre></td></tr></table></figure><p>定义了一个<code>change_name</code>的函数。接着调用了这个函数，因为这个函数内部定义了一个局部变量<code>黑色姑娘</code>。函数体内执行<code>print</code>的时候，是<code>黑色姑娘</code>。函数调用完成之后，程序又执行力一个<code>print</code>。这个时候。外面的<code>Black girl</code>是全局变量，并不会收到函数内部定义的同一个变量名<code>name</code>的影响，所以打印的是<code>Black girl</code>。</p><p>再看一个函数里嵌套函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量18</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    局部变量<span class="number">73</span></span><br><span class="line">    age = <span class="number">73</span></span><br><span class="line">    print(<span class="string">'alex'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'egon'</span>)</span><br><span class="line">        print(age)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用func1，返回来一个func</span></span><br><span class="line">res = func1()</span><br><span class="line"><span class="comment"># 所以可以通过返回值加()调用</span></span><br><span class="line">res()</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alex</span><br><span class="line">egon</span><br><span class="line">73</span><br><span class="line">18</span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><h4 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h4><p>在函数内部再定义一个函数就是嵌套函数。</p><p>当外部函数调用内部函数的时候，内部函数会拥有外部函数的作用域与参数。形成了闭包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(age)</span><br><span class="line"></span><br><span class="line">    age = <span class="number">73</span></span><br><span class="line">    <span class="comment"># 调用内部函数</span></span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>特点：</p><ul><li>没有函数名，也没有代码块。</li><li>一行代码，没有名字，用关键字<code>lambda</code>声明</li><li>主要用于和一些函数搭配使用：内置的<code>map()</code>、<code>filter()</code>、<code>reduce()</code>、…</li><li>节省代码量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = map(<span class="keyword">lambda</span> x,y:x+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure></li></ul><h4 id="高阶函数-满足其一就是高阶函数"><a href="#高阶函数-满足其一就是高阶函数" class="headerlink" title="高阶函数(满足其一就是高阶函数)"></a>高阶函数(满足其一就是高阶函数)</h4><ul><li>函数可以接收一个函数作为参数传入</li><li>函数的返回值是一个函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python---函数编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的基本类型</title>
      <link href="/go-data-type.html"/>
      <url>/go-data-type.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在go语言中，字符串用<code>&quot;&quot;</code>表示。内部使用<code>UTF-8</code>编码。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义两个类型为字符串变量</span></span><br><span class="line">    s1 := <span class="string">"江子牙"</span></span><br><span class="line">    s2 := <span class="string">"hello"</span></span><br><span class="line">    <span class="comment">// 江子牙 hello</span></span><br><span class="line">    fmt.Println(s1, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转义符"><a href="#字符串转义符" class="headerlink" title="字符串转义符"></a>字符串转义符</h3><p>转义就是不是原来所的表示的字符串了。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 本来两个字符串代表一个字符串，如果不做转义处理的话，会报错</span></span><br><span class="line">    s1 := <span class="string">"what's are you doing? \"呵呵\"\n"</span></span><br><span class="line">    <span class="comment">// 制表符</span></span><br><span class="line">    s2 := <span class="string">"江\t子\t牙\t"</span></span><br><span class="line">    fmt.Println(s1, s2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果：</span></span><br><span class="line"><span class="comment">what's are you doing? "呵呵"</span></span><br><span class="line"><span class="comment"> 江子牙</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见的转义字符如下表：</p><table><thead><tr><th align="center">转义符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>\r</code></td><td align="center">回车</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜杠</td></tr></tbody></table><h3 id="防止转义"><a href="#防止转义" class="headerlink" title="防止转义"></a>防止转义</h3><p>为什么要防止转义？举个例子(打印win平台的文件路径)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 因为转义符的存在，原来的字符串被转义了</span></span><br><span class="line">    path := <span class="string">"D:\\code\\codingjzy.github.io\t1\n1"</span></span><br><span class="line">    fmt.Println(<span class="string">"被转义："</span>, path)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止转义，在被转义的字符串前面加\</span></span><br><span class="line">    path1 := <span class="string">"D:\\code\\codingjzy.github.io\\t1\\n1"</span></span><br><span class="line">    fmt.Println(<span class="string">"未转义："</span>, path1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">被转义： D:\code\codingjzy.github.io1</span><br><span class="line">1</span><br><span class="line">未转义： D:\code\codingjzy.github.io\t1\n1</span><br></pre></td></tr></table></figure><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>当有一段很长很长的字符串时，一行是不够的。用<code>反引号</code>可以解决。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="string">`第一行</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">第三行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">使用了反引号之后，反引号之间的换行将被视作换行</span></span><br><span class="line"><span class="string">同时，所有的转义字符均无效，文本会原样输出。</span></span><br><span class="line"><span class="string">\t    \n   </span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">    fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一行</span><br><span class="line">第二行</span><br><span class="line">第三行</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">    使用了反引号之后，反引号之间的换行将被视作换行</span><br><span class="line">    同时，所有的转义字符均无效，文本会原样输出。</span><br><span class="line">\t    \n</span><br></pre></td></tr></table></figure><h3 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h3><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">len(str)</td><td align="center">字符串的长度，准确说是示字符串的<code>ascii</code>字符个数的字节长度，而utf8.RuneCountInString()：表示<code>unicode</code>字符串长度</td></tr><tr><td align="center">+</td><td align="center">字符串的拼接</td></tr><tr><td align="center">strings.Split</td><td align="center">分割</td></tr><tr><td align="center">strings.contains</td><td align="center">判断是否包含</td></tr><tr><td align="center">strings.HasPrefix,strings.HasSuffix</td><td align="center">前缀/后缀判断</td></tr><tr><td align="center">strings.Index(),strings.LastIndex()</td><td align="center">子串出现的位置</td></tr><tr><td align="center">strings.Join(a[]string, sep string)</td><td align="center">join操作</td></tr></tbody></table><h3 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ascii通过for循环根据索引来获取</span></span><br><span class="line">    <span class="comment">// unicode通过range来获取</span></span><br><span class="line">    str3 := <span class="string">"hello 江子牙"</span></span><br><span class="line">    str4 := <span class="string">"你好：hello"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每个字符对应的是该ascii的值。len方法计算的是byte字节的长度。一个中文对应3-4个字节组成。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str3); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"ascii遍历：%c  %d\n"</span>, str3[i], str3[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> str4 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"unicode遍历：%c  %d\n"</span>, s, s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> str3 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%c\n"</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">ascii遍历：h  104</span><br><span class="line">ascii遍历：e  101</span><br><span class="line">ascii遍历：l  108</span><br><span class="line">ascii遍历：l  108</span><br><span class="line">ascii遍历：o  111</span><br><span class="line">ascii遍历：   32</span><br><span class="line">ascii遍历：æ  230</span><br><span class="line">ascii遍历：±  177</span><br><span class="line">ascii遍历：  159</span><br><span class="line">ascii遍历：å  229</span><br><span class="line">ascii遍历：­  173</span><br><span class="line">ascii遍历：  144</span><br><span class="line">ascii遍历：ç  231</span><br><span class="line">ascii遍历：  137</span><br><span class="line">ascii遍历：  153</span><br><span class="line">unicode遍历：你  20320</span><br><span class="line">unicode遍历：好  22909</span><br><span class="line">unicode遍历：：  65306</span><br><span class="line">unicode遍历：h  104</span><br><span class="line">unicode遍历：e  101</span><br><span class="line">unicode遍历：l  108</span><br><span class="line">unicode遍历：l  108</span><br><span class="line">unicode遍历：o  111</span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line"> </span><br><span class="line">江</span><br><span class="line">子</span><br><span class="line">牙</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>分类：</p><ul><li>按长度分：<code>int8  int16  int32 int64</code></li><li>按对应的无符号整型：<code>uint8  uint16  uint32  uint64</code></li></ul><p>其中：</p><ul><li><code>unit8</code> 就是<code>byte</code>型</li><li><code>int16</code> 就是c语言中的<code>short</code>型</li><li><code>int64</code> 就是c语言中的<code>long</code>型</li></ul><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>uint8</td><td>无符号 8位整型 (0 到 255)</td></tr><tr><td>uint16</td><td>无符号 16位整型 (0 到 65535)</td></tr><tr><td>uint32</td><td>无符号 32位整型 (0 到 4294967295)</td></tr><tr><td>uint64</td><td>无符号 64位整型 (0 到 18446744073709551615)</td></tr><tr><td>int8</td><td>有符号 8位整型 (-128 到 127)</td></tr><tr><td>int16</td><td>有符号 16位整型 (-32768 到 32767)</td></tr><tr><td>int32</td><td>有符号 32位整型 (-2147483648 到 2147483647)</td></tr><tr><td>int64</td><td>有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h3 id="特殊整型"><a href="#特殊整型" class="headerlink" title="特殊整型"></a>特殊整型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>uint</td><td>32位操作系统上就是<code>uint32</code>，64位操作系统上就是<code>uint64</code></td></tr><tr><td>int</td><td>32位操作系统上就是<code>int32</code>，64位操作系统上就是<code>int64</code></td></tr><tr><td>uintptr</td><td>无符号整型，用于存放一个指针</td></tr></tbody></table><p><strong>注意：</strong> </p><ul><li>在使用<code>int</code>和 <code>uint</code>类型时，不能假定它是32位或64位的整型，而是考虑<code>int</code>和<code>uint</code>可能在不同平台上的差异。</li><li>为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用<code>int</code>和 <code>uint</code>。</li></ul><h3 id="八进制和十六进制"><a href="#八进制和十六进制" class="headerlink" title="八进制和十六进制"></a>八进制和十六进制</h3><p>Go语言中无法直接定义二进制数，关于八进制和十六进制数的示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 十进制</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d \n"</span>, a) <span class="comment">// 10</span></span><br><span class="line">    fmt.Printf(<span class="string">"%b \n"</span>, a) <span class="comment">// 1010  占位符%b表示二进制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 八进制  以0开头</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">077</span></span><br><span class="line">    fmt.Printf(<span class="string">"%o \n"</span>, b) <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 十六进制  以0x开头</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="keyword">int</span> = <span class="number">0xff</span></span><br><span class="line">    fmt.Printf(<span class="string">"%x \n"</span>, c) <span class="comment">// ff</span></span><br><span class="line">    fmt.Printf(<span class="string">"%X \n"</span>, c) <span class="comment">// FF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>分类：</p><ul><li><code>float32</code></li><li><code>float64</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 浮点型</span></span><br><span class="line">    <span class="comment">// float32  float64</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%f\n"</span>, math.Pi)  <span class="comment">//3.141593</span></span><br><span class="line">    fmt.Printf(<span class="string">"%.2f\n"</span>, math.Pi)<span class="comment">//3.14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>%f</code>和<code>Printf</code>是格式化打印的一个形式，后面会有。<code>.2</code>是代表保留2位小数。</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>计算机的世界只有两个数字<code>0</code>、<code>1</code>。</p><p>任何编程语言中的布尔类型，也有两个固定不变的值。<code>true</code>、<code>false</code>。代表真和假。</p><p>注意：</p><ul><li>布尔类型变量的默认值为<code>false</code>。</li><li>Go 语言中不允许将整型强制转换为布尔型</li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ul><h2 id="byte和rune"><a href="#byte和rune" class="headerlink" title="byte和rune"></a>byte和rune</h2><p>组成每个字符串的元素叫做<code>字符</code>，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号<code>&#39;</code>包裹起来，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">byte</span> = <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">'你'</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d 类型为：%T\n"</span>, a, a)</span><br><span class="line">    fmt.Printf(<span class="string">"%d 类型为：%T\n"</span>, b, b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果：</span></span><br><span class="line"><span class="comment">97 类型为：uint8</span></span><br><span class="line"><span class="comment">20320 类型为：int32</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go语言中的字符有两种：</p><ul><li><code>uint8</code>：<code>byte</code>型，代表了<code>ASCII码</code>的一个字符。</li><li><code>rune</code>：<code>int32</code>型，代表一个 <code>UTF-8</code>一个字符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的变量</title>
      <link href="/go-variable.html"/>
      <url>/go-variable.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的变量"><a href="#go语言的变量" class="headerlink" title="go语言的变量"></a>go语言的变量</h1><p>变量和常量是任何一门编程语言中必不可少的部分，也是最基础的一部分。</p><h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和<code>_</code>(下划线）组成，并且只能以字母和<code>_</code>开头。 举几个例子：<code>abc</code>, <code>_</code>, <code>_123</code>, <code>a123</code>。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>关键字是指编程语言中预先定义好的具有特殊含义的标识符，每门编程语言有不同和相同。</p><p>关键字和保留字不建议用作为变量名。</p><p>go语言中有25个关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>        <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>         <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line"><span class="function"><span class="title">case</span>         <span class="title">defer</span>        <span class="title">go</span>           <span class="title">map</span>          <span class="title">struct</span></span></span><br><span class="line"><span class="function"><span class="title">chan</span>         <span class="title">else</span>         <span class="title">goto</span>         <span class="title">package</span>      <span class="title">switch</span></span></span><br><span class="line"><span class="function"><span class="title">const</span>        <span class="title">fallthrough</span>  <span class="title">if</span>           <span class="title">range</span>        <span class="title">type</span></span></span><br><span class="line"><span class="function"><span class="title">continue</span>     <span class="title">for</span>          <span class="title">import</span>       <span class="title">return</span>       <span class="title">var</span></span></span><br></pre></td></tr></table></figure><p>此外，还有37个保留字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Constants:    <span class="literal">true</span>  <span class="literal">false</span>  <span class="literal">iota</span>  <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    Types:    <span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span>  </span><br><span class="line">              <span class="keyword">uint</span>  <span class="keyword">uint8</span>  <span class="keyword">uint16</span>  <span class="keyword">uint32</span>  <span class="keyword">uint64</span>  <span class="keyword">uintptr</span></span><br><span class="line">              <span class="keyword">float32</span>  <span class="keyword">float64</span>  <span class="keyword">complex128</span>  <span class="keyword">complex64</span></span><br><span class="line">              <span class="keyword">bool</span>  <span class="keyword">byte</span>  <span class="keyword">rune</span>  <span class="keyword">string</span>  error</span><br><span class="line"></span><br><span class="line">Functions:   <span class="built_in">make</span>  <span class="built_in">len</span>  <span class="built_in">cap</span>  <span class="built_in">new</span>  <span class="built_in">append</span>  <span class="built_in">copy</span>  <span class="built_in">close</span>  <span class="built_in">delete</span></span><br><span class="line">             <span class="built_in">complex</span>  <span class="built_in">real</span>  <span class="built_in">imag</span></span><br><span class="line">             <span class="built_in">panic</span>  <span class="built_in">recover</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的来历"><a href="#变量的来历" class="headerlink" title="变量的来历"></a>变量的来历</h3><p>程序运行过程中，数据都是保存在内存中，我们想要在代码中用到哪个数据就需要去内存上找到这个变量，但是如果我们直接通过内存地址去操作变量的话，代码的可读性会非常差，出错率也很高。所以，我们可以用变量名，把这个数据的内存地址保存起来。以后直接通过变量就能找到内存上对应的数据了。</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="标准声明"><a href="#标准声明" class="headerlink" title="标准声明"></a>标准声明</h4><p>go语言和其他一些(Python、PHP、JavaScript)动态性语言不一样。声明变量的时候必须有变量的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure><p>go语言以<code>var</code>关键字开头，变量类型放后面。行尾不需要<code>;</code>。写习惯了<code>java</code>语言的可能会不习惯。</p><p>比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> isLogin <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><h4 id="批量声明"><a href="#批量声明" class="headerlink" title="批量声明"></a>批量声明</h4><p>每声明一个变量都需要一个<code>var</code>会很繁琐，所以还有一种批量声明的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="keyword">string</span>    <span class="comment">// 字符串</span></span><br><span class="line">    b <span class="keyword">int</span>       <span class="comment">// 数字</span></span><br><span class="line">    c <span class="keyword">float64</span>   <span class="comment">// 浮点数</span></span><br><span class="line">    d <span class="keyword">bool</span>      <span class="comment">// 布尔</span></span><br><span class="line">    e [<span class="number">3</span>]<span class="keyword">string</span> <span class="comment">// 数组</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a, b, c, d, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><p>变量在声明之后，会自动对其对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值。</p><p>例如：整数和浮点数的默认值为<code>0</code>，字符串的默认值为<code>空串</code>，布尔类型默认为<code>false</code>。切片、函数、指针默认为<code>nli</code>。</p><h4 id="标准式"><a href="#标准式" class="headerlink" title="标准式"></a>标准式</h4><p>当我们进行变量声明的同时，也可以对变量进行初始化。</p><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 变量类型 = 表达式</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username <span class="keyword">string</span> = <span class="string">"江子牙"</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> = <span class="number">23</span></span><br><span class="line"><span class="keyword">var</span> isLogin <span class="keyword">bool</span> = True</span><br></pre></td></tr></table></figure><h4 id="类型推倒式"><a href="#类型推倒式" class="headerlink" title="类型推倒式"></a>类型推倒式</h4><p>按照标准格式，左右两边有冗余，而编译器会根据等号左边的值来推导出变量的类型完成初始化，所以可以省略变量类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">"江子牙"</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span></span><br></pre></td></tr></table></figure><h4 id="批量式"><a href="#批量式" class="headerlink" title="批量式"></a>批量式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">    a &#x3D; 1</span><br><span class="line">    b &#x3D; 9.99</span><br><span class="line">    c &#x3D; &quot;江子牙&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var d, e &#x3D; 1, &quot;呵呵&quot;</span><br><span class="line">    fmt.Println(a, b, c, d, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="短变量式："><a href="#短变量式：" class="headerlink" title="短变量式："></a>短变量式：</h4><p>使用该方式必须在函数内部，所以<code>var</code>常用在声明全局变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量m</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用短变量方式声明局部变量n</span></span><br><span class="line">    n := <span class="number">10</span></span><br><span class="line">    fmt.Println(m, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p>可以通过<code>_</code>来使用匿名变量，匿名变量不会分配内存，也不会因为多次声明而无法使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用sum函数返回100给变量a</span></span><br><span class="line">    a, _ := sum()</span><br><span class="line">    <span class="comment">// 调用sum函数返回200给变量b</span></span><br><span class="line">    _, b := sum()</span><br><span class="line">    <span class="comment">// 调用sum函数返回100给变量c, 200给变量d</span></span><br><span class="line">    c, d := sum()</span><br><span class="line">    fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li><p>函数外的每个语句都必须以关键字开始（var、const、func、type等）</p></li><li><p><code>:=</code>只能在函数内部使用</p></li><li><p><code>-</code>多用于占位</p></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把<code>var</code>换成了<code>const</code>，常量在定义的时候必须赋值。</p><h3 id="标准式-1"><a href="#标准式-1" class="headerlink" title="标准式"></a>标准式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我永远十八</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="批量式-1"><a href="#批量式-1" class="headerlink" title="批量式"></a>批量式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    pi  = <span class="number">3.1415926</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>采用批量声明时，如果下面常量的值与上一行的相同，可以省略值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n1、n2、n3都为100</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="number">100</span></span><br><span class="line">    n2</span><br><span class="line">    n3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p>go语言现阶段没有枚举，但是可以用常量配合iota来模拟枚举。</p><p>比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    n2        <span class="comment">//1</span></span><br><span class="line">    n3        <span class="comment">//2</span></span><br><span class="line">    n4        <span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(n1, n2, n3, n4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>_</code>跳过某个值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    n2        <span class="comment">//1</span></span><br><span class="line">    _</span><br><span class="line">    n4 <span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(n1, n2, n4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插队：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    n2 = <span class="number">100</span>  <span class="comment">//100</span></span><br><span class="line">    n3 = <span class="literal">iota</span> <span class="comment">//2</span></span><br><span class="line">    n4        <span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> n5 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(n1, n2, n3, n4, n5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个iota定义在一行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a, b = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span> <span class="comment">//1, 2</span></span><br><span class="line">    c, d                      <span class="comment">//2, 3</span></span><br><span class="line">    e, f                      <span class="comment">//3, 4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a, b, c, d, e, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kibana搭建</title>
      <link href="/kibana-install.html"/>
      <url>/kibana-install.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kibana是一个数据分析和可视化平台。</p><p>它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>Kibana 的版本需要和 Elasticsearch 的版本一致。这是官方支持的配置。</p><p>不支持的情况：</p><ul><li>主版本号高：Kibana 5.x—Elasticsearch 2.x</li><li>子版本号高：Kibana 5.1—Elasticsearch 5.0</li></ul><p>运行一个 Elasticsearch 子版本号大于 Kibana 的版本基本不会有问题。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="tar-gz"><a href="#tar-gz" class="headerlink" title="tar.gz"></a>tar.gz</h4><p>用于在linux系统和Drawin系统下的安装，也是最方便的一种选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 版本</span><br><span class="line">VERSION&#x3D;7.3.0</span><br><span class="line"></span><br><span class="line"># 下载链接：linux和Drawin</span><br><span class="line">URL1&#x3D;https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;kibana&#x2F;kibana-$&#123;VERSION&#125;-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">URL2&#x3D;https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;kibana&#x2F;kibana-$&#123;VERSION&#125;-darwin-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"># 下载</span><br><span class="line">wget $&#123;URL1&#125;</span><br><span class="line">wget $&#123;URL2&#125;</span><br><span class="line"></span><br><span class="line"># 解压下载好的文件</span><br><span class="line">tar -zxf kibana-&#123;VERSION&#125;-darwin-x86_64.tar.gz</span><br><span class="line">tar -zxf kibana-&#123;VERSION&#125;-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>解压完之后，会生成一个kibana家目录。</p><h5 id="从命令行启动"><a href="#从命令行启动" class="headerlink" title="从命令行启动"></a>从命令行启动</h5><p>默认Kibana在前台启动，打印日志到标准输出 (<code>stdout</code>)，可以通过 <code>Ctrl C</code> 命令终止运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;kibana</span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>Kibana 默认情况下从 <code>$KIBANA_HOME/config/kibana.yml</code> 加载配置文件。</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>windows安装kibana。</p><h4 id="deb包安装"><a href="#deb包安装" class="headerlink" title="deb包安装"></a>deb包安装</h4><p><code>deb</code> 包用来在 Debian、Ubuntu 和其他基于 Debian 的系统下安装，Debian 包可以从Elastic官网或者apt仓库下载。</p><h4 id="RPM包安装"><a href="#RPM包安装" class="headerlink" title="RPM包安装"></a>RPM包安装</h4><p><code>rpm</code> 包用来在 Red Hat、Centos、SLES、OpenSuSe 以及其他基于 RPM 的系统下安装。RPM 包可以从 Elastic 官网或者RPM仓库下载。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="Docker运行kibana"><a href="#Docker运行kibana" class="headerlink" title="Docker运行kibana"></a>Docker运行kibana</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认值5601，由后端服务器提供服务，该配置指定kibana服务器绑定使用的端口号。</span></span><br><span class="line"><span class="comment"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class="line"><span class="comment">#server.port: 5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class="line"><span class="comment"># The default is 'localhost', which usually means remote machines will not be able to connect.</span></span><br><span class="line"><span class="comment"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class="line"><span class="comment">#server.host: "localhost"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class="line"><span class="comment"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class="line"><span class="comment"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class="line"><span class="comment"># This setting cannot end in a slash.</span></span><br><span class="line"><span class="comment">#server.basePath: ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class="line"><span class="comment"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class="line"><span class="comment"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class="line"><span class="comment"># default to `true` starting in Kibana 7.0.</span></span><br><span class="line"><span class="comment">#server.rewriteBasePath: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class="line"><span class="comment">#server.maxPayloadBytes: 1048576</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Kibana server's name.  This is used for display purposes.</span></span><br><span class="line"><span class="comment">#server.name: "your-hostname"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class="line"><span class="comment">#elasticsearch.hosts: ["http://localhost:9200"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When this setting's value is true Kibana uses the hostname specified in the server.host</span></span><br><span class="line"><span class="comment"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class="line"><span class="comment"># that connects to this Kibana instance.</span></span><br><span class="line"><span class="comment">#elasticsearch.preserveHost: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class="line"><span class="comment"># dashboards. Kibana creates a new index if the index doesn't already exist.</span></span><br><span class="line"><span class="comment">#kibana.index: ".kibana"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default application to load.</span></span><br><span class="line"><span class="comment">#kibana.defaultAppId: "home"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class="line"><span class="comment"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br><span class="line"><span class="comment"># index at startup. Your Kibana users still need to authenticate with Elasticsearch, which</span></span><br><span class="line"><span class="comment"># is proxied through the Kibana server.</span></span><br><span class="line"><span class="comment">#elasticsearch.username: "kibana"</span></span><br><span class="line"><span class="comment">#elasticsearch.password: "pass"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.</span></span><br><span class="line"><span class="comment"># These settings enable SSL for outgoing requests from the Kibana server to the browser.</span></span><br><span class="line"><span class="comment">#server.ssl.enabled: false</span></span><br><span class="line"><span class="comment">#server.ssl.certificate: /path/to/your/server.crt</span></span><br><span class="line"><span class="comment">#server.ssl.key: /path/to/your/server.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional settings that provide the paths to the PEM-format SSL certificate and key files.</span></span><br><span class="line"><span class="comment"># These files validate that your Elasticsearch backend uses the same key files.</span></span><br><span class="line"><span class="comment">#elasticsearch.ssl.certificate: /path/to/your/client.crt</span></span><br><span class="line"><span class="comment">#elasticsearch.ssl.key: /path/to/your/client.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional setting that enables you to specify a path to the PEM file for the certificate</span></span><br><span class="line"><span class="comment"># authority for your Elasticsearch instance.</span></span><br><span class="line"><span class="comment">#elasticsearch.ssl.certificateAuthorities: [ "/path/to/your/CA.pem" ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To disregard the validity of SSL certificates, change this setting's value to 'none'.</span></span><br><span class="line"><span class="comment">#elasticsearch.ssl.verificationMode: full</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of</span></span><br><span class="line"><span class="comment"># the elasticsearch.requestTimeout setting.</span></span><br><span class="line"><span class="comment">#elasticsearch.pingTimeout: 1500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time in milliseconds to wait for responses from the back end or Elasticsearch. This value</span></span><br><span class="line"><span class="comment"># must be a positive integer.</span></span><br><span class="line"><span class="comment">#elasticsearch.requestTimeout: 30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side</span></span><br><span class="line"><span class="comment"># headers, set this value to [] (an empty list).</span></span><br><span class="line"><span class="comment">#elasticsearch.requestHeadersWhitelist: [ authorization ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten</span></span><br><span class="line"><span class="comment"># by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.</span></span><br><span class="line"><span class="comment">#elasticsearch.customHeaders: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.</span></span><br><span class="line"><span class="comment">#elasticsearch.shardTimeout: 30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time in milliseconds to wait for Elasticsearch at Kibana startup before retrying.</span></span><br><span class="line"><span class="comment">#elasticsearch.startupTimeout: 5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logs queries sent to Elasticsearch. Requires logging.verbose set to true.</span></span><br><span class="line"><span class="comment">#elasticsearch.logQueries: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the path where Kibana creates the process ID file.</span></span><br><span class="line"><span class="comment">#pid.file: /var/run/kibana.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables you specify a file where Kibana stores log output.</span></span><br><span class="line"><span class="comment">#logging.dest: stdout</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the value of this setting to true to suppress all logging output.</span></span><br><span class="line"><span class="comment">#logging.silent: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the value of this setting to true to suppress all logging output other than error messages.</span></span><br><span class="line"><span class="comment">#logging.quiet: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the value of this setting to true to log all events, including system usage information</span></span><br><span class="line"><span class="comment"># and all requests.</span></span><br><span class="line"><span class="comment">#logging.verbose: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the interval in milliseconds to sample system and process performance</span></span><br><span class="line"><span class="comment"># metrics. Minimum is 100ms. Defaults to 5000.</span></span><br><span class="line"><span class="comment">#ops.interval: 5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies locale to be used for all localizable strings, dates and number formats.</span></span><br><span class="line"><span class="comment"># Supported languages are the following: English - en , by default , Chinese - zh-CN . </span></span><br><span class="line"><span class="comment">#i18n.locale: "en"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kibana </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的时间包</title>
      <link href="/go-time.html"/>
      <url>/go-time.html</url>
      
        <content type="html"><![CDATA[<h1 id="time包"><a href="#time包" class="headerlink" title="time包"></a>time包</h1><h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><p><code>time.Now()</code>获取当前时间对象。然后可以根据时间对象获取对象的年月日。。。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前时间对象</span></span><br><span class="line">    now := time.Now()</span><br><span class="line">    fmt.Println(now)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年</span></span><br><span class="line">    fmt.Println(now.Year())</span><br><span class="line">    <span class="comment">// 月</span></span><br><span class="line">    fmt.Println(now.Month())</span><br><span class="line">    <span class="comment">// 日</span></span><br><span class="line">    fmt.Println(now.Day())</span><br><span class="line">    <span class="comment">// 小时</span></span><br><span class="line">    fmt.Println(now.Hour())</span><br><span class="line">    <span class="comment">// 分</span></span><br><span class="line">    fmt.Println(now.Minute())</span><br><span class="line">    <span class="comment">// 秒</span></span><br><span class="line">    fmt.Println(now.Second())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 13:56:04.2639783 +0800 CST m&#x3D;+0.003994001</span><br><span class="line">2019</span><br><span class="line">August</span><br><span class="line">5</span><br><span class="line">13</span><br><span class="line">56</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><h3 id="时间对象转时间戳"><a href="#时间对象转时间戳" class="headerlink" title="时间对象转时间戳"></a>时间对象转时间戳</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    <span class="comment">// 获取当前时间对应的时间戳</span></span><br><span class="line">    timeStamp1 := now.Unix()</span><br><span class="line">    fmt.Println(timeStamp1)</span><br><span class="line">    <span class="comment">// 获取当前时间对应的纳秒时间戳</span></span><br><span class="line">    timeStamp2 := now.UnixNano()</span><br><span class="line">    fmt.Println(timeStamp2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1564984727</span><br><span class="line">1564984727247498100</span><br></pre></td></tr></table></figure><h3 id="时间戳转时间对象"><a href="#时间戳转时间对象" class="headerlink" title="时间戳转时间对象"></a>时间戳转时间对象</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> tsp <span class="keyword">int64</span> = <span class="number">1564984727</span></span><br><span class="line">    timeObj := time.Unix(tsp, <span class="number">0</span>)</span><br><span class="line">    fmt.Println(timeObj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年</span></span><br><span class="line">    fmt.Println(timeObj.Year())</span><br><span class="line">    <span class="comment">// 月</span></span><br><span class="line">    fmt.Println(timeObj.Month())</span><br><span class="line">    <span class="comment">// 日</span></span><br><span class="line">    fmt.Println(timeObj.Day())</span><br><span class="line">    <span class="comment">// 小时</span></span><br><span class="line">    fmt.Println(timeObj.Hour())</span><br><span class="line">    <span class="comment">// 分</span></span><br><span class="line">    fmt.Println(timeObj.Minute())</span><br><span class="line">    <span class="comment">// 秒</span></span><br><span class="line">    fmt.Println(timeObj.Second())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 13:58:47 +0800 CST</span><br><span class="line">2019</span><br><span class="line">August</span><br><span class="line">5</span><br><span class="line">13</span><br><span class="line">58</span><br><span class="line">47</span><br></pre></td></tr></table></figure><h2 id="时间间隔"><a href="#时间间隔" class="headerlink" title="时间间隔"></a>时间间隔</h2><p><code>time.Duration</code>是<code>time</code>包定义的一个类型，它代表两个时间点之间经过的时间，以纳秒为单位常用来时间计算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Nanosecond  Duration = <span class="number">1</span></span><br><span class="line">    Microsecond          = <span class="number">1000</span> * Nanosecond</span><br><span class="line">    Millisecond          = <span class="number">1000</span> * Microsecond</span><br><span class="line">    Second               = <span class="number">1000</span> * Millisecond</span><br><span class="line">    Minute               = <span class="number">60</span> * Second</span><br><span class="line">    Hour                 = <span class="number">60</span> * Minute</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例如：<code>time.Second</code>表示一秒，<code>time.Hour</code>表示一小时。</p><h2 id="时间操作"><a href="#时间操作" class="headerlink" title="时间操作"></a>时间操作</h2><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Add</span><span class="params">(d Duration)</span> <span class="title">Time</span></span></span><br></pre></td></tr></table></figure><p>时间相加：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    <span class="comment">// 现在的时间</span></span><br><span class="line">    fmt.Println(now)</span><br><span class="line">    <span class="comment">// 10秒后的时间</span></span><br><span class="line">    fmt.Println(now.Add(time.Second * <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三十分钟后的时间</span></span><br><span class="line">    fmt.Println(now.Add(time.Minute * <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一天后的时间</span></span><br><span class="line">    fmt.Println(now.Add(time.Hour * <span class="number">24</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 十分钟之前的时间</span></span><br><span class="line">    fmt.Println(now.Add(-time.Minute * <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 14:13:31.230839 +0800 CST m&#x3D;+0.003991501</span><br><span class="line">2019-08-05 14:13:41.230839 +0800 CST m&#x3D;+10.003991501</span><br><span class="line">2019-08-05 14:43:31.230839 +0800 CST m&#x3D;+1800.003991501</span><br><span class="line">2019-08-06 14:13:31.230839 +0800 CST m&#x3D;+86400.003991501</span><br><span class="line">2019-08-06 14:03:31.230839 +0800 CST m&#x3D;+86400.003991501</span><br></pre></td></tr></table></figure><h3 id="Sub"><a href="#Sub" class="headerlink" title="Sub"></a>Sub</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Sub</span><span class="params">(u Time)</span> <span class="title">Duration</span></span></span><br></pre></td></tr></table></figure><p>两个时间对象相减得到<code>time.Duration</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10小时后的时间</span></span><br><span class="line">    later := now.Add(time.Hour * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算now和later相差值</span></span><br><span class="line">    sub := now.Sub(later)</span><br><span class="line">    fmt.Println(sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-10h0m0s</span><br></pre></td></tr></table></figure><h3 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a>Equal</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Equal</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><p>判断两个时间是否相同，受时区影响。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// UTC时间</span></span><br><span class="line">    now1 := time.Now().UTC()</span><br><span class="line">    fmt.Println(now1)</span><br><span class="line">    <span class="comment">// 北京时间</span></span><br><span class="line">    now2 := time.Now().Local()</span><br><span class="line">    fmt.Println(now2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较两个时间是否相同，会考虑到时区影响。</span></span><br><span class="line">    e := now1.Equal(now2)</span><br><span class="line">    fmt.Println(e)</span><br><span class="line">    <span class="comment">// 与值比较不同</span></span><br><span class="line">    fmt.Println(now2 == now1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 06:31:17.0639578 +0000 UTC</span><br><span class="line">2019-08-05 14:31:17.0639578 +0800 CST</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (t Time) Before(u Time) bool</span><br></pre></td></tr></table></figure><p> 比较t时间是否在u之前：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    fmt.Println(now)</span><br><span class="line">    before := now.Add(-time.Hour * <span class="number">2</span>)</span><br><span class="line">    fmt.Println(before)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否在前</span></span><br><span class="line">    b := before.Before(now)</span><br><span class="line">    fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 14:40:06.0742141 +0800 CST m&#x3D;+0.004017201</span><br><span class="line">2019-08-05 12:40:06.0742141 +0800 CST m&#x3D;-7199.995982799</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">After</span><span class="params">(u Time)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><p>比较t时间是否在u之后：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    fmt.Println(now)</span><br><span class="line">    after := now.Add(time.Hour * <span class="number">2</span>)</span><br><span class="line">    fmt.Println(after)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否在后</span></span><br><span class="line">    b := after.After(now)</span><br><span class="line">    fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 15:09:40.8128673 +0800 CST m&#x3D;+0.004022201</span><br><span class="line">2019-08-05 17:09:40.8128673 +0800 CST m&#x3D;+7200.004022201</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>使用<code>time.Tick()</code>来设置定时器，定时器的本质上是一个<code>channel</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个时间间隔为3秒的定时器，</span></span><br><span class="line">    dingshiqi := time.Tick(time.Second * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环定时器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dingshiqi &#123;</span><br><span class="line">        <span class="comment">// 每十秒执行的任务</span></span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 15:14:58.4715038 +0800 CST m&#x3D;+3.004032801</span><br><span class="line">2019-08-05 15:15:01.4733053 +0800 CST m&#x3D;+6.005834401</span><br><span class="line">2019-08-05 15:15:04.4716833 +0800 CST m&#x3D;+9.004212301</span><br><span class="line">2019-08-05 15:15:07.4723472 +0800 CST m&#x3D;+12.004876201</span><br><span class="line">2019-08-05 15:15:10.4720618 +0800 CST m&#x3D;+15.004590901</span><br><span class="line">2019-08-05 15:15:13.4716867 +0800 CST m&#x3D;+18.004215801</span><br><span class="line">2019-08-05 15:15:16.4728042 +0800 CST m&#x3D;+21.005333301</span><br></pre></td></tr></table></figure><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><p>go语言的格式化和其它语言有不同之处，是使用Go的诞生时间2006年1月2号15点04分（记忆口诀为20061234）。也许这就是技术人员的浪漫吧。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line"></span><br><span class="line">    fmt.Println(now.Format(<span class="string">"2006-01-02 15:04:05"</span>))</span><br><span class="line">    fmt.Println(now.Format(<span class="string">"2006-01-02 15:04:05 PM"</span>))</span><br><span class="line">    fmt.Println(now.Format(<span class="string">"2006/01/02"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 15:31:39</span><br><span class="line">2019-08-05 15:31:39 PM</span><br><span class="line">2019&#x2F;08&#x2F;05</span><br></pre></td></tr></table></figure><h3 id="解析字符串格式的时间"><a href="#解析字符串格式的时间" class="headerlink" title="解析字符串格式的时间"></a>解析字符串格式的时间</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    timeStr := <span class="string">"2019/08/05 13:14:52"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载时区</span></span><br><span class="line">    loc, err := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照指定时区和字符串解析成时间</span></span><br><span class="line">    timeObj, _ := time.ParseInLocation(<span class="string">"2006/01/02 15:04:05"</span>, timeStr, loc)</span><br><span class="line">    timeObj1, _ := time.Parse(<span class="string">"2006/01/02 15:04:05"</span>, timeStr)</span><br><span class="line">    fmt.Println(timeObj)</span><br><span class="line">    fmt.Println(timeObj.Year())</span><br><span class="line">    fmt.Println(timeObj1)</span><br><span class="line">    fmt.Println(timeObj1.Year())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-08-05 13:14:52 +0800 CST</span><br><span class="line">2019</span><br><span class="line">2019-08-05 13:14:52 +0000 UTC</span><br><span class="line">2019</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>echo-jwt</title>
      <link href="/echo-jwt.html"/>
      <url>/echo-jwt.html</url>
      
        <content type="html"><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="服务端-map"><a href="#服务端-map" class="headerlink" title="服务端(map)"></a>服务端(map)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    username := c.FormValue(<span class="string">"username"</span>)</span><br><span class="line">    password := c.FormValue(<span class="string">"password"</span>)</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">"jiang_wei"</span> &amp;&amp; password == <span class="string">"echo"</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个token对象，传入一个header加密的算法</span></span><br><span class="line">        token := jwt.New(jwt.SigningMethodHS256)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为token对象设置载荷playload</span></span><br><span class="line">        <span class="comment">// 类型断言：转换为jwt.MapClaims类型</span></span><br><span class="line">        claims := token.Claims.(jwt.MapClaims)</span><br><span class="line">        claims[<span class="string">"name"</span>] = <span class="string">"jiang_wei"</span></span><br><span class="line">        claims[<span class="string">"admin"</span>] = <span class="literal">true</span></span><br><span class="line">        claims[<span class="string">"iat"</span>] = time.Now().Unix()</span><br><span class="line">        claims[<span class="string">"exp"</span>] = time.Now().Add(time.Hour * <span class="number">72</span>).Unix()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成编码令牌并将其作为响应发送</span></span><br><span class="line">        t, err := token.SignedString([]<span class="keyword">byte</span>(<span class="string">"secret"</span>))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(token)</span><br><span class="line">        <span class="keyword">return</span> c.JSON(<span class="number">200</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">            <span class="string">"token"</span>: t,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> echo.ErrUnauthorized</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accessible</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"此路由未加认证，随意访问。"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo1</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">" 查看用户信息"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo2</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    user := c.Get(<span class="string">"user"</span>).(*jwt.Token)</span><br><span class="line">    claims := user.Claims.(jwt.MapClaims)</span><br><span class="line">    name := claims[<span class="string">"name"</span>].(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"Welcome "</span>+name+<span class="string">"!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间件</span></span><br><span class="line">    e.Use(middleware.Logger())</span><br><span class="line">    e.Use(middleware.Recover())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// login route</span></span><br><span class="line">    e.POST(<span class="string">"/login"</span>, login)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unauthorized route 不需要认证的路由</span></span><br><span class="line">    e.GET(<span class="string">"/"</span>, accessible)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// authorized route 需要认证的路由</span></span><br><span class="line">    g := e.Group(<span class="string">"/api/v1"</span>, middleware.JWT([]<span class="keyword">byte</span>(<span class="string">"secret"</span>)))</span><br><span class="line">    g.GET(<span class="string">"/user_info1"</span>, userInfo1)</span><br><span class="line">    g.GET(<span class="string">"/user_info2"</span>, userInfo2)</span><br><span class="line"></span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><h3 id="访问不需要认证的url"><a href="#访问不需要认证的url" class="headerlink" title="访问不需要认证的url"></a>访问不需要认证的url</h3><p><img src="/uploads/echo/5.png" alt=""></p><h3 id="通过登录url获取token"><a href="#通过登录url获取token" class="headerlink" title="通过登录url获取token"></a>通过登录url获取token</h3><h4 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h4><p><img src="/uploads/echo/6.png" alt=""></p><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><p><img src="/uploads/echo/7.png" alt=""></p><h3 id="访问用户信息url"><a href="#访问用户信息url" class="headerlink" title="访问用户信息url"></a>访问用户信息url</h3><h4 id="不带token访问用户信息"><a href="#不带token访问用户信息" class="headerlink" title="不带token访问用户信息"></a>不带token访问用户信息</h4><p><img src="/uploads/echo/8.png" alt=""></p><h4 id="带token访问用户信息"><a href="#带token访问用户信息" class="headerlink" title="带token访问用户信息"></a>带token访问用户信息</h4><p><img src="/uploads/echo/9.png" alt=""></p><p><img src="/uploads/echo/10.png" alt=""></p><h2 id="服务端-struct"><a href="#服务端-struct" class="headerlink" title="服务端(struct)"></a>服务端(struct)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserName <span class="keyword">string</span></span><br><span class="line">    PassWord <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个自定义jwt claims</span></span><br><span class="line"><span class="keyword">type</span> MyJwtClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">    Admin <span class="keyword">string</span> <span class="string">`json:"admin"`</span></span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    u := <span class="built_in">new</span>(User)</span><br><span class="line">    <span class="keyword">if</span> err := c.Bind(u); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> u.UserName == <span class="string">"jiang_wei"</span> &amp;&amp; u.PassWord == <span class="string">"echo"</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化一个自定义claims</span></span><br><span class="line">        claims := &amp;MyJwtClaims&#123;</span><br><span class="line">            <span class="string">"jiang_wei"</span>,</span><br><span class="line">            <span class="string">"true"</span>,</span><br><span class="line">            jwt.StandardClaims&#123;</span><br><span class="line">                IssuedAt:  time.Now().Unix(),</span><br><span class="line">                ExpiresAt: time.Now().Add(time.Hour * <span class="number">72</span>).Unix(),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行NewWithClaimsmethod</span></span><br><span class="line">        token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取完整的签名令牌并将其作为响应发送</span></span><br><span class="line">        t, err := token.SignedString([]<span class="keyword">byte</span>(<span class="string">"secret"</span>))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c.JSON(<span class="number">200</span>, echo.Map&#123;</span><br><span class="line">            <span class="string">"token"</span>: t,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> echo.ErrUnauthorized</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accessible</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"此路由未加认证，随意访问。"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo1</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">" 查看用户信息"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo2</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    user := c.Get(<span class="string">"user"</span>).(*jwt.Token)</span><br><span class="line">    claims := user.Claims.(jwt.MapClaims)</span><br><span class="line">    name := claims[<span class="string">"name"</span>].(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"Welcome "</span>+name+<span class="string">"!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间件</span></span><br><span class="line">    e.Use(middleware.Logger())</span><br><span class="line">    e.Use(middleware.Recover())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// login route</span></span><br><span class="line">    e.POST(<span class="string">"/login"</span>, login)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unauthorized route 不需要认证的路由</span></span><br><span class="line">    e.GET(<span class="string">"/"</span>, accessible)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化一个jwt conf对象</span></span><br><span class="line">    jwtConf := middleware.JWTConfig&#123;</span><br><span class="line">        Claims:     &amp;MyJwtClaims&#123;&#125;,</span><br><span class="line">        SigningKey: []<span class="keyword">byte</span>(<span class="string">"secret"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// authorized route 需要认证的路由</span></span><br><span class="line">    g := e.Group(<span class="string">"/api/v1"</span>, middleware.JWTWithConfig(jwtConf))</span><br><span class="line">    g.GET(<span class="string">"/user_info1"</span>, userInfo1)</span><br><span class="line">    g.GET(<span class="string">"/user_info2"</span>, userInfo2)</span><br><span class="line"></span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go web框架 Echo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>echo-response</title>
      <link href="/echo-response.html"/>
      <url>/echo-response.html</url>
      
        <content type="html"><![CDATA[<h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><h2 id="发送string数据"><a href="#发送string数据" class="headerlink" title="发送string数据"></a>发送string数据</h2><p><code>Content.String(code int, s string)</code>用于发送一个带有状态码的纯文本响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respString</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"返回字符串\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/string"</span>, respString)</span><br><span class="line">    </span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl 192.168.32.69:1111&#x2F;string</span><br><span class="line">返回字符串</span><br></pre></td></tr></table></figure><h2 id="发送html响应"><a href="#发送html响应" class="headerlink" title="发送html响应"></a>发送html响应</h2><p><code>Content.Html(code int, html string)</code>用于发送一个带有状态码的简单 HTML 响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respHtml</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.HTML(<span class="number">200</span>, <span class="string">"&lt;h1&gt;这里只是返回一个简单的html字符串，想动态生成HTML请参照模版&lt;/h1&gt;"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/html"</span>, respHtml)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl 192.168.32.69:1111&#x2F;html</span><br><span class="line">&lt;h1&gt;这里只是返回一个简单的html字符串，想动态生成HTML请参照模版&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><h2 id="发送json数据"><a href="#发送json数据" class="headerlink" title="发送json数据"></a>发送json数据</h2><h3 id="普通json"><a href="#普通json" class="headerlink" title="普通json"></a>普通json</h3><p><code>Context.JSON(code int, i interface{})</code> 用于发送一个带状态码的 JSON 对象，它会将 Golang 的对象转换成 JSON 字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:"name" xml:"name"`</span></span><br><span class="line">    Email <span class="keyword">string</span> <span class="string">`json:"email" xml:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respJson1</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    u := &amp;User&#123;</span><br><span class="line">        Name:  <span class="string">"jiang_wei"</span>,</span><br><span class="line">        Email: <span class="string">"jw19961019@gmail.com"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/json1"</span>, respJson1)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl -v 192.168.32.69:1111&#x2F;json1</span><br><span class="line">*   Trying 192.168.59.241...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to (nil) (192.168.59.241) port 8888 (#0)</span><br><span class="line">&gt; GET http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;json1 HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: 192.168.32.69:1111</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.52.1</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; Proxy-Connection: Keep-Alive</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP&#x2F;1.1 200 OK</span><br><span class="line">&lt; Content-Type: application&#x2F;json; charset&#x3D;UTF-8</span><br><span class="line">&lt; Date: Thu, 01 Aug 2019 04:15:18 GMT</span><br><span class="line">&lt; Content-Length: 52</span><br><span class="line">&lt; X-Cache: MISS from localhost.localdomain</span><br><span class="line">&lt; X-Cache-Lookup: MISS from localhost.localdomain:8888</span><br><span class="line">&lt; Via: 1.1 localhost.localdomain (squid&#x2F;3.5.20)</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; </span><br><span class="line">&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;&#125;</span><br><span class="line">* Curl_http_done: called premature &#x3D;&#x3D; 0</span><br><span class="line">* Connection #0 to host (nil) left intact</span><br></pre></td></tr></table></figure><h3 id="json流"><a href="#json流" class="headerlink" title="json流"></a>json流</h3><p><code>Content.JSON()</code>内部使用<code>json.Marshal</code>来转换json数据。但该方法面对大量的 JSON 数据会显得效率不足，对于这种情况可以直接使用 JSON 流。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:"name" xml:"name"`</span></span><br><span class="line">    Email <span class="keyword">string</span> <span class="string">`json:"email" xml:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respJson2</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    u := &amp;User&#123;</span><br><span class="line">        Name:  <span class="string">"jiang_wei"</span>,</span><br><span class="line">        Email: <span class="string">"jw19961019@gmail.com"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)</span><br><span class="line">    c.Response().WriteHeader(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">return</span> json.NewEncoder(c.Response()).Encode(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/json2"</span>, respJson2)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl  192.168.32.69:1111&#x2F;json2</span><br><span class="line">&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="json美化"><a href="#json美化" class="headerlink" title="json美化"></a>json美化</h3><p><code>Context.JSONPretty(code int, i interface{}, indent string)</code>可以发送带有缩进的友好格式的json数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:"name" xml:"name"`</span></span><br><span class="line">    Email <span class="keyword">string</span> <span class="string">`json:"email" xml:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respJson3</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    u := &amp;User&#123;</span><br><span class="line">        Name:  <span class="string">"jiang_wei"</span>,</span><br><span class="line">        Email: <span class="string">"jw19961019@gmail.com"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.JSONPretty(<span class="number">200</span>, u, <span class="string">"    "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/json3"</span>, respJson3)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl  192.168.32.69:1111&#x2F;json3</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;jiang_wei&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;jw19961019@gmail.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，也支持在url携带参数来输出友好的json数据，比如使用普通json的代码，但是请求的url加参数。</p><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl  192.168.32.69:1111&#x2F;json1</span><br><span class="line">&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;&#125;</span><br><span class="line"></span><br><span class="line">root@sw1:~# curl  192.168.32.69:1111&#x2F;json1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;jiang_wei&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;jw19961019@gmail.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json-blob"><a href="#json-blob" class="headerlink" title="json blob"></a>json blob</h3><p><code>Content.JSONBlob(code int, b []byte)</code>可以从外部源(例如数据库)直接发送预编码的json对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respJson4</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> encodeJson []<span class="keyword">byte</span></span><br><span class="line">    <span class="keyword">return</span> c.JSONBlob(<span class="number">200</span>, encodeJson)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/json4"</span>, respJson4)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl  192.168.32.69:1111&#x2F;json4 -v</span><br><span class="line">*   Trying 192.168.59.241...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to (nil) (192.168.59.241) port 8888 (#0)</span><br><span class="line">&gt; GET http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;json4 HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: 192.168.32.69:1111</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.52.1</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; Proxy-Connection: Keep-Alive</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP&#x2F;1.1 200 OK</span><br><span class="line">&lt; Content-Type: application&#x2F;json; charset&#x3D;UTF-8</span><br><span class="line">&lt; Date: Thu, 01 Aug 2019 05:29:12 GMT</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; X-Cache: MISS from localhost.localdomain</span><br><span class="line">&lt; X-Cache-Lookup: MISS from localhost.localdomain:8888</span><br><span class="line">&lt; Via: 1.1 localhost.localdomain (squid&#x2F;3.5.20)</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; </span><br><span class="line">* Curl_http_done: called premature &#x3D;&#x3D; 0</span><br><span class="line">* Connection #0 to host (nil) left intact</span><br></pre></td></tr></table></figure><p>状态码200，只是那是一个空字节切片。所以没有返回数据。</p><h2 id="发送jsonp数据"><a href="#发送jsonp数据" class="headerlink" title="发送jsonp数据"></a>发送jsonp数据</h2><p><code>Context.JSONP(code int, callback string, i interface{})</code> 可以将 Golang 的数据类型转换成 JSON 类型，并通过回调以带有状态码的 JSONNP 结构发送。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respJson</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    mp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"jiang_wei"</span>,</span><br><span class="line">        <span class="string">"sex"</span>:<span class="string">"男"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.JSONP(<span class="number">200</span>, <span class="string">"hello"</span>,mp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/jsonp"</span>, respJson)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;测试jsonp&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;button class&#x3D;&quot;hello&quot;&gt;点击发送请求&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 生成标签</span><br><span class="line">    function get_jsonp_data(url) &#123;</span><br><span class="line">        var Ele &#x3D; $(&#96;&lt;script&gt;&#96;)</span><br><span class="line">        Ele.attr(&#39;src&#39;, url);</span><br><span class="line">        Ele.attr(&#39;id&#39;, &#39;jsonp&#39;);</span><br><span class="line">        $(&#39;body&#39;).append(Ele);</span><br><span class="line">        $(&#39;#jsonp&#39;).remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 点击按钮发送src请求</span><br><span class="line">    $(&quot;.hello&quot;).click(function () &#123;</span><br><span class="line">        get_jsonp_data(&quot;http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;jsonp?callback&#x3D;hello&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 服务器返回一个hello(data)</span><br><span class="line">    function hello(data) &#123;</span><br><span class="line">        alert(data.name);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>浏览器打开html文件，点击按钮，就看到一个<code>alert</code>。</p><p><img src="/uploads/echo/3.png" alt=""></p><p><img src="/uploads/echo/4.png" alt=""></p><h2 id="发送xml数据"><a href="#发送xml数据" class="headerlink" title="发送xml数据"></a>发送xml数据</h2><h3 id="普通xml"><a href="#普通xml" class="headerlink" title="普通xml"></a>普通xml</h3><p><code>Context。XML(code int, i interface{})</code> 可以将 Golang 对象转换成 XML 类型，并带上状态码发送响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name    <span class="keyword">string</span> <span class="string">`xml:"name"`</span></span><br><span class="line">    Age     <span class="keyword">int</span>    <span class="string">`xml:"age"`</span></span><br><span class="line">    IsLogin <span class="keyword">bool</span>   <span class="string">`xml:"is_login"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respXml</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    user := &amp;User&#123;</span><br><span class="line">        Name:    <span class="string">"江伟"</span>,</span><br><span class="line">        Age:     <span class="number">21</span>,</span><br><span class="line">        IsLogin: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.XML(<span class="number">200</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/xml1"</span>, respXml)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~# curl  192.168.32.69:1111&#x2F;xml1</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;User&gt;&lt;name&gt;江伟&lt;&#x2F;name&gt;&lt;age&gt;21&lt;&#x2F;age&gt;&lt;is_login&gt;true&lt;&#x2F;is_login&gt;&lt;&#x2F;User&gt;</span><br></pre></td></tr></table></figure><h3 id="xml流"><a href="#xml流" class="headerlink" title="xml流"></a>xml流</h3><p>和json流类似，简单看看：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  u := &amp;User&#123;</span><br><span class="line">    Name:  <span class="string">"Jon"</span>,</span><br><span class="line">    Email: <span class="string">"jon@labstack.com"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationXMLCharsetUTF8)</span><br><span class="line">  c.Response().WriteHeader(http.StatusOK)</span><br><span class="line">  <span class="keyword">return</span> xml.NewEncoder(c.Response()).Encode(u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xml美化"><a href="#xml美化" class="headerlink" title="xml美化"></a>xml美化</h3><p>和json美化类似：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  u := &amp;User&#123;</span><br><span class="line">    Name:  <span class="string">"Jon"</span>,</span><br><span class="line">    Email: <span class="string">"joe@labstack.com"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c.XMLPretty(http.StatusOK, u, <span class="string">"  "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一样可以通过url携带参数来获取友好输出。</p><h3 id="xml-blob"><a href="#xml-blob" class="headerlink" title="xml blob"></a>xml blob</h3><p>和json blob类似。</p><h2 id="发送文件"><a href="#发送文件" class="headerlink" title="发送文件"></a>发送文件</h2><p><code>Context.File(file string)</code> 可用来发送内容为文件的响应，并且它能自动设置正确的内容类型、优雅地处理缓存。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respFile</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.File(<span class="string">"file.txt"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/file"</span>, respFile)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送附件"><a href="#发送附件" class="headerlink" title="发送附件"></a>发送附件</h2><p>同文件类似。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">respFile</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.Attachment(<span class="string">"file.txt"</span>,<span class="string">"hehe"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/attachment"</span>, respFile)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送内嵌"><a href="#发送内嵌" class="headerlink" title="发送内嵌"></a>发送内嵌</h2><p>和文件类似，只是方法名不一样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.Inline(<span class="string">"&lt;PATH_TO_YOUR_FILE&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送二进制长文件"><a href="#发送二进制长文件" class="headerlink" title="发送二进制长文件"></a>发送二进制长文件</h2><p>可用于发送带有内容类型 (content type) 和状态代码的任意类型数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">  data := []<span class="keyword">byte</span>(<span class="string">`0306703,0035866,NO_ACTION,06/19/2006</span></span><br><span class="line"><span class="string">  0086003,"0005866",UPDATED,06/19/2006`</span>)</span><br><span class="line">    <span class="keyword">return</span> c.Blob(http.StatusOK, <span class="string">"text/csv"</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送流"><a href="#发送流" class="headerlink" title="发送流"></a>发送流</h2><p>可用于发送带有内容类型 (content type) 、状态代码、<code>io.Reader</code> 的任意类型数据流。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  f, err := os.Open(<span class="string">"&lt;PATH_TO_IMAGE&gt;"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c.Stream(http.StatusOK, <span class="string">"image/png"</span>, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送空内容"><a href="#发送空内容" class="headerlink" title="发送空内容"></a>发送空内容</h2><p>可用于发送带有状态码的空内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.NoContent(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>可用于重定向至一个带有状态码的 URL。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.Redirect(http.StatusMovedPermanently, <span class="string">"&lt;URL&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>可以用来注册在写入响应之前和响应之后调用的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  c.Response().Before(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"before response"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  c.Response().After(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"after response"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> c.NoContent(http.StatusNoContent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go web框架 Echo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的单元测试</title>
      <link href="/go-test.html"/>
      <url>/go-test.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的测试"><a href="#go语言的测试" class="headerlink" title="go语言的测试"></a>go语言的测试</h1><p>不写测试的开发不是好程序员。</p><h2 id="go-test-工具"><a href="#go-test-工具" class="headerlink" title="go test 工具"></a>go test 工具</h2><p>go语言测试依赖<code>go test</code>命令。编写测试代码和编写普通的go代码过程是类似的。</p><p>在包目录中，所有以<code>_test.go</code>为后缀名的源码文件都是<code>go test</code>测试的一部分，不会被<code>go build</code>编译到最终的可执行文件中。</p><p>在<code>*_test.go</code>文件中有三种类型的函数，单元测试函数、基准测试函数、示例函数。</p><table><thead><tr><th align="center">类型</th><th align="center">格式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">测试函数</td><td align="center">前缀为Test</td><td align="center">测试程序的一些逻辑行为是否正确</td></tr><tr><td align="center">基准函数</td><td align="center">前缀为Benchmark</td><td align="center">测试函数的性能</td></tr><tr><td align="center">示例函数</td><td align="center">前缀为Example</td><td align="center">问文档提供示例文档</td></tr></tbody></table><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><h3 id="测试函数的格式"><a href="#测试函数的格式" class="headerlink" title="测试函数的格式"></a>测试函数的格式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestName</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试函数的示例"><a href="#测试函数的示例" class="headerlink" title="测试函数的示例"></a>测试函数的示例</h3><h4 id="需要测试的代码"><a href="#需要测试的代码" class="headerlink" title="需要测试的代码"></a>需要测试的代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个字符串切割的函数，用sep切割原字符串，并返回切割后的字符串切片</span></span><br><span class="line"><span class="comment">// a:b:c --&gt; [a b c]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep <span class="keyword">string</span>)</span> <span class="params">(res []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 当sep在s中，拿到sep的索引。只要索引大于0就说明有多个sep。可以进行多次切割。</span></span><br><span class="line">    index := strings.Index(s, sep)</span><br><span class="line">    <span class="keyword">for</span> index &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, s[:index])</span><br><span class="line">        s = s[index+<span class="number">1</span>:]</span><br><span class="line">        index = strings.Index(s, sep)</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">append</span>(res, s)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写测试函数"><a href="#编写测试函数" class="headerlink" title="编写测试函数"></a>编写测试函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    s := <span class="string">"a:b:c"</span></span><br><span class="line">    sep := <span class="string">":"</span></span><br><span class="line">    sp := Split(s, sep)</span><br><span class="line">    sp0 := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> ok := reflect.DeepEqual(sp, sp0); !ok &#123;</span><br><span class="line">        t.Fatalf(<span class="string">"测试失败：期望得到：%v， 实际得到：%v\n"</span>, sp0, sp)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">"测试通过，得到：%v"</span>, sp0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果切割的字符串不在原有字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    s := <span class="string">"123321"</span></span><br><span class="line">    sep := <span class="string">"0"</span></span><br><span class="line">    sp := Split(s, sep)</span><br><span class="line">    sp0 := []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> ok := reflect.DeepEqual(sp, sp0); !ok &#123;</span><br><span class="line">        t.Fatal(<span class="string">"测试失败"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">"测试通过，得到：%v"</span>, sp0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试所有"><a href="#测试所有" class="headerlink" title="测试所有"></a>测试所有</h4><p>写完测试的函数后，可以在当前包下用<code>go tes</code>t开始测试。默认会测试所有的测试函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~/code/<span class="keyword">go</span>/src/golang/study/split$ <span class="keyword">go</span> test</span><br><span class="line">PASS</span><br><span class="line">ok      golang/study/split      <span class="number">0.001s</span></span><br></pre></td></tr></table></figure><h4 id="测试的详细信息"><a href="#测试的详细信息" class="headerlink" title="测试的详细信息"></a>测试的详细信息</h4><p>但是，这样看不出详细信息，可以加参数<code>-v</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~/code/<span class="keyword">go</span>/src/golang/study/split$ <span class="keyword">go</span> test -v</span><br><span class="line">=== RUN   TestSplit</span><br><span class="line">--- PASS: TestSplit (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">16</span>: 测试通过，得到：[a b c]</span><br><span class="line">=== RUN   TestSplit2</span><br><span class="line">--- PASS: TestSplit2 (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">28</span>: 测试通过，得到：[<span class="number">123321</span>]</span><br><span class="line">PASS</span><br><span class="line">ok      golang/study/split      <span class="number">0.001s</span></span><br></pre></td></tr></table></figure><h4 id="测试单个"><a href="#测试单个" class="headerlink" title="测试单个"></a>测试单个</h4><p>当我们只想测试一个功能时，可以加<code>-run</code> or <code>--run</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~/code/<span class="keyword">go</span>/src/golang/study/split$ <span class="keyword">go</span> test -v -run Split2</span><br><span class="line">=== RUN   TestSplit2</span><br><span class="line">--- PASS: TestSplit2 (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">28</span>: 测试通过，得到：[<span class="number">123321</span>]</span><br><span class="line">PASS</span><br><span class="line">ok      golang/study/split      <span class="number">0.001s</span></span><br></pre></td></tr></table></figure><p>这个功能是有问题的，当我们的切割符是多个字符时，会测试失败。</p><p>添加测试函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果切割的字符串是多个字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit3</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    s := <span class="string">"1200340056007800"</span></span><br><span class="line">    sep := <span class="string">"00"</span></span><br><span class="line">    sp := Split(s, sep)</span><br><span class="line">    sp0 := []<span class="keyword">string</span>&#123;<span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> ok := reflect.DeepEqual(sp, sp0); !ok &#123;</span><br><span class="line">        t.Fatalf(<span class="string">"测试失败，期望得到：%v 实际得到：%v"</span>, sp0, sp)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">"测试通过，得到：%v"</span>, sp0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~/code/<span class="keyword">go</span>/src/golang/study/split$ <span class="keyword">go</span> test -v -run Split3</span><br><span class="line">=== RUN   TestSplit3</span><br><span class="line">--- FAIL: TestSplit3 (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">38</span>: 测试失败，期望得到：[<span class="number">12</span> <span class="number">34</span> <span class="number">56</span> <span class="number">78</span> ] 实际得到：[<span class="number">12</span> <span class="number">034</span> <span class="number">056</span> <span class="number">078</span> <span class="number">0</span>]</span><br><span class="line">FAIL</span><br><span class="line">exit status <span class="number">1</span></span><br><span class="line">FAIL    golang/study/split      <span class="number">0.001s</span></span><br></pre></td></tr></table></figure><p>可以看出测试驱动开发，修改我们的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果切割的字符串是多个字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit3</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    s := <span class="string">"1200340056007800"</span></span><br><span class="line">    sep := <span class="string">"00"</span></span><br><span class="line">    sp := Split(s, sep)</span><br><span class="line">    sp0 := []<span class="keyword">string</span>&#123;<span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> ok := reflect.DeepEqual(sp, sp0); !ok &#123;</span><br><span class="line">        t.Fatalf(<span class="string">"测试失败，期望得到：%v 实际得到：%v"</span>, sp0, sp)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">"测试通过，得到：%v"</span>, sp0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~/code/<span class="keyword">go</span>/src/golang/study/split$ <span class="keyword">go</span> test -v</span><br><span class="line">=== RUN   TestSplit</span><br><span class="line">--- PASS: TestSplit (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">16</span>: 测试通过，得到：[a b c]</span><br><span class="line">=== RUN   TestSplit2</span><br><span class="line">--- PASS: TestSplit2 (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">28</span>: 测试通过，得到：[<span class="number">123321</span>]</span><br><span class="line">=== RUN   TestSplit3</span><br><span class="line">--- PASS: TestSplit3 (<span class="number">0.00s</span>)</span><br><span class="line">    split_test.<span class="keyword">go</span>:<span class="number">40</span>: 测试通过，得到：[<span class="number">12</span> <span class="number">34</span> <span class="number">56</span> <span class="number">78</span> ]</span><br><span class="line">PASS</span><br><span class="line">ok      golang/study/split      <span class="number">0.001s</span></span><br></pre></td></tr></table></figure><h3 id="测试组"><a href="#测试组" class="headerlink" title="测试组"></a>测试组</h3><p>将多个测试用例放到一起就是测试组。</p><p>上面我们测试了三个功能，用了三个函数，这次我们只编写一个测试函数来完成所有的测试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">        str  <span class="keyword">string</span></span><br><span class="line">        sep  <span class="keyword">string</span></span><br><span class="line">        want []<span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tests := <span class="keyword">map</span>[<span class="keyword">string</span>]test&#123;</span><br><span class="line">        <span class="string">"split1"</span>: &#123;<span class="string">"a:b:c"</span>, <span class="string">":"</span>, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split2"</span>: &#123;<span class="string">"123321"</span>, <span class="string">"0"</span>, []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split3"</span>: &#123;<span class="string">"001200340056007800"</span>, <span class="string">"00"</span>, []<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> testName, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        get := Split(tc.str, tc.sep)</span><br><span class="line">        <span class="keyword">if</span> !reflect.DeepEqual(get, tc.want) &#123;</span><br><span class="line">            t.Fatalf(<span class="string">"测试%v失败，期望得到：%#v 实际得到：%#v"</span>, testName, tc.want, get)</span><br><span class="line">        &#125;</span><br><span class="line">        t.Logf(<span class="string">"测试%v通过，得到：%#v"</span>, testName, tc.want)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup</span><br><span class="line">--- PASS: TestGroup (0.00s)</span><br><span class="line">    split_test.go:26: 测试split1通过，得到：[]string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">    split_test.go:26: 测试split2通过，得到：[]string&#123;&quot;123321&quot;&#125;</span><br><span class="line">    split_test.go:26: 测试split3通过，得到：[]string&#123;&quot;&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;, &quot;78&quot;, &quot;&quot;&#125;</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><h3 id="子测试"><a href="#子测试" class="headerlink" title="子测试"></a>子测试</h3><p>上面的测试组也挺方便，但是当测试用例过多的时候，无法一目了然看出哪个测试失败，无法控制我执行某个测试用例。在<code>go 1.7+</code>版本中加入了子测试。我们可以按照如下方式使用<code>t.Run</code>执行子测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">        str  <span class="keyword">string</span></span><br><span class="line">        sep  <span class="keyword">string</span></span><br><span class="line">        want []<span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tests := <span class="keyword">map</span>[<span class="keyword">string</span>]test&#123;</span><br><span class="line">        <span class="string">"split1"</span>: &#123;<span class="string">"a:b:c"</span>, <span class="string">":"</span>, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split2"</span>: &#123;<span class="string">"123321"</span>, <span class="string">"0"</span>, []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split3"</span>: &#123;<span class="string">"001200340056007800"</span>, <span class="string">"00"</span>, []<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> testName, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        t.Run(testName, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">            get := Split(tc.str, tc.sep)</span><br><span class="line">            <span class="keyword">if</span> !reflect.DeepEqual(get, tc.want) &#123;</span><br><span class="line">                t.Fatalf(<span class="string">"测试%v失败，期望得到：%#v 实际得到：%#v"</span>, testName, tc.want, get)</span><br><span class="line">            &#125;</span><br><span class="line">            t.Logf(<span class="string">"测试%v通过，得到：%#v"</span>, testName, tc.want)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做有什么好处呢？看看就知道了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split1</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split2</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split3</span><br><span class="line">--- PASS: TestGroup (0.00s)</span><br><span class="line">    --- PASS: TestGroup&#x2F;split1 (0.00s)</span><br><span class="line">        split_test.go:27: 测试split1通过，得到：[]string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">    --- PASS: TestGroup&#x2F;split2 (0.00s)</span><br><span class="line">        split_test.go:27: 测试split2通过，得到：[]string&#123;&quot;123321&quot;&#125;</span><br><span class="line">    --- PASS: TestGroup&#x2F;split3 (0.00s)</span><br><span class="line">        split_test.go:27: 测试split3通过，得到：[]string&#123;&quot;&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;, &quot;78&quot;, &quot;&quot;&#125;</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><p>是不是更详细了，还有更好玩的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test --run &#x2F;split3 -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split3</span><br><span class="line">--- PASS: TestGroup (0.00s)</span><br><span class="line">    --- PASS: TestGroup&#x2F;split3 (0.00s)</span><br><span class="line">        split_test.go:27: 测试split3通过，得到：[]string&#123;&quot;&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;, &quot;78&quot;, &quot;&quot;&#125;</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><p>可以看出，和我们之前编写的三个测试用例一样，可以单独对一个用例进行测试。</p><h3 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h3><p>测试覆盖率是你的代码被测试套件覆盖的百分比。通常我们使用的都是语句的覆盖率，也就是在测试中至少被运行一次的代码占总代码的比例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -cover</span><br><span class="line">PASS</span><br><span class="line">coverage: 100.0% of statements</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><p>从上面的结果可以看到我们的测试用例覆盖了100%的代码。</p><p>我们在我们的功能代码中写一个与我们的测试模块功能无关的函数，看看测试覆盖率变成了多少：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -cover</span><br><span class="line">PASS</span><br><span class="line">coverage: 87.5% of statements</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><p>另外一些功能</p><ul><li>将覆盖率的日志记录输出到文件：<code>go test -cover -coverprofile=c.out</code></li><li>以html方式打开上一步生成的文件：<code>go tool cover -html=c.out</code></li></ul><h2 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h2><p>测试性能</p><h3 id="基准测试函数格式"><a href="#基准测试函数格式" class="headerlink" title="基准测试函数格式"></a>基准测试函数格式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkName</span><span class="params">(b *testing.B)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基准测试示例"><a href="#基准测试示例" class="headerlink" title="基准测试示例"></a>基准测试示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplit</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    b.Log(<span class="string">"这是一个基准测试"</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        Split(<span class="string">"a:b:c"</span>, <span class="string">":"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -bench&#x3D;Split</span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: golang&#x2F;study&#x2F;split</span><br><span class="line">BenchmarkSplit-4        10000000               223 ns&#x2F;op</span><br><span class="line">--- BENCH: BenchmarkSplit-4</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      2.471s</span><br></pre></td></tr></table></figure><p>我们还可以为基准测试添加<code>-benchmem</code>参数，来获得内存分配的统计数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -bench&#x3D;Split -benchmem</span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: golang&#x2F;study&#x2F;split</span><br><span class="line">BenchmarkSplit-4        10000000               220 ns&#x2F;op             112 B&#x2F;op          3 allocs&#x2F;op</span><br><span class="line">--- BENCH: BenchmarkSplit-4</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      2.436s</span><br></pre></td></tr></table></figure><p>其中，<code>112 B/op</code>表示每次操作内存分配了112字节，<code>3 allocs/op</code>则表示每次操作进行了3次内存分配。 我们将我们的<code>Split</code>函数优化如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个字符串切割的函数，用sep切割原字符串，并返回切割后的字符串切片</span></span><br><span class="line"><span class="comment">// a:b:c --&gt; [a b c]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// 提前申请好容量</span></span><br><span class="line">    count := strings.Count(s, sep)</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, count+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    index := strings.Index(s, sep)</span><br><span class="line">    <span class="keyword">for</span> index &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        result = <span class="built_in">append</span>(result, s[:index])</span><br><span class="line">        s = s[index+<span class="built_in">len</span>(sep):]</span><br><span class="line">        index = strings.Index(s, sep)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(result, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次我们提前使用make函数将result初始化为一个容量足够大的切片，而不再像之前一样通过调用append函数来追加。我们来看一下这个改进会带来多大的性能提升：</p><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -bench&#x3D;Split -benchmem</span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: golang&#x2F;study&#x2F;split</span><br><span class="line">BenchmarkSplit-4        20000000               107 ns&#x2F;op              48 B&#x2F;op          1 allocs&#x2F;op</span><br><span class="line">--- BENCH: BenchmarkSplit-4</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">    split_test.go:6: 这是一个基准测试</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      2.260s</span><br></pre></td></tr></table></figure><p>这个使用make函数提前分配内存的改动，减少了2/3的内存分配次数，并且减少了一半的内存分配。</p><h3 id="性能比较函数"><a href="#性能比较函数" class="headerlink" title="性能比较函数"></a>性能比较函数</h3><p>编写斐波拉契函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fib(n<span class="number">-1</span>) + Fib(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写性能比较函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">benchmarkFib</span><span class="params">(b *testing.B, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        Fib(n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    benchmarkFib(b, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    benchmarkFib(b, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib20</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    benchmarkFib(b, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib40</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    benchmarkFib(b, <span class="number">40</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;fib$ go test -bench&#x3D;.</span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: golang&#x2F;study&#x2F;fib</span><br><span class="line">BenchmarkFib1-4         1000000000               2.27 ns&#x2F;op</span><br><span class="line">BenchmarkFib2-4         200000000                6.40 ns&#x2F;op</span><br><span class="line">BenchmarkFib20-4           30000             46833 ns&#x2F;op</span><br><span class="line">BenchmarkFib40-4               2         703580232 ns&#x2F;op</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;fib        8.512s</span><br></pre></td></tr></table></figure><h3 id="重置时间"><a href="#重置时间" class="headerlink" title="重置时间"></a>重置时间</h3><p><code>b.ResetTimer</code>之前的处理不会放到执行时间里，也不会输出到报告中，例如一些连接数据库的操作，不应该计算在内的，所以可以在之前做一些不计划作为测试报告的操作。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplit</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second) <span class="comment">// 假设需要做一些耗时的无关操作</span></span><br><span class="line">    b.ResetTimer()              <span class="comment">// 重置计时器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        Split(<span class="string">"沙河有沙又有河"</span>, <span class="string">"沙"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并行测试"><a href="#并行测试" class="headerlink" title="并行测试"></a>并行测试</h3><p><code>RunParallel</code>会创建出多个<code>goroutine</code>，并将<code>b.N</code>分配给这些<code>goroutine</code>执行， 其中<code>goroutine</code>数量的默认值为<code>GOMAXPROCS</code>。用户如果想要增加非CPU受限（non-CPU-bound）基准测试的并行性， 那么可以在<code>RunParallel</code>之前调用<code>SetParallelism</code> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplit</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">            Split(<span class="string">"a:b:c"</span>, <span class="string">":"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSplit1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        Split(<span class="string">"a:b:c"</span>, <span class="string">":"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -bench&#x3D;. -v</span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: golang&#x2F;study&#x2F;split</span><br><span class="line">BenchmarkSplit-4        20000000                64.4 ns&#x2F;op</span><br><span class="line">BenchmarkSplit1-4       20000000               111 ns&#x2F;op</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      3.692s</span><br></pre></td></tr></table></figure><h2 id="Setup与TearDown"><a href="#Setup与TearDown" class="headerlink" title="Setup与TearDown"></a>Setup与TearDown</h2><p>测试程序有时需要在测试之前进行额外的设置（setup）或在测试之后进行拆卸（teardown）。</p><p>比如说测试之前进行数据库的连接。</p><h3 id="TestMain"><a href="#TestMain" class="headerlink" title="TestMain"></a>TestMain</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSplit</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    s := <span class="string">"1200340056007800"</span></span><br><span class="line">    sep := <span class="string">"00"</span></span><br><span class="line">    sp := Split(s, sep)</span><br><span class="line">    sp0 := []<span class="keyword">string</span>&#123;<span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> ok := reflect.DeepEqual(sp, sp0); !ok &#123;</span><br><span class="line">        t.Fatalf(<span class="string">"测试失败，期望得到：%#v 实际得到：%#v"</span>, sp0, sp)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">"测试通过，得到：%#v"</span>, sp0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 测试之前的做一些设置</span></span><br><span class="line">    fmt.Println(<span class="string">"write setup code here..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 TestMain 使用了 flags，这里应该加上flag.Parse()</span></span><br><span class="line">    <span class="comment">// 执行测试，成功或失败会返回一个状态吗，退出需传入</span></span><br><span class="line">    retCode := m.Run()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试之后做一些拆卸工作</span></span><br><span class="line">    fmt.Println(<span class="string">"write teardown code here..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出测试</span></span><br><span class="line">    os.Exit(retCode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -v</span><br><span class="line">write setup code here...</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestSplit</span><br><span class="line">--- PASS: TestSplit (0.00s)</span><br><span class="line">    split_test.go:18: 测试通过，得到：[]string&#123;&quot;12&quot;, &quot;34&quot;, &quot;56&quot;, &quot;78&quot;, &quot;&quot;&#125;</span><br><span class="line">PASS</span><br><span class="line">write teardown code here...</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><h3 id="组测试的Setup与TearDown"><a href="#组测试的Setup与TearDown" class="headerlink" title="组测试的Setup与TearDown"></a>组测试的Setup与TearDown</h3><p>有时候我们可能需要为每个测试集设置Setup与Teardown：</p><p>编写测试函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试组的Setup与Teardown</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupTestCase</span><span class="params">(t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(<span class="string">"测试之前"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        t.Log(<span class="string">"测试之后"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">        str  <span class="keyword">string</span></span><br><span class="line">        sep  <span class="keyword">string</span></span><br><span class="line">        want []<span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tests := <span class="keyword">map</span>[<span class="keyword">string</span>]test&#123;</span><br><span class="line">        <span class="string">"split1"</span>: &#123;<span class="string">"a:b:c"</span>, <span class="string">":"</span>, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split2"</span>: &#123;<span class="string">"123321"</span>, <span class="string">"0"</span>, []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split3"</span>: &#123;<span class="string">"001200340056007800"</span>, <span class="string">"00"</span>, []<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试之前执行setup操作</span></span><br><span class="line">    teardownTestCase := setupTestCase(t)</span><br><span class="line">    <span class="comment">// 测试之后执行testdoen操作</span></span><br><span class="line">    <span class="keyword">defer</span> teardownTestCase(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> testName, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        get := Split(tc.str, tc.sep)</span><br><span class="line">        <span class="keyword">if</span> !reflect.DeepEqual(get, tc.want) &#123;</span><br><span class="line">            t.Fatalf(<span class="string">"测试%v失败，期望得到：%#v 实际得到：%#v"</span>, testName, tc.want, get)</span><br><span class="line">        &#125;</span><br><span class="line">        t.Logf(<span class="string">"测试%v通过，得到：%#v"</span>, testName, tc.want)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup</span><br><span class="line">--- PASS: TestGroup (0.00s)</span><br><span class="line">    split_test.go:10: 测试之前</span><br><span class="line">    split_test.go:39: 测试split1通过，得到：[]string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">    split_test.go:39: 测试split2通过，得到：[]string&#123;&quot;123321&quot;&#125;</span><br><span class="line">    split_test.go:39: 测试split3通过，得到：[]string&#123;&quot;&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;, &quot;78&quot;, &quot;&quot;&#125;</span><br><span class="line">    split_test.go:12: 测试之后</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.002s</span><br></pre></td></tr></table></figure><h3 id="子测试的Setup与TearDown"><a href="#子测试的Setup与TearDown" class="headerlink" title="子测试的Setup与TearDown"></a>子测试的Setup与TearDown</h3><p>有可能需要为每个子测试设置Setup与Teardown。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子测试的Setup与Teardown</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupSubTest</span><span class="params">(t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(<span class="string">"测试之前"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        t.Log(<span class="string">"测试之后"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">        str  <span class="keyword">string</span></span><br><span class="line">        sep  <span class="keyword">string</span></span><br><span class="line">        want []<span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tests := <span class="keyword">map</span>[<span class="keyword">string</span>]test&#123;</span><br><span class="line">        <span class="string">"split1"</span>: &#123;<span class="string">"a:b:c"</span>, <span class="string">":"</span>, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split2"</span>: &#123;<span class="string">"123321"</span>, <span class="string">"0"</span>, []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split3"</span>: &#123;<span class="string">"001200340056007800"</span>, <span class="string">"00"</span>, []<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> testName, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line"></span><br><span class="line">        t.Run(testName, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 子测试之前执行setup操作</span></span><br><span class="line">            teardownSubTest := setupSubTest(t)</span><br><span class="line">            <span class="comment">// 子测试之后执行testdoen操作</span></span><br><span class="line">            <span class="keyword">defer</span> teardownSubTest(t)</span><br><span class="line"></span><br><span class="line">            get := Split(tc.str, tc.sep)</span><br><span class="line">            <span class="keyword">if</span> !reflect.DeepEqual(get, tc.want) &#123;</span><br><span class="line">                t.Fatalf(<span class="string">"测试%v失败，期望得到：%#v 实际得到：%#v"</span>, testName, tc.want, get)</span><br><span class="line">            &#125;</span><br><span class="line">            t.Logf(<span class="string">"测试%v通过，得到：%#v"</span>, testName, tc.want)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子测试的Setup与Teardown</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupSubTest</span><span class="params">(t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(<span class="string">"测试之前"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        t.Log(<span class="string">"测试之后"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">        str  <span class="keyword">string</span></span><br><span class="line">        sep  <span class="keyword">string</span></span><br><span class="line">        want []<span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tests := <span class="keyword">map</span>[<span class="keyword">string</span>]test&#123;</span><br><span class="line">        <span class="string">"split1"</span>: &#123;<span class="string">"a:b:c"</span>, <span class="string">":"</span>, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split2"</span>: &#123;<span class="string">"123321"</span>, <span class="string">"0"</span>, []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split3"</span>: &#123;<span class="string">"001200340056007800"</span>, <span class="string">"00"</span>, []<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> testName, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line"></span><br><span class="line">        t.Run(testName, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 子测试之前执行setup操作</span></span><br><span class="line">            teardownSubTest := setupSubTest(t)</span><br><span class="line">            <span class="comment">// 子测试之后执行testdoen操作</span></span><br><span class="line">            <span class="keyword">defer</span> teardownSubTest(t)</span><br><span class="line"></span><br><span class="line">            get := Split(tc.str, tc.sep)</span><br><span class="line">            <span class="keyword">if</span> !reflect.DeepEqual(get, tc.want) &#123;</span><br><span class="line">                t.Fatalf(<span class="string">"测试%v失败，期望得到：%#v 实际得到：%#v"</span>, testName, tc.want, get)</span><br><span class="line">            &#125;</span><br><span class="line">            t.Logf(<span class="string">"测试%v通过，得到：%#v"</span>, testName, tc.want)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子测试的Setup与Teardown</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupSubTest</span><span class="params">(t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(<span class="string">"测试之前"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        t.Log(<span class="string">"测试之后"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">        str  <span class="keyword">string</span></span><br><span class="line">        sep  <span class="keyword">string</span></span><br><span class="line">        want []<span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tests := <span class="keyword">map</span>[<span class="keyword">string</span>]test&#123;</span><br><span class="line">        <span class="string">"split1"</span>: &#123;<span class="string">"a:b:c"</span>, <span class="string">":"</span>, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split2"</span>: &#123;<span class="string">"123321"</span>, <span class="string">"0"</span>, []<span class="keyword">string</span>&#123;<span class="string">"123321"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"split3"</span>: &#123;<span class="string">"001200340056007800"</span>, <span class="string">"00"</span>, []<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">"12"</span>, <span class="string">"34"</span>, <span class="string">"56"</span>, <span class="string">"78"</span>, <span class="string">""</span>&#125;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> testName, tc := <span class="keyword">range</span> tests &#123;</span><br><span class="line"></span><br><span class="line">        t.Run(testName, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 子测试之前执行setup操作</span></span><br><span class="line">            teardownSubTest := setupSubTest(t)</span><br><span class="line">            <span class="comment">// 子测试之后执行testdoen操作</span></span><br><span class="line">            <span class="keyword">defer</span> teardownSubTest(t)</span><br><span class="line"></span><br><span class="line">            get := Split(tc.str, tc.sep)</span><br><span class="line">            <span class="keyword">if</span> !reflect.DeepEqual(get, tc.want) &#123;</span><br><span class="line">                t.Fatalf(<span class="string">"测试%v失败，期望得到：%#v 实际得到：%#v"</span>, testName, tc.want, get)</span><br><span class="line">            &#125;</span><br><span class="line">            t.Logf(<span class="string">"测试%v通过，得到：%#v"</span>, testName, tc.want)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -v </span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split1</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split2</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split3</span><br><span class="line">--- PASS: TestGroup (0.00s)</span><br><span class="line">    --- PASS: TestGroup&#x2F;split1 (0.00s)</span><br><span class="line">        split_test.go:10: 测试之前</span><br><span class="line">        split_test.go:42: 测试split1通过，得到：[]string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">        split_test.go:12: 测试之后</span><br><span class="line">    --- PASS: TestGroup&#x2F;split2 (0.00s)</span><br><span class="line">        split_test.go:10: 测试之前</span><br><span class="line">        split_test.go:42: 测试split2通过，得到：[]string&#123;&quot;123321&quot;&#125;</span><br><span class="line">        split_test.go:12: 测试之后</span><br><span class="line">    --- PASS: TestGroup&#x2F;split3 (0.00s)</span><br><span class="line">        split_test.go:10: 测试之前</span><br><span class="line">        split_test.go:42: 测试split3通过，得到：[]string&#123;&quot;&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;, &quot;78&quot;, &quot;&quot;&#125;</span><br><span class="line">        split_test.go:12: 测试之后</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br><span class="line"></span><br><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -v -run &#x2F;split2</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestGroup&#x2F;split2</span><br><span class="line">--- PASS: TestGroup (0.00s)</span><br><span class="line">    --- PASS: TestGroup&#x2F;split2 (0.00s)</span><br><span class="line">        split_test.go:10: 测试之前</span><br><span class="line">        split_test.go:42: 测试split2通过，得到：[]string&#123;&quot;123321&quot;&#125;</span><br><span class="line">        split_test.go:12: 测试之后</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><h2 id="示例函数"><a href="#示例函数" class="headerlink" title="示例函数"></a>示例函数</h2><p>下面的代码是我们为<code>Split</code>函数编写的一个示例函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleSplit</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Split(<span class="string">"a:b:c"</span>, <span class="string">":"</span>))</span><br><span class="line">    fmt.Println(Split(<span class="string">"00110022003300"</span>, <span class="string">"00"</span>))</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// [a b c]</span></span><br><span class="line">    <span class="comment">// [ 11 22 33 ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -run Split -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   ExampleSplit</span><br><span class="line">--- PASS: ExampleSplit (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      golang&#x2F;study&#x2F;split      0.001s</span><br></pre></td></tr></table></figure><p>修改<code>Output</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> split</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleSplit</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Split(<span class="string">"a:b:c"</span>, <span class="string">":"</span>))</span><br><span class="line">    fmt.Println(Split(<span class="string">"00110022003300"</span>, <span class="string">"00"</span>))</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// [a b c]</span></span><br><span class="line">    <span class="comment">// [11 22 33]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jiang_wei@master01:~&#x2F;code&#x2F;go&#x2F;src&#x2F;golang&#x2F;study&#x2F;split$ go test -run Split -v</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   ExampleSplit</span><br><span class="line">--- FAIL: ExampleSplit (0.00s)</span><br><span class="line">got:</span><br><span class="line">[a b c]</span><br><span class="line">[ 11 22 33 ]</span><br><span class="line">want:</span><br><span class="line">[a b c]</span><br><span class="line">[11 22 33]</span><br><span class="line">FAIL</span><br><span class="line">exit status 1</span><br><span class="line">FAIL    golang&#x2F;study&#x2F;split      0.002s</span><br></pre></td></tr></table></figure><p>　</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>echo-request</title>
      <link href="/echo-request.html"/>
      <url>/echo-request.html</url>
      
        <content type="html"><![CDATA[<h1 id="request"><a href="#request" class="headerlink" title="request"></a>request</h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>将请求内容体绑定至 go 的结构体。默认绑定器支持基于<code>Content-Type</code>标头包含 <code>application/json</code>，<code>application/xml</code> 和 <code>application/x-www-form-urlencoded</code> 的数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/labstack/echo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`json:"name" form:"name" query:"name"`</span></span><br><span class="line">    Email <span class="keyword">string</span> <span class="string">`json:"email" form:"email" query:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    u := &amp;User&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> err = c.Bind(u); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.Any(<span class="string">"/user"</span>, getUser)</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><h3 id="json数据"><a href="#json数据" class="headerlink" title="json数据"></a>json数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl -X POST -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;&quot;name&quot;:&quot;江子牙&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;&#125;&#39;   192.168.32.69:1111&#x2F;user</span><br><span class="line">&#123;&quot;name&quot;:&quot;江子牙&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl -X POST  -d &#39;name&#x3D;alex&#39; -d &#39;email&#x3D;alex@123.com&#39;   192.168.32.69:1111&#x2F;user</span><br><span class="line">&#123;&quot;name&quot;:&quot;alex&quot;,&quot;email&quot;:&quot;alex@123.com&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl  http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user\?name\&#x3D;root\&amp;email\&#x3D;root@123.com</span><br><span class="line">&#123;&quot;name&quot;:&quot;root&quot;,&quot;email&quot;:&quot;root@123.com&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h2><h3 id="表单数据-1"><a href="#表单数据-1" class="headerlink" title="表单数据"></a>表单数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/labstack/echo"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    name := c.FormValue(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, name+<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.Any(<span class="string">"/user"</span>, getUser)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl  -d &#39;name&#x3D;1&#39; http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/labstack/echo"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    name := c.QueryParam(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, name+<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/user"</span>, getUser)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl   http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user?name&#x3D;echo</span><br><span class="line">echo</span><br></pre></td></tr></table></figure><h3 id="路径数据"><a href="#路径数据" class="headerlink" title="路径数据"></a>路径数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;github.com&#x2F;labstack&#x2F;echo&quot;</span><br><span class="line"></span><br><span class="line">func getUser(c echo.Context) (err error) &#123;</span><br><span class="line">    name :&#x3D; c.Param(&quot;phone&quot;)</span><br><span class="line">    return c.String(200, name+&quot;\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    e :&#x3D; echo.New()</span><br><span class="line">    e.GET(&quot;&#x2F;user&#x2F;:phone&quot;, getUser)</span><br><span class="line">    e.Logger.Debug(e.Start(&quot;:1111&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl   http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user&#x2F;13006293101</span><br><span class="line">13006293101</span><br></pre></td></tr></table></figure><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>Echo 没有内置的数据验证功能，但是可以通过 <code>Echo.Validator</code> 和<a href="https://github.com/avelino/awesome-go#validation" target="_blank" rel="noopener">第三方库</a>来注册一个数据验证器。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/go-playground/validator"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">    <span class="comment">// 定义一个user结构体</span></span><br><span class="line">    User <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name  <span class="keyword">string</span> <span class="string">`json:"name" validate:"required"`</span></span><br><span class="line">        Email <span class="keyword">string</span> <span class="string">`json:"email" validate:"required,email"`</span></span><br><span class="line">        Age   <span class="keyword">int</span>    <span class="string">`json:"age" validate:"gte=60"`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个自定义校验结构体</span></span><br><span class="line">    <span class="comment">// 字段为validator库下的Validate结构体</span></span><br><span class="line">    MyValidator <span class="keyword">struct</span> &#123;</span><br><span class="line">        validator *validator.Validate</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为自定义校验结构体添加Validate方法，因为echo下的Validator的类型是一个接口，要实现接口下的Validate方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mv *MyValidator)</span> <span class="title">Validate</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mv.validator.Struct(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validatorUser</span><span class="params">(c echo.Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    u := <span class="built_in">new</span>(User)</span><br><span class="line">    <span class="keyword">if</span> err = c.Bind(u); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.String(<span class="number">404</span>, fmt.Sprintf(<span class="string">"%v"</span>, err)+<span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err = c.Validate(u); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.String(<span class="number">404</span>, fmt.Sprintf(<span class="string">"%v"</span>, err)+<span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化一个自定义校验结构体的对象</span></span><br><span class="line">    <span class="comment">// 字段validator的值为：用validator库下的New方法构造一个Validate对象</span></span><br><span class="line">    myValidator := &amp;MyValidator&#123;</span><br><span class="line">        validator: validator.New(),</span><br><span class="line">    &#125;</span><br><span class="line">    e.Validator = myValidator</span><br><span class="line"></span><br><span class="line">    e.POST(<span class="string">"/user"</span>, validatorUser)</span><br><span class="line">    e.Logger.Debug(e.Start(<span class="string">":1111"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl -X POST -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;&#125;&#39;  http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user</span><br><span class="line">Key: &#39;User.Age&#39; Error:Field validation for &#39;Age&#39; failed on the &#39;gte&#39; tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]# curl -X POST -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;,&quot;age&quot;:67&#125;&#39;  http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user</span><br><span class="line">&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;,&quot;age&quot;:67&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]# curl -X POST -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail.com&quot;,&quot;age&quot;:6&#125;&#39;  http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user</span><br><span class="line">Key: &#39;User.Age&#39; Error:Field validation for &#39;Age&#39; failed on the &#39;gte&#39; tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 ~]# curl -X POST -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;&quot;name&quot;:&quot;jiang_wei&quot;,&quot;email&quot;:&quot;jw19961019@gmail&quot;,&quot;age&quot;:6&#125;&#39;  http:&#x2F;&#x2F;192.168.32.69:1111&#x2F;user</span><br><span class="line">Key: &#39;User.Email&#39; Error:Field validation for &#39;Email&#39; failed on the &#39;email&#39; tag</span><br><span class="line">Key: &#39;User.Age&#39; Error:Field validation for &#39;Age&#39; failed on the &#39;gte&#39; tag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go web框架 Echo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言标准库之http/template</title>
      <link href="/go-template.html"/>
      <url>/go-template.html</url>
      
        <content type="html"><![CDATA[<h1 id="template"><a href="#template" class="headerlink" title="template"></a>template</h1><h2 id="模版示例"><a href="#模版示例" class="headerlink" title="模版示例"></a>模版示例</h2><p>创建一个<code>hello.html</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &#123;&#123;.&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>创建服务器端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"html/template"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 解析指定文件生成模版对象</span></span><br><span class="line">    temp, err := template.ParseFiles(<span class="string">"./hello.html"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error："</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 利用给定数据渲染模板，并将结果写入w</span></span><br><span class="line">    _ = temp.Execute(w, <span class="string">"江子牙"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/sayhello"</span>, sayHello)</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error："</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl http:&#x2F;&#x2F;192.168.32.69:8888&#x2F;sayhello</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello 江子牙&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>我这里只是通过命令浏览，如果通过浏览器打开的话就只是显示<code>Hello 江子牙</code>。</p><h3 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h3><h3 id="点"><a href="#点" class="headerlink" title="点"></a>点</h3><p>模板语法都包含在<code></code>中间，其中<code>.</code>表示当前对象。</p><p>当我们传入一个结构体时，可以通过<code>.</code>来访问其成员字段。</p><p>修改<code>hello.html</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;My name is &#123;&#123;.Name&#125;&#125;, I&#39;m &#123;&#123;.Age&#125;&#125; years old and i am a &#123;&#123;.Sex&#125;&#125;. The phone number is &#123;&#123;.Phone&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>修改代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"html/template"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个用户结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name, Sex, Phone <span class="keyword">string</span></span><br><span class="line">    Age              <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 解析指定文件生成模版对象</span></span><br><span class="line">    temp, err := template.ParseFiles(<span class="string">"./hello.html"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error："</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化一个user</span></span><br><span class="line">    user := User&#123;</span><br><span class="line">        <span class="string">"JiangZiYa"</span>,</span><br><span class="line">        <span class="string">"boy"</span>,</span><br><span class="line">        <span class="string">"13006293101"</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入一个user对象，并将结果写入w</span></span><br><span class="line">    _ = temp.Execute(w, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/sayhello"</span>, sayHello)</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error："</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;/html&gt;[root@jw-etcd01 ~]# curl http://192.168.32.69:8888/sayhello</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;My name is JiangZiYa, I<span class="string">'m 23 years old and i am a boy. The phone number is 13006293101&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>同结构体一样，当我们传入的是一个<code>map</code>类型的数据时，也可以使用<code>.</code>根据<code>key</code>取值。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释必须紧挨着(可以多行)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;My name is &#123;&#123;.Name&#125;&#125;, I&#39;m &#123;&#123;.Age&#125;&#125; years old and i am a &#123;&#123;.Sex&#125;&#125;. The phone number is &#123;&#123;.Phone&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;&#x2F;* 这是一个注释 *&#x2F;&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;html&gt;[root@jw-etcd01 ~]# curl http:&#x2F;&#x2F;192.168.32.69:8888&#x2F;sayhello</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;My name is JiangZiYa, I&#39;m 23 years old and i am a boy. The phone number is 13006293101&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><p><code>pipeline</code>是指产生数据的操作。比如<code>.</code>操作等。Go的模板语法中支持使用管道符号<code>|</code>链接多个命令，用法和unix下的管道类似：<code>|</code>前面的命令会将运算结果(或返回值)传递给后一个命令的最后一个位置。</p><p><strong>注意：</strong>并不是只有使用了<code>|</code>才是pipeline。Go的模板语法中，<code>pipeline的</code>概念是传递数据，只要能产生数据的，都是<code>pipeline</code>。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$variable := pipeline</span><br></pre></td></tr></table></figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>修改<code>hello.html</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;My name is &#123;&#123;.Name&#125;&#125;, I&#39;m &#123;&#123;.Age&#125;&#125; years old and i am a &#123;&#123;.Sex&#125;&#125;. The phone number is &#123;&#123;.Phone&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;&#x2F;* 这是一个注释 *&#x2F;&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&#123;&#123;$isLogin :&#x3D; true&#125;&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123;$isLogin&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;if .Name &#125;&#125;&#123;&#123;.Name&#125;&#125; 已登录 &#123;&#123;end&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl http:<span class="comment">//192.168.32.69:8888/sayhello</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;My name is JiangZiYa, I<span class="string">'m 23 years old and i am a boy. The phone number is 13006293101&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p&gt;true&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;JiangZiYa 已登录 &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><h3 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h3><h3 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h3><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><h3 id="模版嵌套"><a href="#模版嵌套" class="headerlink" title="模版嵌套"></a>模版嵌套</h3>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>echo-routing</title>
      <link href="/echo-routing.html"/>
      <url>/echo-routing.html</url>
      
        <content type="html"><![CDATA[<h1 id="echo的路由"><a href="#echo的路由" class="headerlink" title="echo的路由"></a>echo的路由</h1><h2 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">routing</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"routing\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/routing"</span>, routing)</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当访问<code>/routing</code>时，会执行后面的<code>routing</code>函数，然后<code>return</code></p><p>测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl <span class="number">192.168</span><span class="number">.32</span><span class="number">.69</span>:<span class="number">1323</span>/routing</span><br><span class="line">routing</span><br></pre></td></tr></table></figure><h2 id="为所有method添加路由"><a href="#为所有method添加路由" class="headerlink" title="为所有method添加路由"></a>为所有method添加路由</h2><p>如果为某个特定的方法注册路由，用<code>Echo.methods(path string, h Handler)</code>，如果为所有http请求添加，可使用<code>Echo.Any(path string, h Handler)</code>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;github.com&#x2F;labstack&#x2F;echo&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func any(c echo.Context) error &#123;</span><br><span class="line">    return c.String(200, &quot;any http method\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    e :&#x3D; echo.New()</span><br><span class="line">    e.Any(&quot;&#x2F;any&quot;, any)</span><br><span class="line">    e.Logger.Fatal(e.Start(&quot;:1323&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl <span class="number">192.168</span><span class="number">.32</span><span class="number">.69</span>:<span class="number">1323</span>/any</span><br><span class="line">any http method</span><br><span class="line">[root@jw-etcd01 ~]# curl -X POST <span class="number">192.168</span><span class="number">.32</span><span class="number">.69</span>:<span class="number">1323</span>/any</span><br><span class="line">any http method</span><br></pre></td></tr></table></figure><h2 id="匹配所有"><a href="#匹配所有" class="headerlink" title="匹配所有"></a>匹配所有</h2><p>支持<code>*</code>来匹配0个或多个字符的<code>url path</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">all</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"匹配所有路由\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/users/*"</span>, all)</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;</span><br><span class="line">匹配所有路由</span><br><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;1&#x2F;</span><br><span class="line">匹配所有路由</span><br><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;1&#x2F;2&#x2F;</span><br><span class="line">匹配所有路由</span><br><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;anything</span><br><span class="line">匹配所有路由</span><br></pre></td></tr></table></figure><h2 id="路由匹配顺序"><a href="#路由匹配顺序" class="headerlink" title="路由匹配顺序"></a>路由匹配顺序</h2><p>当路由存在多种匹配条件时，会有优先顺序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">param</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"参数路径\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">static</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"固定路径\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">all</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.String(<span class="number">200</span>, <span class="string">"匹配所有路径\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.GET(<span class="string">"/users/1"</span>, static)</span><br><span class="line">    e.GET(<span class="string">"/users/*"</span>, all)</span><br><span class="line">    e.GET(<span class="string">"/users/:id"</span>, param)</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;1</span><br><span class="line">固定路径</span><br><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;2</span><br><span class="line">参数路径</span><br><span class="line">[root@jw-etcd01 ~]# curl 192.168.32.69:1323&#x2F;users&#x2F;1&#x2F;anyting</span><br><span class="line">匹配所有路径</span><br></pre></td></tr></table></figure><h2 id="组路由"><a href="#组路由" class="headerlink" title="组路由"></a>组路由</h2><p>把路由前缀相同的归为一组。这样可以达到为此类路由添加相同的功能(中间件)，比如认证，频率控制等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">valiadate</span><span class="params">(username, password <span class="keyword">string</span>, c echo.Context)</span> <span class="params">(b <span class="keyword">bool</span>, e error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">"jiang_wei"</span> &amp;&amp; password == <span class="string">"echo"</span> &#123;</span><br><span class="line">        _ = c.String(<span class="number">200</span>, <span class="string">"登录成功\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    e = c.String(<span class="number">401</span>, <span class="string">"用户名或密码错误\n"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>, e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    <span class="comment">// 创建一个前缀以admin开头的路由组</span></span><br><span class="line">    g := e.Group(<span class="string">"/admin"</span>)</span><br><span class="line">    <span class="comment">// 在组路由中添加中间件</span></span><br><span class="line">    g.Use(middleware.BasicAuth(valiadate))</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl -u jiang_wei:echo 192.168.32.69:1323&#x2F;admin&#x2F;</span><br><span class="line">登录成功</span><br><span class="line">[root@jw-etcd01 ~]# curl -u jiang_wei:echo 192.168.32.69:1323&#x2F;admin&#x2F;1</span><br><span class="line">登录成功</span><br><span class="line">[root@jw-etcd01 ~]# curl -u jiang_wei:echo 192.168.32.69:1323&#x2F;admin&#x2F;2</span><br><span class="line">登录成功</span><br><span class="line">[root@jw-etcd01 ~]# curl -u jiang_wei:ech 192.168.32.69:1323&#x2F;admin&#x2F;</span><br><span class="line">用户名或密码错误</span><br></pre></td></tr></table></figure><h2 id="路由命名"><a href="#路由命名" class="headerlink" title="路由命名"></a>路由命名</h2><h2 id="构造路由"><a href="#构造路由" class="headerlink" title="构造路由"></a>构造路由</h2><h2 id="路由列表"><a href="#路由列表" class="headerlink" title="路由列表"></a>路由列表</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line">    e.POST(<span class="string">"/users"</span>, createUser)</span><br><span class="line">    e.GET(<span class="string">"/users"</span>, findUser)</span><br><span class="line">    e.PUT(<span class="string">"/users"</span>, updateUser)</span><br><span class="line">    e.DELETE(<span class="string">"/users"</span>, deleteUser)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// json友好格式化输出</span></span><br><span class="line">    data, err := json.MarshalIndent(e.Routes(), <span class="string">""</span>, <span class="string">"    "</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;&#x2F;users&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;main.createUser&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;&#x2F;users&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;main.findUser&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;method&quot;: &quot;PUT&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;&#x2F;users&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;main.updateUser&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;method&quot;: &quot;DELETE&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;&#x2F;users&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;main.deleteUser&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go web框架 Echo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>echo-hello</title>
      <link href="/echo-hello.html"/>
      <url>/echo-hello.html</url>
      
        <content type="html"><![CDATA[<h1 id="echo快速开始"><a href="#echo快速开始" class="headerlink" title="echo快速开始"></a>echo快速开始</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># 创建echo_study文件夹</span><br><span class="line">mkdir echo_study</span><br><span class="line"></span><br><span class="line"># 进入</span><br><span class="line">cd echo_study/</span><br><span class="line"></span><br><span class="line"># 初始化当前文件夹，会创建<span class="keyword">go</span>.mod文件夹</span><br><span class="line"><span class="keyword">go</span> mod init echo_study</span><br><span class="line"></span><br><span class="line"># 查看初始化后的<span class="keyword">go</span>.mod文件内容，此时并没有任何依赖</span><br><span class="line">$ cat <span class="keyword">go</span>.mod</span><br><span class="line">module echo_study</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.12</span></span><br><span class="line"></span><br><span class="line"># 添加相关模块下载的代理，防止墙了拉不到</span><br><span class="line">export GOPROXY=https:<span class="comment">//goproxy.io</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">go</span>-get下载echo库</span><br><span class="line">$ <span class="keyword">go</span> get -u github.com/labstack/echo</span><br><span class="line"><span class="keyword">go</span>: finding github.com/labstack/echo v3<span class="number">.3</span><span class="number">.10</span>+incompatible</span><br><span class="line"><span class="keyword">go</span>: downloading github.com/labstack/echo v3<span class="number">.3</span><span class="number">.10</span>+incompatible</span><br><span class="line"><span class="keyword">go</span>: extracting github.com/labstack/echo v3<span class="number">.3</span><span class="number">.10</span>+incompatible</span><br><span class="line"><span class="keyword">go</span>: finding github.com/labstack/gommon v0<span class="number">.2</span><span class="number">.9</span></span><br><span class="line"><span class="keyword">go</span>: downloading github.com/labstack/gommon v0<span class="number">.2</span><span class="number">.9</span></span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/crypto latest</span><br><span class="line"><span class="keyword">go</span>: extracting github.com/labstack/gommon v0<span class="number">.2</span><span class="number">.9</span></span><br><span class="line"><span class="keyword">go</span>: downloading golang.org/x/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190701094942</span><span class="number">-4d</span>ef268fd1a4</span><br><span class="line"><span class="keyword">go</span>: extracting golang.org/x/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190701094942</span><span class="number">-4d</span>ef268fd1a4</span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190412213103</span><span class="number">-97732733099d</span></span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/net v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190404232315</span>-eb5bcb51f2a3</span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190602015325</span><span class="number">-4</span>c4f7f33c9ed</span><br><span class="line"><span class="keyword">go</span>: finding github.com/mattn/<span class="keyword">go</span>-colorable v0<span class="number">.1</span><span class="number">.2</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/mattn/<span class="keyword">go</span>-isatty v0<span class="number">.0</span><span class="number">.8</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/stretchr/objx v0<span class="number">.2</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/valyala/fasttemplate v1<span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/stretchr/testify v1<span class="number">.3</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/text v0<span class="number">.3</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190308221718</span>-c2843e01d9a2</span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190222072716</span>-a9d3bda3a223</span><br><span class="line"><span class="keyword">go</span>: finding github.com/pmezard/<span class="keyword">go</span>-difflib v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/davecgh/<span class="keyword">go</span>-spew v1<span class="number">.1</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/stretchr/objx v0<span class="number">.1</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/davecgh/<span class="keyword">go</span>-spew v1<span class="number">.1</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">go</span>: finding github.com/valyala/bytebufferpool v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: finding golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190215142949</span>-d0b11bdaac8a</span><br><span class="line"><span class="keyword">go</span>: downloading github.com/mattn/<span class="keyword">go</span>-colorable v0<span class="number">.1</span><span class="number">.2</span></span><br><span class="line"><span class="keyword">go</span>: downloading github.com/valyala/fasttemplate v1<span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">go</span>: downloading github.com/mattn/<span class="keyword">go</span>-isatty v0<span class="number">.0</span><span class="number">.8</span></span><br><span class="line"><span class="keyword">go</span>: downloading golang.org/x/net v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190404232315</span>-eb5bcb51f2a3</span><br><span class="line"><span class="keyword">go</span>: extracting github.com/mattn/<span class="keyword">go</span>-colorable v0<span class="number">.1</span><span class="number">.2</span></span><br><span class="line"><span class="keyword">go</span>: extracting github.com/valyala/fasttemplate v1<span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">go</span>: extracting github.com/mattn/<span class="keyword">go</span>-isatty v0<span class="number">.0</span><span class="number">.8</span></span><br><span class="line"><span class="keyword">go</span>: downloading github.com/valyala/bytebufferpool v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: extracting github.com/valyala/bytebufferpool v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: extracting golang.org/x/net v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190404232315</span>-eb5bcb51f2a3</span><br><span class="line"><span class="keyword">go</span>: downloading golang.org/x/text v0<span class="number">.3</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: extracting golang.org/x/text v0<span class="number">.3</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"># 下载完之后再次查看，可以看的自己添加了相关依赖</span><br><span class="line">$ cat <span class="keyword">go</span>.mod</span><br><span class="line">module echo_study</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.12</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/labstack/echo v3<span class="number">.3</span><span class="number">.10</span>+incompatible <span class="comment">// indirect</span></span><br><span class="line">        github.com/labstack/gommon v0<span class="number">.2</span><span class="number">.9</span> <span class="comment">// indirect</span></span><br><span class="line">        golang.org/x/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190701094942</span><span class="number">-4d</span>ef268fd1a4 <span class="comment">// indirect</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>新建一个<code>main.go</code>文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实例化一个echo对象</span></span><br><span class="line">    e := echo.New()</span><br><span class="line">    <span class="comment">// 为实例添加GET方法</span></span><br><span class="line">    e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="comment">// 返回状态码为200，字符串"hello world"</span></span><br><span class="line">            <span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"hello world"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在<code>main.go</code>文件夹下执行<code>go runserver main.go</code></p><p>屏幕输出：</p><p><img src="/uploads/echo/1.png" alt=""></p><p>打开浏览器，访问<code>本机ip:1323</code>，就可以看到屏幕打印<code>hello world</code>。</p><p><img src="/uploads/echo/2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> go web框架 Echo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Consul Agent</title>
      <link href="/consul-agent.html"/>
      <url>/consul-agent.html</url>
      
        <content type="html"><![CDATA[<h1 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h1><p><code>consul agent</code>是<code>consul</code>的核心流程。<code>agent</code>维护成员信息，注册服务，运行检查，响应查询等。<code>agent</code>必须在<code>consul</code>集群中的每个节点上运行。</p><p>任何<code>agent</code>都可以以两种模式之一运行：客户端或服务端。服务端节点承担额外责任，成为共识仲裁一部分。这些节点参与Raft选举，并在发生故障时提供强大的一致性和可用性。服务端节点的负担越大意味着它们通常应该在专用实例上运行 ， 它们比客户端节点更耗费资源。客户端节点构成群集的大部分，并且它们非常轻量级，因为它们与服务端节点连接以进行大多数操作，并且维护自己的状态非常少。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>可以使用命令行来启动<code>agent</code>。<code>agent</code>命令还有很多种可配置项，但是大多数都有合理的默认值。</p><p>运行<code>consul agent</code>，会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# consul agent -data-dir&#x3D;&#x2F;tmp&#x2F;consul</span><br><span class="line">&#x3D;&#x3D;&gt; Starting Consul agent...</span><br><span class="line">           Version: &#39;v1.5.3&#39;</span><br><span class="line">           Node ID: &#39;6e2b563a-c700-9b8d-3e5c-16d65e998543&#39;</span><br><span class="line">         Node name: &#39;jw-etcd02&#39;</span><br><span class="line">        Datacenter: &#39;dc1&#39; (Segment: &#39;&#39;)</span><br><span class="line">            Server: false (Bootstrap: false)</span><br><span class="line">       Client Addr: [127.0.0.1] (HTTP: 8500, HTTPS: -1, gRPC: -1, DNS: 8600)</span><br><span class="line">      Cluster Addr: 172.19.19.123 (LAN: 8301, WAN: 8302)</span><br><span class="line">           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false, Auto-Encrypt-TLS: false</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; Log data will now stream in as it occurs:</span><br><span class="line"></span><br><span class="line">    2019&#x2F;07&#x2F;30 11:27:15 [INFO] serf: EventMemberJoin: jw-etcd02 172.19.19.123</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>Node name</code>：这是<code>agent</code>唯一的节点名称。默认情况下。这是机器的主机名，但也可以通过<code>-node</code>对其自定义。</li><li><code>Datacenter</code>：这是配置<code>agent</code>程序以运行的数据中心。<code>consul</code>为多个数据中心提供一流的支持; 但是，要高效工作，必须将每个节点配置为报告其数据中心。该<code>-datacenter</code>标志可用于设置数据中心。对于单DC配置，默认为<code>dc1</code>。</li><li><code>Server</code>：这表示<code>agent</code>是以服务端还是客户端模式运行。服务器节点具有参与共识仲裁，存储群集状态和处理查询的额外负担。另外，服务器可以处于<code>引导</code>模式。多个服务器无法处于引导模式，因为这会使群集处于不一致状态。</li><li><code>Client Addr</code>：这是用于<code>agent</code>的客户端接口的地址。这包括HTTP和DNS接口的端口。默认情况下，它仅绑定到localhost。如果更改此地址或端口，则必须<code>-http-addr</code> 在运行命令时指定。</li><li><code>Cluster Addr</code>：这是用于群集中的<code>consul agent</code>之间通信的地址和端口集。并非集群中的所有<code>consul agent</code>都必须使用相同的端口，但所有其他节点都必须可以访问此地址。</li></ul><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><p>可以优雅的停止和强制停止。要正常暂停<code>agent</code>，请向进程发送中断信号（通常 <code>Ctrl-C</code>来自终端或正在运行<code>kill -9 consul_pid</code>）。正常退出时，代理首先通知它打算离开集群的集群。这样，其他集群成员就会通知集群该节点已离开。</p><p>或者，您可以通过向其发送终止信号来强制终止<code>agent</code>。当力量被杀时，<code>agent</code>即结束。群集的其余部分最终（通常在几秒钟内）检测到节点已经死亡，并通知群集节点已发生故障。</p><p>特别重要的是允许服务器节点优雅地离开，以便在服务器离开共识仲裁时对可用性的影响最小。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>首次启动时，它不知道群集中的任何其他节点。要发现它的对等体，它必须<em>加入</em>群集。这可以通过<code>join</code>命令完成， 也可以通过提供正确的配置来启动时自动加入。一旦节点加入，该信息将被闲置到整个集群，这意味着所有节点最终将彼此了解。如果代理是服务器，则现有服务器将开始复制到新节点。</p><p>在网络故障的情况下，其他节点可能无法访问某些节点。在这种情况下，无法访问的节点被标记为失败。无法区分网络故障和代理程序崩溃，因此两种情况的处理方式相同。将节点标记为失败后，将在服务目录中更新此信息。</p><p>当节点离开时，它指定了它的意图，并且集群将该节点标记为已离开。与失败的情况不同，节点提供的所有服务都会立即取消注册。如果<code>agent</code>是服务器，则将停止对其的复制。</p><p>为了防止死节点的累积，<code>consul</code>将自动从目录中删除死节点。这个过程叫做收割。目前这是在72小时的可配置间隔内完成的（由于其在停电情况下的后果，因此不建议更改收割间隔）。收割类似于离开，导致所有相关服务被取消注册。</p>]]></content>
      
      
      <categories>
          
          <category> Consul </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>consul集群搭建</title>
      <link href="/consul-cluster-binding.html"/>
      <url>/consul-cluster-binding.html</url>
      
        <content type="html"><![CDATA[<h1 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>可以去官网下载，也可以通过go环境编译成二进制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装版本</span><br><span class="line">CONSUL_VERSION&#x3D;&quot;1.5.3&quot;</span><br><span class="line"></span><br><span class="line"># 下载文件</span><br><span class="line">curl --silent --remote-name https:&#x2F;&#x2F;releases.hashicorp.com&#x2F;consul&#x2F;$&#123;CONSUL_VERSION&#125;&#x2F;consul_$&#123;CONSUL_VERSION&#125;_linux_amd64.zip</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将下载好的zip文件通过<code>unzip</code>命令解压缩。之后将二进制文件移动到<code>/usr/local/bin/</code>目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 解压缩</span><br><span class="line">unzip consul_$&#123;CONSUL_VERSION&#125;_linux_amd64.zip</span><br><span class="line"></span><br><span class="line"># 移动</span><br><span class="line">mv consul &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><h2 id="配置自动补全"><a href="#配置自动补全" class="headerlink" title="配置自动补全"></a>配置自动补全</h2><p>配置完成后，按<code>tab</code>键补全的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 home]# consul </span><br><span class="line">acl          connect      force-leave  keygen       lock         members      rtt          validate     </span><br><span class="line">agent        debug        info         keyring      login        monitor      services     version      </span><br><span class="line">catalog      event        intention    kv           logout       operator     snapshot     watch        </span><br><span class="line">config       exec         join         leave        maint        reload       tls </span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 home]# consul kv </span><br><span class="line">delete  export  get     import  put</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consul -autocomplete-install</span><br><span class="line">complete -C &#x2F;usr&#x2F;local&#x2F;bin&#x2F;consul consul</span><br></pre></td></tr></table></figure><h2 id="编写systemd服务"><a href="#编写systemd服务" class="headerlink" title="编写systemd服务"></a>编写systemd服务</h2><p>编写<code>systemd</code>服务之后，方便服务的启动与暂停。</p><p>创建consul服务文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;consul.service</span><br></pre></td></tr></table></figure><p>将配置添加到此文件中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;&quot;HashiCorp Consul - A service mesh solution&quot;</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;www.consul.io&#x2F;</span><br><span class="line">Requires&#x3D;network-online.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line">ConditionFileNotEmpty&#x3D;&#x2F;etc&#x2F;consul&#x2F;consul.d&#x2F;consul.hcl</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;root&#x2F;consul&#x2F;consul agent -config-dir&#x3D;&#x2F;etc&#x2F;consul&#x2F;consul.d&#x2F;</span><br><span class="line">ExecReload&#x3D;&#x2F;root&#x2F;consul&#x2F;consul reload</span><br><span class="line">KillMode&#x3D;process</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>Description</code>：描述<code>consul</code>服务</li><li><code>Documentation</code>：连接到<code>consul</code>文档</li><li><code>ConditionFileNotEmpty</code>：在启动服务之前，检查配置文件是否为空</li><li><code>ExecStart</code>：启动<code>consul</code>服务的命令</li><li><code>ExecReload</code>：向<code>consul</code>发送重载信号以触发<code>consul</code>中的重新加载配置</li><li><code>KillMode</code>：将 <code>consul</code>视为一个进程</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>和<code>etcd</code>类似，都可以通过命令行、环境变量、配置文件来启动<code>consul</code>。</p><p>更多配置请参照官网。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="一般配置"><a href="#一般配置" class="headerlink" title="一般配置"></a>一般配置</h4><p>在以下位置创建配置文件：<code>/etc/consul/consul.d/consul.hcl</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建配置文件文件夹</span><br><span class="line">mkdir -p &#x2F;etc&#x2F;consul&#x2F;consul.d</span><br><span class="line"></span><br><span class="line"># 编辑配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;consul&#x2F;consul.d&#x2F;consul.hcl</span><br><span class="line">datacenter &#x3D; &quot;dc1&quot;</span><br><span class="line">data_dir &#x3D; &quot;&#x2F;etc&#x2F;consul&#x2F;data&#x2F;&quot;</span><br><span class="line">encrypt &#x3D; &quot;4iwDbM&#x2F;GTs62B020zTUdUQ&#x3D;&#x3D;&quot;</span><br><span class="line">client_addr&#x3D;&quot;172.19.19.124 127.0.0.1&quot;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>datacenter</code>：集群的数据中心，多个集群可以同时使用多个数据中心。我们只部署一个集群就使用同一个数据中心</li><li><code>data_dir</code>：<code>agent</code>存储状态的数据目录</li><li><code>encrypt</code>：指定用于加密<code>consul</code>网络流量的base64密钥，可以用<code>consul keygen</code>生存或者自己通过其他方式生成</li><li><code>client_addr</code>：<code>consul</code>将绑定客户端接口的地址，包括HTTP和DNS服务器。默认是<code>127.0.0.1</code>，可以将其设置为以空格分割的列表</li></ul><h4 id="集群自动加入"><a href="#集群自动加入" class="headerlink" title="集群自动加入"></a>集群自动加入</h4><p>我这里是因为搭建了<code>dnsmasq</code>dns服务器。在该dns服务器的机器上配置了<code>hosts</code>，这样可以通过它来管理和控制内网的dns。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 consul.d]# cat &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line"># add consul</span><br><span class="line">172.19.19.124 test-consul.com</span><br></pre></td></tr></table></figure><p>该配置表示，该内网中的所有用户访问<code>test-consul.com</code>时跳转到<code>172.19.19.124</code>。也可以称为<code>dns 劫持</code>。</p><p>该<code>retry_join</code>参数允许使用通过DNS地址，IP地址或使用云自动连接访问的公共Consul服务器配置所有Consul代理以自动形成群集。这消除了手动将Consul集群节点连接在一起的需要。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retry_join &#x3D; [&quot;test-consul.com&quot;]</span><br></pre></td></tr></table></figure><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>在以下位置创建配置文件<code>/etc/consul/consul.d/server.hcl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 consul.d]# cat server.hcl </span><br><span class="line">server &#x3D; true</span><br><span class="line">bootstrap_expect &#x3D; 2</span><br><span class="line">ui &#x3D; true</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><code>server</code>：此标志用于控制该<code>agent</code>是处于服务器模式还是客户端模式</li><li><code>bootstrap_expect</code>：此标志提供数据中心中预期的服务器数。不应提供此值，或者该值必须与群集中的其他服务器一致。和<code>etcd</code>一样推荐使用单数。我这里因为演示不搭建那么多机器</li><li><code>ui</code>：<code>consul</code>自带的一个web界面。应该考虑选定的Consul机器而不是所有机器上运行Consul UI</li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Consul客户端通常需要Consul服务器所需的配置子集。所有Consul客户端都可以使用配置服务器时创建的文件<code>consul.hcl</code>。</p><h2 id="启动与测试"><a href="#启动与测试" class="headerlink" title="启动与测试"></a>启动与测试</h2><p>通过之前编写的<code>systmed</code>服务来控制<code>consul</code>服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable consul</span><br><span class="line">systemctl start consul</span><br><span class="line">systemctl status consul</span><br><span class="line">systemctl restart consul</span><br></pre></td></tr></table></figure><h3 id="查看集群成员状态"><a href="#查看集群成员状态" class="headerlink" title="查看集群成员状态"></a>查看集群成员状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 consul]# consul members </span><br><span class="line">Node       Address             Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">jw-etcd01  172.19.19.122:8301  alive   server  1.5.3  2         dc1  &lt;all&gt;</span><br><span class="line">jw-etcd03  172.19.19.124:8301  alive   server  1.5.3  2         dc1  &lt;all&gt;</span><br><span class="line">jw-etcd02  172.19.19.123:8301  alive   client  1.5.3  2         dc1  &lt;default&gt;</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>在<code>jw-etcd01</code>(server)机器上<code>put</code>一个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 consul.d]# consul kv put name jiang_wei</span><br><span class="line">Success! Data written to: name</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>在<code>jw-etcd02</code>(client)机器上<code>get</code>一个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 consul]# consul kv get name</span><br><span class="line">jiang_wei</span><br></pre></td></tr></table></figure><p>可以看出，成功。</p><h2 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h2><p> 因为上面配置了<code>ui</code>，还可以通过web界面来看服务状态。</p><p>浏览器访问：<code>http://172.19.19.124:8500/ui/</code>。</p><p>给几个图，自己体会：</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><img src="/uploads/server%E8%8A%82%E7%82%B9.jpg" alt=""></p><h3 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h3><p><img src="/uploads/%E9%9B%86%E7%BE%A4.jpg" alt=""></p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p><img src="/uploads/key.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Consul </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的并发</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的并发"><a href="#go语言的并发" class="headerlink" title="go语言的并发"></a>go语言的并发</h1><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><ul><li>并发：同一时间段内执行多个任务</li><li>并行：同一时刻执行多个任务 </li></ul><p>go语言的并发通过<code>goroutine</code>实现。<code>goroutine</code>类似于线程，属于用户态的线程，我们可以根据需要创建成千上万的<code>goroutine</code>并发工作。</p><p><code>goroutine</code>是由go语言运行时调度完成，而线程是由操作系统调度完成。</p><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p>Go程序中使用go关键字为一个函数创建一个<code>goroutine</code>。一个<code>goroutine</code>对应一个(任务)函数。</p><h3 id="启动单个goroutine"><a href="#启动单个goroutine" class="headerlink" title="启动单个goroutine"></a>启动单个goroutine</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动goroutine</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello go1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个任务</span></span><br><span class="line">    <span class="keyword">go</span> hello()</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"main stop"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"hello main "</span>)</span><br><span class="line">    <span class="comment">// 创建一个goroutine需要时间，等一下他</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h3><p>用 time模块的方法等待 <code>goroutine</code>结束太生硬，有一个类型能实现优雅的等待</p><ul><li>Add(i)：计数器+1</li><li>Done()：计数器-1，最好用defer语句</li><li>Wait()：等待　　</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构体 实现优雅的等待</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello go1"</span>)</span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"hello go2"</span>)</span><br><span class="line">    <span class="comment">// 标记该任务已完成 最好用defer语句，保证goroutine出错或异常计数器减1。</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"main stop"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记一个任务</span></span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> hello()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"hello main "</span>)</span><br><span class="line">    <span class="comment">// 阻塞，一直等待所有的goroutine结束</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动多个goroutine"><a href="#启动多个goroutine" class="headerlink" title="启动多个goroutine"></a>启动多个goroutine</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> hello(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">"启动多个goroutine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> hello(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">"启动多个goroutine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多执行几次代码可以发现，每次打印的顺序都不一致，因为这十个<code>goroutine</code>是并发执行的，而<code>goroutine</code>调度又是随机的。</p><h3 id="goroutine与线程"><a href="#goroutine与线程" class="headerlink" title="goroutine与线程"></a>goroutine与线程</h3><h4 id="可增长的栈"><a href="#可增长的栈" class="headerlink" title="可增长的栈"></a>可增长的栈</h4><p>OS线程（操作系统线程）一般都有固定的栈内存（通常为2MB）,一个<code>goroutine</code>的栈在其生命周期开始时只有很小的栈（典型情况下2KB），<code>goroutine</code>的栈不是固定的，他可以按需增大和缩小，<code>goroutine</code>的栈大小限制可以达到1GB，虽然极少会用到这个大。所以在Go语言中一次创建十万左右的<code>goroutine</code>也是可以的。</p><h4 id="goroutine调度"><a href="#goroutine调度" class="headerlink" title="goroutine调度"></a>goroutine调度</h4><p>OS线程是由OS内核来调度的，<code>goroutine</code>则是由Go运行时（runtime）自己的调度器调度的，这个调度器使用一个称为m:n调度的技术（复用/调度m个goroutine到n个OS线程）。goroutine的调度不需要切换内核语境，所以调用一个goroutine比调度一个线程成本低很多。</p><h4 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h4><p>Go运行时的调度器使用<code>GOMAXPROCS</code>参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的CPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上（GOMAXPROCS是m:n调度中的n）。</p><p>Go语言中可以通过<code>runtime.GOMAXPROCS()</code>函数设置当前程序并发时占用的CPU逻辑核心数。</p><p>Go1.5版本之前，默认使用的是单核心执行。Go1.5版本之后，默认使用全部的CPU逻辑核心数。</p><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>单纯的将函数并发执行是没有意义的，函数与函数件需要交换数据才能体现并行函数的意义。</p><p>虽然可以使用共享内存进行数据交换，但是共享内存在不同的<code>goroutine</code>中容易发生竞态问题。为了保证数据交换的正确性和安全性。必须使用互斥量对内存的进行加锁处理，这种做法势必造成性能问题。</p><p>go语言的并发模型是CSP，提倡通过通信共享内存，而不是通过共享内存实现通信。</p><p>如果说<code>groutine</code>是go语言并发的执行体，<code>channel</code>就是执行体之间的连接，<code>channel</code>是可以让一个<code>goroutine</code>发送特定值到另一个<code>goroutine</code>的通信机制。</p><p>Go语言中，<code>channel</code>是一种引用的数据类型。像一个队列，遵循先入先出的规则，保证收发数据的顺序。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 通道名 <span class="keyword">chan</span> 元素类型</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// channel</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个ch1变量，是一个channel类型，这个channel内部传递的数据是int类型</span></span><br><span class="line">    <span class="comment">// channel是引用类型</span></span><br><span class="line">    <span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> ch2 <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"ch1："</span>, ch1)</span><br><span class="line">    fmt.Println(<span class="string">"ch2："</span>, ch2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channel操作"><a href="#channel操作" class="headerlink" title="channel操作"></a>channel操作</h3><h4 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h4><p>将一个值发送到通道中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 往通道中存取一个10</span></span><br><span class="line">ch &lt;- <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="接受"><a href="#接受" class="headerlink" title="接受"></a>接受</h4><p>从一个通道中取值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出值赋值给一个变量</span></span><br><span class="line">num := &lt;- ch</span><br><span class="line"><span class="comment">// 取出一个值，但是忽略</span></span><br><span class="line">&lt;- ch</span><br></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>通过内置函数<code>close()</code>来关闭通道：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(ch)</span><br></pre></td></tr></table></figure><p>通道是可以被垃圾回收机制回收的，和文件关闭不一样，那是必须做的，但关闭通道不是必须的。</p><ul><li>关闭之后可以再取值，如果有值取出来；如果空了，只是为对应类型的零值值而已。</li><li>关闭之后不可以再次发送值，会panic。</li><li>关闭之后不能再关闭。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    fmt.Println(<span class="string">"ch3："</span>, ch3)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通道的操作：发送、接受、关闭</span></span><br><span class="line">    <span class="comment">// 发送和接收  &lt;-</span></span><br><span class="line">    ch3 &lt;- <span class="string">"1"</span><span class="comment">// 把10发送的通道中</span></span><br><span class="line">    recv1 := &lt;- ch3    <span class="comment">// 从通道中取出10，保存到变量中</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"recv1："</span>, recv1)</span><br><span class="line">    ch3 &lt;- <span class="string">"2"</span></span><br><span class="line">    recv2 := &lt;- ch3</span><br><span class="line">    fmt.Println(<span class="string">"recv2："</span>, recv2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭通道</span></span><br><span class="line">    <span class="built_in">close</span>(ch3)</span><br><span class="line">    <span class="comment">// 1、关闭之后可以再取值，只是为对应类型的nli值而已</span></span><br><span class="line">    fmt.Println(&lt;-ch3)</span><br><span class="line">    <span class="comment">// 2、关闭之后不可以再次发送值，会panic</span></span><br><span class="line">    <span class="comment">// 3、关闭之后不能再关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h3><h4 id="无缓冲通道"><a href="#无缓冲通道" class="headerlink" title="无缓冲通道"></a>无缓冲通道</h4><p>像四百米接力赛跑一样，棒交接的时候必须有人接棒，不然就会一直阻塞在那。</p><p>这种通道叫无缓冲通道，也称同步通道，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span>  &#123;</span><br><span class="line">    res := &lt;- ch</span><br><span class="line">    fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> recv(ch)</span><br><span class="line">    ch &lt;- <span class="literal">true</span></span><br><span class="line">    fmt.Println(<span class="string">"mai stop"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有缓冲通道"><a href="#有缓冲通道" class="headerlink" title="有缓冲通道"></a>有缓冲通道</h4><p>拿我们生活的例子，快递员送小区的快递，如果他打电话通知你领取，你不在，他还是会放进去，不会等你，这个丰巢快递柜的格子就是通道的容量。</p><p>只要通道的容量大于０，该通道就是有缓冲的通道，容量表示该通道最多能存放元素的数量。超过容量也会阻塞。</p><p>我们可以用 <code>len()</code>获取通道内元素的数量，使用 <code>cap()</code>函数获取通道的容量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span>  &#123;</span><br><span class="line">    res := &lt;- ch</span><br><span class="line">    fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line">    ch &lt;- <span class="literal">false</span></span><br><span class="line">    fmt.Println(<span class="string">"长度："</span>, <span class="built_in">len</span>(ch), <span class="string">" 容量："</span>, <span class="built_in">cap</span>(ch))</span><br><span class="line">    <span class="keyword">go</span> recv(ch)</span><br><span class="line">    ch &lt;- <span class="literal">true</span></span><br><span class="line">    fmt.Println(<span class="string">"main stop"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收值判断通道是否关闭"><a href="#接收值判断通道是否关闭" class="headerlink" title="接收值判断通道是否关闭"></a>接收值判断通道是否关闭</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> send(ch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用的for循环接收</span></span><br><span class="line">    <span class="comment">//for  &#123;</span></span><br><span class="line">    <span class="comment">//ret, ok := &lt;- ch</span></span><br><span class="line">    <span class="comment">//if !ok &#123;</span></span><br><span class="line">    <span class="comment">//break</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//fmt.Println(ret)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用for range接收</span></span><br><span class="line">    <span class="keyword">for</span> ret := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><ul><li>是单向的，也就是说，只能接受或者只能发送。</li><li>多用于函数当中，限制此函数对通道的操作。</li></ul><h3 id="select多路复用"><a href="#select多路复用" class="headerlink" title="select多路复用"></a>select多路复用</h3><p>同一时刻对多个通道进行操作(存值和取值)</p><h2 id="并发安全和锁"><a href="#并发安全和锁" class="headerlink" title="并发安全和锁"></a>并发安全和锁</h2><p>先来看一个示例，多个goroutine同时对同一个变量进行修改：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局变量</span></span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，对x进行循环递增操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++ &#123;</span><br><span class="line">        x++</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启两个goroutine，同时对变量x进行修改。</span></span><br><span class="line">    fmt.Println(<span class="string">"开启"</span>)</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> add()</span><br><span class="line">    <span class="keyword">go</span> add()</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">"结束"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"x的值为："</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行多次结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">开启</span><br><span class="line">结束</span><br><span class="line">x的值为： <span class="number">6731</span></span><br><span class="line"></span><br><span class="line">开启</span><br><span class="line">结束</span><br><span class="line">x的值为： <span class="number">5950</span></span><br><span class="line"></span><br><span class="line">开启</span><br><span class="line">结束</span><br><span class="line">x的值为： <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>可以看出来，会对数据造成混乱，所以需要对数据进行加锁。</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>定义一个互斥锁<code>sync.Mutex</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局变量</span></span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个互斥锁</span></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，对x进行循环递增操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        lock.Lock()</span><br><span class="line">        x++</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        lock.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启两个goroutine，同时对变量x进行修改。</span></span><br><span class="line">    fmt.Println(<span class="string">"开启"</span>)</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> add()</span><br><span class="line">    <span class="keyword">go</span> add()</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">"结束"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"x的值为："</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行多次的结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开启</span><br><span class="line">结束</span><br><span class="line">x的值为： <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">开启</span><br><span class="line">结束</span><br><span class="line">x的值为： <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>可以看出，执行结果都是一样的，加锁后，同一时刻只能有一个<code>goroutine</code>抢到这把锁，从而执行对数据的修改。</p><h3 id="读写互斥锁"><a href="#读写互斥锁" class="headerlink" title="读写互斥锁"></a>读写互斥锁</h3><p>互斥锁是完全互斥的，但是有时候我们只是单纯的读那个资源，加锁是没必要的。对于读多写少的场景，go语言提供了另一种锁，称为读写互斥锁。也就是<code>sync</code>包的<code>RWMutex</code>类型。</p><p>先来看一个加互斥锁的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    x    <span class="keyword">int</span></span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    wg   sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个读方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 加互斥锁</span></span><br><span class="line">    lock.Lock()</span><br><span class="line">    <span class="comment">// 模拟读消耗的时间为1毫秒</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 解互斥锁</span></span><br><span class="line">    lock.Unlock()</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个写方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 加互斥锁</span></span><br><span class="line">    lock.Lock()</span><br><span class="line">    <span class="comment">// 修改x的值</span></span><br><span class="line">    x++</span><br><span class="line">    <span class="comment">// 模拟写操作的时间为10毫秒</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 解互斥锁</span></span><br><span class="line">    lock.Unlock()</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 程序开始时间</span></span><br><span class="line">    start := time.Now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟写场景,10次</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> write()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟读场景，读10000万次</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> read()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个goroutine都执行完毕</span></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序结束时间</span></span><br><span class="line">    end := time.Now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读写共耗时</span></span><br><span class="line">    fmt.Println(end.Sub(start))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行多次的结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.21610598s</span></span><br><span class="line"><span class="number">11.234064043s</span></span><br><span class="line"><span class="number">11.181700508s</span></span><br></pre></td></tr></table></figure><p>很显然，这是加锁不合理的。因为我对数据的修改只有10次，1次消耗10毫秒，修改10次也就100毫秒，也就是0.1秒。对数据的读是不对数据进行修改的，1次消耗1毫秒，1万次就是10000毫秒。也就是10秒。所以，程序最终的耗时是以读的消耗为准。但不应该如此。这时候就用到了读写互斥锁。</p><p>读写互斥锁的特点：</p><ul><li>可以随便读，多个goroutine同时读，这将可以大大节省时间。</li><li>一个<code>goroutine</code>在写的时候，其余<code>goroutine</code>啥也不能干，不能读也不能写。这就同普通互斥锁一样，保证了数据安全。</li></ul><p>修改代码，改用读写互斥锁：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    x      <span class="keyword">int</span></span><br><span class="line">    rwlock sync.RWMutex</span><br><span class="line">    wg     sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个读方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 加读锁</span></span><br><span class="line">    rwlock.RLock()</span><br><span class="line">    <span class="comment">// 模拟读消耗的时间为1毫秒</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 解读锁</span></span><br><span class="line">    rwlock.RUnlock()</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个写方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 加写锁</span></span><br><span class="line">    rwlock.Lock()</span><br><span class="line">    <span class="comment">// 修改x的值</span></span><br><span class="line">    x++</span><br><span class="line">    <span class="comment">// 模拟写操作的时间为10毫秒</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 解写锁</span></span><br><span class="line">    rwlock.Unlock()</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 程序开始时间</span></span><br><span class="line">    start := time.Now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟写场景,10次</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> write()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟读场景，读10000万次</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> read()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个goroutine都执行完毕</span></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序结束时间</span></span><br><span class="line">    end := time.Now()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读写共耗时</span></span><br><span class="line">    fmt.Println(end.Sub(start))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过此结果(效果很明显)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">117.891745</span>ms</span><br><span class="line"><span class="number">119.4733</span>ms</span><br><span class="line"><span class="number">119.208284</span>ms</span><br><span class="line"><span class="number">113.77037</span>ms</span><br></pre></td></tr></table></figure><p>消耗的时间将近快于100倍。</p><p>只有在读的操作远大于写的操作时，使用读写锁才能提高性能和效率。</p><h3 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h3><h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><h3 id="atomic包"><a href="#atomic包" class="headerlink" title="atomic包"></a>atomic包</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像操作</title>
      <link href="/docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C.html"/>
      <url>/docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><p>docker运行容器之前需要本地存在对应的镜像，如果镜像不存在，docker会尝试从默认的镜像仓库拉取。也可以通过配置使用自定义的镜像仓库。</p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>docker官方的hub仓库已经提供了数十万个镜像供大家开放下载。</p><p>完整的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull  name[:tag|@digest]</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：镜像仓库名字，用来区分镜像</li><li><code>tag</code>：镜像的标签，也可以理解为版本</li><li><code>digest</code>：镜像的摘要，很少用它来下载镜像</li></ul><p>下面举几个例子：</p><p><strong>如果没有指定tag会默认下载tag为<code>latest</code>镜像：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><p><strong>下载tag为18.04的ubuntu镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure><p>严格来讲。还需要加仓库服务器(<code>registry</code>)，因为如果不指定仓库服务器会存在镜像同名现象。</p><p>其实，上面两条命令相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.hub.docker.com&#x2F;ubuntu:18.04</span><br></pre></td></tr></table></figure><p><strong>如果我们要下载私人服务器的镜像或者网易风巢的镜像。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull myregistry.com:18005&#x2F;ubuntu:18.04</span><br><span class="line">docker pull hub.c.163.com&#x2F;public&#x2F;ubuntu:18.04</span><br></pre></td></tr></table></figure><p>镜像下载到本地后，就可以利用该镜像创建一个容器，在其中执行bash命令，执行打印<code>Hello Docker</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~&#x2F;jiangwei&#x2F;compose-1.24.1&#x2F;bin# docker run -it sw64&#x2F;deepin bash</span><br><span class="line">dircolors: no SHELL environment variable, and no shell type option given</span><br><span class="line">root@10920811956b:&#x2F;# echo &quot;Hello Docker&quot;</span><br><span class="line">Hello Docker</span><br><span class="line">root@10920811956b:&#x2F;# exit</span><br><span class="line">exit</span><br><span class="line">root@sw1:~&#x2F;jiangwei&#x2F;compose-1.24.1&#x2F;bin#</span><br></pre></td></tr></table></figure><h2 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h2><h3 id="列出所有镜像"><a href="#列出所有镜像" class="headerlink" title="列出所有镜像"></a>列出所有镜像</h3><p>可以使用命令来获取所有镜像：<code>docker images</code> or <code>docker image ls</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@104 ~]# docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">golang                               1.12.7-alpine       6b21b4c6e7a3        12 days ago         350MB</span><br><span class="line">k8s.gcr.io&#x2F;kube-proxy                v1.14.3             004666307c5b        6 weeks ago         82.1MB</span><br><span class="line">k8s.gcr.io&#x2F;kube-controller-manager   v1.14.3             ac2ce44462bc        6 weeks ago         158MB</span><br><span class="line">k8s.gcr.io&#x2F;kube-apiserver            v1.14.3             9946f563237c        6 weeks ago         210MB</span><br><span class="line">k8s.gcr.io&#x2F;kube-scheduler            v1.14.3             953364a3ae7a        6 weeks ago         81.6MB</span><br><span class="line">k8s.gcr.io&#x2F;coredns                   1.3.1               eb516548c180        6 months ago        40.3MB</span><br><span class="line">k8s.gcr.io&#x2F;etcd                      3.3.10              2c4adeb21b4f        7 months ago        258MB</span><br><span class="line">k8s.gcr.io&#x2F;pause                     3.1                 da86e6ba6ca1        19 months ago       742kB</span><br></pre></td></tr></table></figure><ul><li><code>repository</code>：镜像来自于哪个仓库</li><li><code>tag</code>：镜像标签名</li><li><code>image id</code>：标识了唯一镜像</li><li><code>size</code>：镜像大小</li><li><code>created</code>：镜像创建时间</li></ul><h3 id="inspect-详细"><a href="#inspect-详细" class="headerlink" title="inspect(详细)"></a>inspect(详细)</h3><p>获取镜像的详细信息：<code>docker inspect image</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@104 ~]# docker inspect golang:1.12.7-alpine</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:6b21b4c6e7a3d4a9496fff4ca5cf2069baaf4787d8f4adb1e2cf10acd2b69e1a&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;golang:1.12.7-alpine&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;golang@sha256:1121c345b1489bb5e8a9a65b612c8fed53c175ce72ac1c76cf12bbfc35211310&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2019-07-11T23:29:27.482581015Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;23d16fc333493bcb155dd8dd32c25e4067a69db5ad47a8c16465dcdf816d0cfc&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;23d16fc33349&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">             ...</span><br></pre></td></tr></table></figure><h3 id="history-镜像构建历史"><a href="#history-镜像构建历史" class="headerlink" title="history(镜像构建历史)"></a>history(镜像构建历史)</h3><p>镜像是由一层层文件组成，也可以从中看出镜像的构建历史等信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@104 ~]# docker history golang:1.12.7-alpine</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">6b21b4c6e7a3        12 days ago         &#x2F;bin&#x2F;sh -c #(nop) WORKDIR &#x2F;go                   0B                  </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c mkdir -p &quot;$GOPATH&#x2F;src&quot; &quot;$GOPATH&#x2F;b…   0B                  </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c #(nop)  ENV PATH&#x3D;&#x2F;go&#x2F;bin:&#x2F;usr&#x2F;loc…   0B                  </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c #(nop)  ENV GOPATH&#x3D;&#x2F;go               0B                  </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c set -eux;  apk add --no-cache --v…   344MB               </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c #(nop)  ENV GOLANG_VERSION&#x3D;1.12.7    0B                  </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c [ ! -e &#x2F;etc&#x2F;nsswitch.conf ] &amp;&amp; ec…   17B                 </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c apk add --no-cache   ca-certifica…   551kB               </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;sh&quot;]              0B                  </span><br><span class="line">&lt;missing&gt;           12 days ago         &#x2F;bin&#x2F;sh -c #(nop) ADD file:0eb5ea35741d23fe3…   5.58MB</span><br></pre></td></tr></table></figure><p>可以加上参数<code>--no-trunc</code>完整显示。</p><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><p>可以去搜索docker官方的仓库地址中的镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@104 ~]# docker search jiangziya</span><br><span class="line">NAME                        DESCRIPTION         STARS               OFFICIAL            AUTOMATED</span><br><span class="line">jiangziya&#x2F;test_flask                            1                                       </span><br><span class="line">jiangziya&#x2F;pause             k8s.gcr.io&#x2F;pause    0                                       </span><br><span class="line">jiangziya&#x2F;deep_scan                             0                                       </span><br><span class="line">jiangziya&#x2F;gcr-pause-amd64                       0                                       </span><br><span class="line">jiangziya&#x2F;python                                0                                       </span><br><span class="line">jiangziya&#x2F;anchore_engine    docker镜像扫描工具        0</span><br></pre></td></tr></table></figure><h2 id="镜像标签"><a href="#镜像标签" class="headerlink" title="镜像标签"></a>镜像标签</h2><p>一个镜像id可以被不同镜像标签名引用。比如说我把docker官方的python镜像打一个tag名。</p><h2 id="删除和清理镜像"><a href="#删除和清理镜像" class="headerlink" title="删除和清理镜像"></a>删除和清理镜像</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除镜像：<code>docker rmi</code> or <code>docker image rm</code></p><p>对于正在被容器使用的镜像，删除会失败。可以加<code>-f</code>代表强制删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@104 ~]# docker rmi -f  6b21b4c6e7a3</span><br><span class="line">Untagged: golang:1.12.7-alpine</span><br><span class="line">Untagged: golang@sha256:1121c345b1489bb5e8a9a65b612c8fed53c175ce72ac1c76cf12bbfc35211310</span><br><span class="line">Deleted: sha256:6b21b4c6e7a3d4a9496fff4ca5cf2069baaf4787d8f4adb1e2cf10acd2b69e1a</span><br></pre></td></tr></table></figure><p>在删除镜像的时候，一个镜像id可能被多个镜像引用。也就是一个镜像拥有多个标签的时候，可能会造成无法删除的情况，先删最后引用的镜像，最后删除原始镜像。</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>使用docker之后，系统中可能会遗留一些临时的镜像文件，以及一些没有被使用的镜像。可以通过<code>docker image prune</code>来清理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 我这里没有，有的话会显示大小，久了会好几个g</span><br><span class="line">[root@104 ~]# docker image prune</span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to continue? [y&#x2F;N] y</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><p>也可以加参数<code>-f</code>强制删除，不进行提示。</p><h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>在用dockerfile构建镜像的时候，有时候也会产生标签名和仓库名为<code>none</code>的情况，所以，可以自己组装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -f &quot;dangling&#x3D;true&quot; -q)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~&#x2F;jiangwei&#x2F;compose-1.24.1&#x2F;bin# docker rmi $(docker images -f &quot;dangling&#x3D;true&quot; -q)</span><br><span class="line">Deleted: sha256:7e3f22046ebc8336dc484c9308f748abce68a13027fa3a81021f87c2a813ab2c</span><br><span class="line">Deleted: sha256:ae6d77a20ddc1beaeec9f2807648260ea890b9ee54467ad36b4eba0e069b0024</span><br><span class="line">Deleted: sha256:f1bfb4e5332b265ed19e33237de059c8805535f198572c88cd2589b20c020600</span><br><span class="line">Deleted: sha256:5c7a9e8b03b90ced3b01a4a119a02bd27d8c40a16c7f3ceca94c13d2d26fe71e</span><br><span class="line">Deleted: sha256:0900810aac1ba33d5c963607b683f04ae09b1d212abe54355d519b323b0d57a9</span><br><span class="line">Deleted: sha256:bdf3003fee2c7a4591f6c19d547a0863a9afd6af55c33d9e66588ce6280dee36</span><br><span class="line">Deleted: sha256:c99a334c2807516aca6af0974d800f5360139a44e8145aed5306998646a050fa</span><br><span class="line">Deleted: sha256:afc5332d79c1e73c01f75e2019c9241d8166361cdc5db1384fbcf801545c256e</span><br><span class="line">Error response from daemon: conflict: unable to delete 96df7db48070 (must be forced) - image is being used by stopped container cc9f94bbc295</span><br><span class="line">Error response from daemon: conflict: unable to delete cd14e780fb73 (must be forced) - image is being used by stopped container 07639e749cee</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@sw1:~&#x2F;jiangwei&#x2F;compose-1.24.1&#x2F;bin# docker rmi -f $(docker images -f &quot;dangling&#x3D;true&quot; -q)</span><br><span class="line">Deleted: sha256:96df7db48070646dab3e67ddeb1cd821f7e3ee0335b435b1e63e9bc822c1a186</span><br><span class="line">Deleted: sha256:e1654fc479c942e04408e002b954d201c8ad889bf594bb2aab70855ed1da6d66</span><br><span class="line">Deleted: sha256:cd14e780fb735730ca02fd5a993b70829dcf618aa7111437266c652b589f8aaa</span><br><span class="line">Deleted: sha256:6199583b07a1cc1427d5e2996220029400ea0697274ee8cf952c3b156c4905f2</span><br><span class="line">Deleted: sha256:c2e8ffce43ca34154972ae4d29a01f955f1f4025ff6e2be704892f77627e1744</span><br><span class="line">Deleted: sha256:8472c46fe53e1cb651d2a47bebf385309398f6ff0d0fa55a19a18e8c24a129bd</span><br><span class="line">Deleted: sha256:46e69e79414994b439773d0174754ca07a40bd5b5a9a0b9015bcff61f38a6107</span><br><span class="line">Deleted: sha256:91891f9a9bd7ced36d91769a7d510e4b06e93e4d8b8affd1d9c83ae07f1d3bb5</span><br></pre></td></tr></table></figure><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>创建镜像的方法有三种：</p><ul><li>基于已有镜像的容器创建</li><li>基于Dockerfile创建</li></ul><h3 id="基于已有容器创建"><a href="#基于已有容器创建" class="headerlink" title="基于已有容器创建"></a>基于已有容器创建</h3><p>这是利用docker的commit命令进行提交，修改的是容器运行时的可写层。原有镜像不会改变，而是创建出一个新的镜像。</p><p>这个很少用，而且弊端很大。只是适合学习用的。</p><h3 id="基于Dockerfile创建"><a href="#基于Dockerfile创建" class="headerlink" title="基于Dockerfile创建"></a>基于Dockerfile创建</h3><p>编写Dockerfile创建镜像是最常见的方式，Dockerfile是一个文本。利用一些指令描述基于某个基础镜像创建新镜像的过程。</p><p>下面给出一个简单的示例，基于<code>httpd</code>镜像。</p><h4 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建好两个文件</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># ls</span></span><br><span class="line">Dockerfile.httpd  public_html</span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html内容如下</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># cat public_html/index.html </span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;hello docker web:v1 &lt;p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="编写Dockerfile-httpd文件"><a href="#编写Dockerfile-httpd文件" class="headerlink" title="编写Dockerfile.httpd文件"></a>编写Dockerfile.httpd文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写dockerfile，内容如下</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># vim Dockerfile.httpd </span></span><br><span class="line"><span class="keyword">FROM</span> httpd:<span class="number">2.4</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./public_html /usr/<span class="built_in">local</span>/apache2/htdocs/</span></span><br></pre></td></tr></table></figure><h4 id="执行命令开始构建"><a href="#执行命令开始构建" class="headerlink" title="执行命令开始构建"></a>执行命令开始构建</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建web:v1：如果基础镜像不存在，默认会去docker仓库拉取镜像</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker build -f Dockerfile.httpd -t web:v1 .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">3.584</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">2</span> : <span class="keyword">FROM</span> httpd:<span class="number">2.4</span></span><br><span class="line"><span class="number">2.4</span>: Pulling <span class="keyword">from</span> library/httpd</span><br><span class="line">f5d23c7fed46: Pull complete </span><br><span class="line">b083c5fd185b: Pull complete </span><br><span class="line">bf5100a89e78: Pull complete </span><br><span class="line"><span class="number">98</span>f47fcaa52f: Pull complete </span><br><span class="line"><span class="number">622</span>a9dd8cfed: Pull complete </span><br><span class="line">Digest: sha256:dc4c86bc90593c6e4c5b06872a7a363fc7d4eec99c5d6bfac881f7371adcb2c4</span><br><span class="line">Status: Downloaded newer image for httpd:<span class="number">2.4</span></span><br><span class="line"> ---&gt; ee39f68eb241</span><br><span class="line">Step <span class="number">2</span>/<span class="number">2</span> : <span class="keyword">COPY</span><span class="bash"> ./public_html /usr/<span class="built_in">local</span>/apache2/htdocs/</span></span><br><span class="line"> ---&gt; d2294d4f5ce0</span><br><span class="line">Successfully built d2294d4f5ce0</span><br><span class="line">Successfully tagged web:v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建web:v2，提前修改pubilc/index.html内容。</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker build -f Dockerfile.httpd -t web:v2 .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">3.584</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">2</span> : <span class="keyword">FROM</span> httpd:<span class="number">2.4</span></span><br><span class="line"> ---&gt; ee39f68eb241</span><br><span class="line">Step <span class="number">2</span>/<span class="number">2</span> : <span class="keyword">COPY</span><span class="bash"> ./public_html /usr/<span class="built_in">local</span>/apache2/htdocs/</span></span><br><span class="line"> ---&gt; c9945d69f223</span><br><span class="line">Successfully built c9945d69f223</span><br><span class="line">Successfully tagged web:v2</span><br></pre></td></tr></table></figure><h4 id="查看构建的镜像"><a href="#查看构建的镜像" class="headerlink" title="查看构建的镜像"></a>查看构建的镜像</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker images|grep web</span></span><br><span class="line">web                                             v1                  <span class="number">81</span>e7034c8b70        <span class="number">8</span> seconds ago        <span class="number">154</span>MB</span><br><span class="line">web                                             v2                  c9945d69f223        About a minute ago   <span class="number">154</span>MB</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>加了一些参数，现在看不懂没关系。知道大概意思就行了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker run -itd --name web1  -p 8001:80 web:v1</span></span><br><span class="line"><span class="number">2280702042</span>cb3a5cbb896719bd5da9858f000a1560a02a3058cb3ea802d2ca59</span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker run -itd --name web2  -p 8002:80 web:v2</span></span><br><span class="line">a6c62487a191479fe1bdc8c56c1c998b9039c491f5a3dc1456ba3ea701b9bab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker ps |grep web</span></span><br><span class="line">a6c62487a191        web:v2                   <span class="string">"httpd-foreground"</span>       <span class="number">56</span> seconds ago       Up <span class="number">55</span> seconds          <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8002</span>-&gt;<span class="number">80</span>/tcp                                 we2</span><br><span class="line"><span class="number">2280702042</span>cb        web:v1                   <span class="string">"httpd-foreground"</span>       About a minute ago   Up About a minute      <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8001</span>-&gt;<span class="number">80</span>/tcp                                 we1</span><br></pre></td></tr></table></figure><h4 id="访问web应用"><a href="#访问web应用" class="headerlink" title="访问web应用"></a>访问web应用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># curl 192.168.32.87:8001</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;hello docker web:v1 &lt;p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># curl 192.168.32.87:8002</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;hello docker web:v2 &lt;p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面利用简单的dockerfile，基于httpd基础镜像，构建出了两个web应用，还运行了两个web应用。</p><h2 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h2><p>镜像默认是从docker仓库拉取。如果机器没网，或者需要拷贝到其他机器。我们可以用<code>save</code>和<code>load</code>命令。</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><h4 id="单个"><a href="#单个" class="headerlink" title="单个"></a>单个</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个标准的导出</span></span><br><span class="line">docker save web:v1 -o  xxx.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更小的体积导出</span></span><br><span class="line">docker save web:v1 |gzip &gt; yyy.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两种导出方式的大小</span></span><br><span class="line">ls -alh</span><br><span class="line">-rw------- <span class="number">1</span> root     root   <span class="number">152</span>M Aug  <span class="number">6</span> <span class="number">15</span>:<span class="number">16</span> xxx.tar.gz</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root     root    <span class="number">53</span>M Aug  <span class="number">6</span> <span class="number">15</span>:<span class="number">17</span> yyy.tar.gz</span><br></pre></td></tr></table></figure><h4 id="多个"><a href="#多个" class="headerlink" title="多个"></a>多个</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准导出</span></span><br><span class="line"> docker save web:v1 web:v2  &gt; xy.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更小体积导出</span></span><br><span class="line">docker save web:v1 web:v2 |gzip &gt; xy1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两种导出方式的大小</span></span><br><span class="line">ls -alh</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root     root    <span class="number">53</span>M Aug  <span class="number">6</span> <span class="number">15</span>:<span class="number">20</span> xy1.tar.gz</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root     root   <span class="number">152</span>M Aug  <span class="number">6</span> <span class="number">15</span>:<span class="number">19</span> xy.tar.gz</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地是否存在</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker images|grep web</span></span><br><span class="line">web                                             v1                  <span class="number">81</span>e7034c8b70        About an hour ago   <span class="number">154</span>MB</span><br><span class="line">web                                             v2                  c9945d69f223        About an hour ago   <span class="number">154</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除，因为两个镜像正在被两个容器运行着使用。</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker rmi -f web:v1 web:v2</span></span><br><span class="line">Untagged: web:v1</span><br><span class="line">Untagged: web:v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没了</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker images|grep web</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令导入</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker load &lt; xy1.tar.gz </span></span><br><span class="line">Loaded image: web:v1</span><br><span class="line">Loaded image: web:v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证本地是否存在</span></span><br><span class="line">root@jw-ubuntu01:~/docker/images/apache_image<span class="comment"># docker images|grep web</span></span><br><span class="line">web                                             v1                  <span class="number">81</span>e7034c8b70        About an hour ago   <span class="number">154</span>MB</span><br><span class="line">web                                             v2                  c9945d69f223        About an hour ago   <span class="number">154</span>MB</span><br></pre></td></tr></table></figure><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>同github仓库一样，可以对镜像镜像<code>pull</code>和<code>push</code>操作。</p><p>默认会上传到docker官方仓库。完整命令为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker push registry_host:registry_port/repository:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">docker push <span class="number">172.19</span>.<span class="number">19.252</span>:<span class="number">18005</span>/nginx:t1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker核心概念与安装配置</title>
      <link href="/docker%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html"/>
      <url>/docker%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker核心概念与安装配置"><a href="#Docker核心概念与安装配置" class="headerlink" title="Docker核心概念与安装配置"></a>Docker核心概念与安装配置</h1><h2 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h2><p>Docker的三大核心概念：</p><ul><li>镜像：<code>image</code></li><li>容器：<code>container</code></li><li>仓库：<code>repository</code></li></ul><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>docker镜像类似于虚拟机的镜像，是一个只读的容器模版。简单一点就是：docker镜像是docker容器的静态视角，docker容器是docker镜像的运行状态。</p><p>例如：一个镜像可以包含一个基本的操作系统环境，里面安装好了<code>python</code>，或者其他一些软件。可以把它称为一个<code>python</code>镜像。</p><p>docker提供了一套十分简单的机制来创建和更新现有镜像，用户甚至可以从网上下载已经做好的镜像直接使用。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>docker容器类似于一个轻量级的沙箱，docker利用容器来运行和隔离应用。</p><p>docker容器其实就是一个进程，它是由镜像创建的运行实例。如果从面向对象思想来看，镜像就是类，而容器就是对象。可以创建、启动、开始、停止、删除。容器之间都是彼此相互隔离、互不可见。</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>docker仓库类似于代码仓库。是docker存放镜像的场所。</p><p>有时候我们会把仓库(<code>repository</code>)和仓库注册服务器(<code>registry</code>)混为一谈，并不严格区分。其实。仓库服务器是存放仓库的地方。每个仓库存放一类镜像。</p><p>打个形象的比喻：你家有一个放粮食的房间，那个房间就是仓库服务器，而房间里面有好多小粮仓。每个粮仓存放不同的粮食，五谷杂粮等等。这几个粮仓就是仓库。</p><p>根据所存储的镜像公开与否可将docker仓库分为公开(<code>public</code>)仓库和私有(<code>private</code>)仓库。</p><p>同github一样，用户可以从仓库服务器<code>push</code>和<code>pull</code>镜像。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h3><h4 id="移除旧版本"><a href="#移除旧版本" class="headerlink" title="移除旧版本"></a>移除旧版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-selinux \</span><br><span class="line">    docker-engine-selinux \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装必要工具"><a href="#安装必要工具" class="headerlink" title="安装必要工具"></a>安装必要工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h4 id="添加软件源信息"><a href="#添加软件源信息" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="更新-yum-缓存"><a href="#更新-yum-缓存" class="headerlink" title="更新 yum 缓存"></a>更新 yum 缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h4 id="安装Docker-ce"><a href="#安装Docker-ce" class="headerlink" title="安装Docker-ce"></a>安装Docker-ce</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="启动与测试"><a href="#启动与测试" class="headerlink" title="启动与测试"></a>启动与测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">[root@jw-centos1 ~]# systemctl start docker.</span><br><span class="line"></span><br><span class="line"># 测试：运行hello-world，需要联网去拉取hello-world镜像</span><br><span class="line">[root@jw-centos1 ~]# docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line">1. The Docker client contacted the Docker daemon.</span><br><span class="line">2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">(amd64)</span><br><span class="line">3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">executable that produces the output you are currently reading.</span><br><span class="line">4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line">$ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line">https:&#x2F;&#x2F;hub.docker.com&#x2F;</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;</span><br></pre></td></tr></table></figure><h3 id="ubuntu18-04"><a href="#ubuntu18-04" class="headerlink" title="ubuntu18.04"></a>ubuntu18.04</h3><h4 id="下载必要工具"><a href="#下载必要工具" class="headerlink" title="下载必要工具"></a>下载必要工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h4 id="添加软件源信息-1"><a href="#添加软件源信息-1" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 添加gpg密钥</span><br><span class="line">$ curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line">$ OK</span><br><span class="line"></span><br><span class="line"># 确认导人指纹为&#96;9DC8 5822 9FC7 DD38 854A E2D8 8D8I 803C OEBFCD88&#96;的 GPG公钥</span><br><span class="line">$ sudo apt-key fingerprint OEBFCD88 </span><br><span class="line"></span><br><span class="line"># 添加docker官方源</span><br><span class="line">$ sudo add-apt-repository    &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \</span><br><span class="line">   bionic \</span><br><span class="line">   stable&quot;</span><br><span class="line"></span><br><span class="line"># 更新apt软件包缓存</span><br><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># install docker</span><br><span class="line">$ sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># check version</span><br><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line">Version:           18.09.5</span><br><span class="line">API version:       1.39</span><br><span class="line">Go version:        go1.10.8</span><br><span class="line">Git commit:        e8ff056</span><br><span class="line">Built:             Thu Apr 11 04:43:57 2019</span><br><span class="line">OS&#x2F;Arch:           linux&#x2F;amd64</span><br><span class="line">Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line">Engine:</span><br><span class="line">Version:          18.09.5</span><br><span class="line">API version:      1.39 (minimum version 1.12)</span><br><span class="line">Go version:       go1.10.8</span><br><span class="line">Git commit:       e8ff056</span><br><span class="line">Built:            Thu Apr 11 04:10:53 2019</span><br><span class="line">OS&#x2F;Arch:          linux&#x2F;amd64</span><br><span class="line">Experimental:     false</span><br></pre></td></tr></table></figure><h2 id="Docker配置"><a href="#Docker配置" class="headerlink" title="Docker配置"></a>Docker配置</h2><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>有些镜像在国内网络环境拉取不到，比如<code>k8s</code>相关的一些镜像包。还有在公司内部网络环境，需要走代理才能访问外网，这时候需要配置代理。</p><h4 id="为docker服务创建一个内嵌的systemd目录"><a href="#为docker服务创建一个内嵌的systemd目录" class="headerlink" title="为docker服务创建一个内嵌的systemd目录"></a>为docker服务创建一个内嵌的systemd目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br></pre></td></tr></table></figure><h4 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h4><p>路径：<code>/etc/systemd/system/docker.service.d/docker.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;ip:port&quot;</span><br><span class="line">Environment&#x3D;&quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;ip:port&quot;</span><br><span class="line">Environment&#x3D;&quot;NO_PROXY&#x3D;http:&#x2F;&#x2F;ip:port&quot;</span><br><span class="line">ExecStartPost&#x3D;&#x2F;sbin&#x2F;iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h4 id="重新加载配置并重启"><a href="#重新加载配置并重启" class="headerlink" title="重新加载配置并重启"></a>重新加载配置并重启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload  &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h3><p>更换镜像源可以加快镜像的拉取速度。</p><h4 id="编辑文件-1"><a href="#编辑文件-1" class="headerlink" title="编辑文件"></a>编辑文件</h4><p>路径：<code>/etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://o9wm45c3.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加用户到docker用户组"><a href="#添加用户到docker用户组" class="headerlink" title="添加用户到docker用户组"></a>添加用户到docker用户组</h3><p>为了避免每次使用docker命令时都需要切换到<code>root</code>身份。可以将当前用户加入到安装中自动创建的docker用户组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG docker $&#123;USER&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的内置包之strconv</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E7%BD%AE%E5%8C%85%E4%B9%8Bstrconv.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E7%BD%AE%E5%8C%85%E4%B9%8Bstrconv.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言内置包之strconv"><a href="#go语言内置包之strconv" class="headerlink" title="go语言内置包之strconv"></a>go语言内置包之strconv</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>go语言的内置包<code>sreconv</code>实现了基本数据类型和字符串之间的相互转换。</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="Atoi"><a href="#Atoi" class="headerlink" title="Atoi()"></a>Atoi()</h3><p>将字符串类型的整数转换为int类型。函数原型为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Atoi</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果传入的参数无法转换为int类型。就会返回错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="string">"5201314"</span></span><br><span class="line">    i1, err := strconv.Atoi(s1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>,i1, i1)</span><br><span class="line">    &#125;</span><br><span class="line">    s2 := <span class="string">"江子牙"</span></span><br><span class="line">    i2, err := strconv.Atoi(s2)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>,i2, i2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型：<span class="keyword">int</span>值：<span class="number">5201314</span></span><br><span class="line">strconv.Atoi: parsing <span class="string">"江子牙"</span>: invalid syntax</span><br></pre></td></tr></table></figure><h3 id="Itoa"><a href="#Itoa" class="headerlink" title="Itoa()"></a>Itoa()</h3><p>将int类型数据转化为对应的字符串表示。函数原型为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Itoa(i int) string &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i1 := <span class="number">5201315</span></span><br><span class="line">    s1 := strconv.Itoa(i1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类型：string值："5201315"</span></span><br><span class="line">    fmt.Printf(<span class="string">"类型：%T\t值：%#v"</span>, s1, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="parse系列"><a href="#parse系列" class="headerlink" title="parse系列"></a>parse系列</h3><p>parse系列函数用于转换字符串为给定类型的值。</p><h4 id="ParseBool"><a href="#ParseBool" class="headerlink" title="ParseBool()"></a>ParseBool()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseBool</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>返回字符串表示的bool值，但是只接收<code>1、0、false、true、False、True、t、T、F、f、TRUE、FALSE</code>，否则返回错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testBool</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    b1, err := strconv.ParseBool(s)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>, b1, b1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="string">"1"</span></span><br><span class="line">    testBool(s1)</span><br><span class="line">    s2 := <span class="string">"t"</span></span><br><span class="line">    testBool(s2)</span><br><span class="line">    s3 := <span class="string">"F"</span></span><br><span class="line">    testBool(s3)</span><br><span class="line">    s4 := <span class="string">"-2"</span></span><br><span class="line">    testBool(s4)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型：<span class="keyword">bool</span>值：<span class="literal">true</span></span><br><span class="line">类型：<span class="keyword">bool</span>值：<span class="literal">true</span></span><br><span class="line">类型：<span class="keyword">bool</span>值：<span class="literal">false</span></span><br><span class="line">strconv.ParseBool: parsing <span class="string">"-2"</span>: invalid syntax</span><br></pre></td></tr></table></figure><h4 id="ParseFloat"><a href="#ParseFloat" class="headerlink" title="ParseFloat()"></a>ParseFloat()</h4><p>解析一个浮点数表示的字符串。函数原型为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func ParseFloat(s string, bitSize int) (float64, error) &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>bitsize</code>表示期望的接受类型。32代表<code>float32</code>，64代表<code>float64</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFloat</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    b1, err := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>, b1, b1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="string">"1"</span></span><br><span class="line">    testFloat(s1)</span><br><span class="line">    s2 := <span class="string">"3.14159"</span></span><br><span class="line">    testFloat(s2)</span><br><span class="line">    s3 := <span class="string">"2.22222"</span></span><br><span class="line">    testFloat(s3)</span><br><span class="line">    s4 := <span class="string">"呵呵"</span></span><br><span class="line">    testFloat(s4)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型：float64值：1</span><br><span class="line">类型：float64值：3.14159</span><br><span class="line">类型：float64值：2.22222</span><br><span class="line">strconv.ParseFloat: parsing &quot;呵呵&quot;: invalid syntax</span><br></pre></td></tr></table></figure><h4 id="ParseInt"><a href="#ParseInt" class="headerlink" title="ParseInt()"></a>ParseInt()</h4><p>解析字符串表示的整数值，接收正负号，函数原型为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func ParseInt(s string, base int, bitSize int) (i int64, err error) &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>base</code>表示指定进制，如果base为0，则会从字符串前缀判断。<code>ox</code>是十六进制，<code>o</code>是八进制。否则是十进制。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testInt</span><span class="params">(s <span class="keyword">string</span>, base <span class="keyword">int</span>, bitSize <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    b1, err := strconv.ParseInt(s, base, bitSize)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>, b1, b1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="string">"1"</span></span><br><span class="line">    testInt(s1, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    <span class="comment">// 十六进制</span></span><br><span class="line">    s2 := <span class="string">"0x10"</span></span><br><span class="line">    testInt(s2, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    s4 := <span class="string">"-19"</span></span><br><span class="line">    testInt(s4, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    s5 := <span class="string">"呵呵"</span></span><br><span class="line">    testInt(s5, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    <span class="comment">// 八进制</span></span><br><span class="line">    s6 := <span class="string">"011"</span></span><br><span class="line">    testInt(s6, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    <span class="comment">// 二进制</span></span><br><span class="line">    s7 := <span class="string">"1111"</span></span><br><span class="line">    testInt(s7, <span class="number">2</span>, <span class="number">64</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">类型：<span class="keyword">int64</span>值：<span class="number">1</span></span><br><span class="line">类型：<span class="keyword">int64</span>值：<span class="number">16</span></span><br><span class="line">类型：<span class="keyword">int64</span>值：<span class="number">-19</span></span><br><span class="line">strconv.ParseInt: parsing <span class="string">"呵呵"</span>: invalid syntax</span><br><span class="line">类型：<span class="keyword">int64</span>值：<span class="number">9</span></span><br><span class="line">类型：<span class="keyword">int64</span>值：<span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="ParseUnit"><a href="#ParseUnit" class="headerlink" title="ParseUnit()"></a>ParseUnit()</h4><p>与<code>ParseInt</code>类似，但是不接受正负号，用于无符号整型。函数原型为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseUint</span><span class="params">(s <span class="keyword">string</span>, base <span class="keyword">int</span>, bitSize <span class="keyword">int</span>)</span> <span class="params">(n <span class="keyword">uint64</span>, err error)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="format系列"><a href="#format系列" class="headerlink" title="format系列"></a>format系列</h3><p>与<code>Parse</code>系列函数相反。将给定的数据类型的值转为字符串。</p><h4 id="FormatBool"><a href="#FormatBool" class="headerlink" title="FormatBool()"></a>FormatBool()</h4><p>将布尔值格式化为对应的字符串，函数原型为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatBool</span><span class="params">(b <span class="keyword">bool</span>)</span> <span class="title">string</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值为<code>true</code>或者<code>false</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testBool</span><span class="params">(b <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    s := strconv.FormatBool(b)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b1 := <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> b2 <span class="keyword">bool</span></span><br><span class="line">    testBool(b1)</span><br><span class="line">    testBool(b2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="FormatInt"><a href="#FormatInt" class="headerlink" title="FormatInt()"></a>FormatInt()</h4><p>将数字格式化为对应的字符串，支持指定进制，函数原型为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatInt</span><span class="params">(i <span class="keyword">int64</span>, base <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>base</code> 必须在2到36之间，结果中会使用小写字母’a’到’z’表示大于10的数字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testInt</span><span class="params">(i <span class="keyword">int64</span>, base <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    s := strconv.FormatInt(i, base)</span><br><span class="line">    fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>, s, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i1 <span class="keyword">int64</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> i2 <span class="keyword">int64</span> = <span class="number">16</span></span><br><span class="line">    testInt(i1, <span class="number">2</span>)</span><br><span class="line">    testInt(i2, <span class="number">16</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型：<span class="keyword">string</span>值：<span class="string">"1010"</span></span><br><span class="line">类型：<span class="keyword">string</span>值：<span class="string">"10"</span></span><br></pre></td></tr></table></figure><h4 id="FormatUnit"><a href="#FormatUnit" class="headerlink" title="FormatUnit()"></a>FormatUnit()</h4><p>是<code>FormatInt</code>的无符号整数版本，函数原型为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatUint</span><span class="params">(i <span class="keyword">uint64</span>, base <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="FormatFloat"><a href="#FormatFloat" class="headerlink" title="FormatFloat()"></a>FormatFloat()</h4><p>将浮点型的数字转换为对应的字符串，函数原型为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatFloat</span><span class="params">(f <span class="keyword">float64</span>, fmt <span class="keyword">byte</span>, prec, bitSize <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>bitSize</code>表示f的来源类型（32：float32、64：float64），会据此进行舍入。</p><p><code>fmt</code>表示格式：<code>f</code>（-ddd.dddd）、<code>b</code>（-ddddp±ddd，指数为二进制）、<code>e</code>（-d.dddde±dd，十进制指数）、<code>E</code>（-d.ddddE±dd，十进制指数）、<code>g</code>指数很大时用’e’格式，否则<code>f</code>格式）、<code>G</code>（指数很大时用<code>E</code>式，否则<code>f</code>格式）。</p><p><code>prec</code>控制精度（排除指数部分）：对<code>f、e、E</code>，它表示小数点后的数字个数；对<code>g、G</code>，它控制总的数字个数。如果<code>prec</code> 为-1，则代表使用最少数量的、但又必需的数字来表示f。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := strconv.FormatFloat(<span class="number">3.1415</span>, <span class="string">'E'</span>, <span class="number">-1</span>, <span class="number">64</span>)</span><br><span class="line">    <span class="comment">// 3.1415E+00</span></span><br><span class="line">    fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dnsmasq部署DNS服务</title>
      <link href="/Dnsmasq%E9%83%A8%E7%BD%B2DNS%E6%9C%8D%E5%8A%A1.html"/>
      <url>/Dnsmasq%E9%83%A8%E7%BD%B2DNS%E6%9C%8D%E5%8A%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dnsmasq"><a href="#Dnsmasq" class="headerlink" title="Dnsmasq"></a>Dnsmasq</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dnsmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。</p><p>作为dhcp服务器，它可以为局域网电脑提供内网ip和路由。</p><p>如果是在本地搭建，还可以大幅提高解析速度。还可以有效的防止DNS劫持，实现屏蔽广告等作用。</p><p>如果是在公网搭建Dnsmasq，还可以对指定的域名解析hosts指向，从而避免DNS污染。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>当接受到一个DNS请求时，Dnsmasq首先会查找<code>/etc/hosts</code>这个文件，然后查找<code>/etc/resolv.conf</code>中定义的外部DNS。所以说Dnsmasq是一个很不错的外部DNS中继。</p><p>配置Dnsmasq为DNS缓存服务器，同时在<code>/etc/hosts</code>文件中加入本地内网解析，这样一来每当内网机器查询时就会优先查询hosts文件，这就等于将<code>/etc/hosts</code>共享给全内网机器使用，从而解决内网机器互相识别的问题。相比逐台机器编辑hosts文件或者添加Bind DNS记录，仅编辑一个hosts文件，这简直太容易了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y dnsmasq</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Dnsmasq处理DNS设置与BIND等其他DNS服务有所不同。所有的配置都在一个文件中完成<code>/etc/dnsmasq.conf</code></p><h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><ul><li><code>resolv-file=/etc/resolv.dnsmasq.conf</code>：指定该文件来管理上游的DNS服务器</li><li><code>strict-order</code>：默认情况下Dnsmasq会发送查询到它的任何上游DNS服务器上，如果取消注释，则Dnsmasq则会严格按照<code>/etc/resolv.conf</code>中的DNS Server顺序进行查询。</li><li><code>no-hosts</code>：如果不想使用<code>/etc/hosts</code>，则取消下面的注释。</li><li><code>listen-address=127.0.0.1</code>：设置想监听的地址，如果你本机要使用写上127.0.0.1。如果你想让本机所在的局域网的其它电脑也能够使用上Dnsmasq，应该把本机的局域网IP加上去。</li></ul><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 需要新建一个resolv.dnsmasq.conf文件,这个是配置上游DNS，也就是真正的公共DNS</span><br><span class="line">vim &#x2F;etc&#x2F;resolv.dnsmasq.conf</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br><span class="line">nameserver 127.0.0.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line"># 上游DNS路径</span><br><span class="line">resolv-file&#x3D;&#x2F;etc&#x2F;resolv.dnsmasq.conf</span><br><span class="line"># 取消strict-order注释</span><br><span class="line">strict-order</span><br><span class="line">#监听地址，加上自己服务器IP</span><br><span class="line">listen-address&#x3D;127.0.0.1,172.19.19.124</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>DNSmasq可以设置不同的域名指定不同的DNS进行解析，修改<code>/etc/dnsmasq.conf</code>文件即可，若不对域名设置DNS，则从上游DNS获取记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line">address&#x3D;&#x2F;ad.youku.com&#x2F;127.0.0.1</span><br><span class="line">address&#x3D;&#x2F;ad.iqiyi.com&#x2F;127.0.0.1</span><br><span class="line">address&#x3D;&#x2F;topsec-etcd.com&#x2F;172.19.19.124</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">systemctl start dnsmasq</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="本机"><a href="#本机" class="headerlink" title="本机"></a>本机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 本机测试</span><br><span class="line">[root@jw-etcd03 ~]# dig www.topsec-etcd.com</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-74.el7_6.1 &lt;&lt;&gt;&gt; www.topsec-etcd.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 60031</span><br><span class="line">;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.topsec-etcd.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.topsec-etcd.com.0INA172.19.19.124</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 127.0.0.1#53(127.0.0.1)</span><br><span class="line">;; WHEN: Tue Jul 23 21:37:20 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 53</span><br></pre></td></tr></table></figure><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><h4 id="添加dns服务器"><a href="#添加dns服务器" class="headerlink" title="添加dns服务器"></a>添加dns服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# cat &#x2F;etc&#x2F;resolv.conf </span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">search 8.8.8.8</span><br><span class="line">nameserver 172.19.19.124</span><br><span class="line">nameserver 192.168.59.241</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# dig www.topsec-etcd.com</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-74.el7_6.1 &lt;&lt;&gt;&gt; www.topsec-etcd.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52854</span><br><span class="line">;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.topsec-etcd.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.topsec-etcd.com.0INA172.19.19.124</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 172.19.19.124#53(172.19.19.124)</span><br><span class="line">;; WHEN: 二 7月 23 13:37:14 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 53</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>etcd多成员集群</title>
      <link href="/etcd%E5%A4%9A%E6%88%90%E5%91%98%E9%9B%86%E7%BE%A4.html"/>
      <url>/etcd%E5%A4%9A%E6%88%90%E5%91%98%E9%9B%86%E7%BE%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="etcd多集群"><a href="#etcd多集群" class="headerlink" title="etcd多集群"></a>etcd多集群</h1><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><p>引导etcd集群的机制有三种：</p><ul><li>静态</li><li>etcd discovery</li><li>DNS discovery</li></ul><h2 id="Discovery"><a href="#Discovery" class="headerlink" title="Discovery"></a>Discovery</h2><p>之前的集群演示是通过静态启动的机制引导etcd集群。但许多情况下，在集群成员的IP可能提前未知。</p><p>这在使用云提供商或网络使用DHCP时很常见。在这种情况下不是指定静态配置，而是使用etcd集群来引导新的成员，此过程称为发现。</p><h3 id="etcd-discovery-service"><a href="#etcd-discovery-service" class="headerlink" title="etcd discovery service"></a>etcd discovery service</h3><h4 id="discovery-url的声明周期"><a href="#discovery-url的声明周期" class="headerlink" title="discovery url的声明周期"></a>discovery url的声明周期</h4><p><code>discovery url</code>用来标识唯一的etcd集群，每个etcd实例共享一个新的<code>discovery url</code>以引导新集群，而不是重用现有的<code>discovery url</code>。</p><p>此外，<code>discovery url</code>仅用于集群的初始引导，若要在集群已运行后更改集群成员的资格，需参考运行时重新配置。</p><h4 id="自定义etcd发现服务"><a href="#自定义etcd发现服务" class="headerlink" title="自定义etcd发现服务"></a>自定义etcd发现服务</h4><p>这种方式就是利用一个已有的etcd集群来引导自身，从而搭建一个新的etcd集群。</p><h5 id="生成一个新的发现令牌"><a href="#生成一个新的发现令牌" class="headerlink" title="生成一个新的发现令牌"></a>生成一个新的发现令牌</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# UUID&#x3D;$(uuidgen)</span><br><span class="line">[root@jw-etcd01 ~]# echo $UUID</span><br><span class="line">0d8c6714-b4b1-4cc1-8ff4-d276f96d247f</span><br></pre></td></tr></table></figure><h5 id="生成discovery-url"><a href="#生成discovery-url" class="headerlink" title="生成discovery url"></a>生成discovery url</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# curl -X PUT http:&#x2F;&#x2F;172.19.19.122:2379&#x2F;v2&#x2F;keys&#x2F;discovery&#x2F;$&#123;UUID&#125;&#x2F;_config&#x2F;size -d value&#x3D;2</span><br><span class="line">&#123;&quot;action&quot;:&quot;set&quot;,&quot;node&quot;:&#123;&quot;key&quot;:&quot;&#x2F;_etcd&#x2F;discovery&#x2F;0d8c6714-b4b1-4cc1-8ff4-d276f96d247f&#x2F;_config&#x2F;size&quot;,&quot;value&quot;:&quot;2&quot;,&quot;modifiedIndex&quot;:6,&quot;createdIndex&quot;:6&#125;&#125;</span><br></pre></td></tr></table></figure><p>将创建一个<code>discovery url</code>，其中<code>value=2</code>代表本集群的大小，通常为<code>3、5、7、9...</code>，我没有多余的机器，所以用两台。</p><p><code>discovery url为</code>：<code>http://172.19.19.122:2379/v2/keys/discovery/0d8c6714-b4b1-4cc1-8ff4-d276f96d247f</code></p><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>先配置好两个yml文件。</p><p>编辑<code>/etc/etcd/conf.yml</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: etcd2</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;172.19.19.123:2380</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.123:2380</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.123:2379,http:&#x2F;&#x2F;127.0.0.1:2379 </span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;172.19.19.123:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">discovery: https:&#x2F;&#x2F;172.19.19.122:2379&#x2F;v2&#x2F;keys&#x2F;discovery&#x2F;0d8c6714-b4b1-4cc1-8ff4-d276f96d247f</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: etcd3</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;172.19.19.124:2380</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.124:2380</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.124:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;172.19.19.124:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">discovery: http:&#x2F;&#x2F;172.19.19.122:2379&#x2F;v2&#x2F;keys&#x2F;discovery&#x2F;0d8c6714-b4b1-4cc1-8ff4-d276f96d247f</span><br></pre></td></tr></table></figure><p>启动命令：<code>etcd --config-file=/etc/etcd/conf.yml</code></p><p>从中可以发现，当第一个节点执行命令的时候，会等待另外一台加入，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcd --config-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;conf-discovery1.yml </span><br><span class="line">2019-07-22 15:59:54.833270 I | etcdmain: Loading server configuration from &quot;&#x2F;etc&#x2F;etcd&#x2F;conf-discovery1.yml&quot;</span><br><span class="line">2019-07-22 15:59:54.834202 I | etcdmain: etcd Version: 3.3.13</span><br><span class="line">2019-07-22 15:59:54.834221 I | etcdmain: Git SHA: 98d3084</span><br><span class="line">2019-07-22 15:59:54.834227 I | etcdmain: Go Version: go1.10.8</span><br><span class="line">2019-07-22 15:59:54.834236 I | etcdmain: Go OS&#x2F;Arch: linux&#x2F;amd64</span><br><span class="line">2019-07-22 15:59:54.834242 I | etcdmain: setting maximum number of CPUs to 2, total number of available CPUs is 2</span><br><span class="line">2019-07-22 15:59:54.834255 W | etcdmain: no data-dir provided, using default data-dir .&#x2F;etcd2.etcd</span><br><span class="line">2019-07-22 15:59:54.834389 I | embed: listening for peers on http:&#x2F;&#x2F;172.19.19.123:2380</span><br><span class="line">2019-07-22 15:59:54.834446 I | embed: listening for client requests on 127.0.0.1:2379</span><br><span class="line">2019-07-22 15:59:54.834490 I | embed: listening for client requests on 172.19.19.123:2379</span><br><span class="line">2019-07-22 15:59:54.937682 N | discovery: found self 7421510307215dd2 in the cluster</span><br><span class="line">2019-07-22 15:59:54.937707 N | discovery: found 1 peer(s), waiting for 1 more</span><br></pre></td></tr></table></figure><p>当所有成员注册之后启动集群，就构建了一个新的集群了。</p><p>查看成员状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcdctl member list</span><br><span class="line">68d21150076963a0, started, etcd3, http:&#x2F;&#x2F;172.19.19.124:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.124:2379</span><br><span class="line">7421510307215dd2, started, etcd2, http:&#x2F;&#x2F;172.19.19.123:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.123:2379</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# endpoints&#x3D;172.19.19.124:2379,172.19.19.123:2379</span><br><span class="line"></span><br><span class="line">[root@jw-etcd02 ~]# etcdctl --endpoints&#x3D;$endpoints endpoint status -w table</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|      ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| 172.19.19.124:2379 | 68d21150076963a0 |  3.3.13 |   20 kB |     false |         2 |          6 |</span><br><span class="line">| 172.19.19.123:2379 | 7421510307215dd2 |  3.3.13 |   20 kB |      true |         2 |          6 |</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><h4 id="公共etcd发现服务"><a href="#公共etcd发现服务" class="headerlink" title="公共etcd发现服务"></a>公共etcd发现服务</h4><p>如果没有可用的现有集群，可以使用托管在公共发现服务<code>discovery.etcd.io</code>，公共的<code>discovery</code>是通过CoreOS提供的公共<code>discovery</code>服务申请token。</p><h5 id="获取集群标识"><a href="#获取集群标识" class="headerlink" title="获取集群标识"></a>获取集群标识</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 etcd]# curl https:&#x2F;&#x2F;discovery.etcd.io&#x2F;new?size&#x3D;3</span><br><span class="line">https:&#x2F;&#x2F;discovery.etcd.io&#x2F;982846b900d7c377a7716564aae3d19e</span><br></pre></td></tr></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><p>编辑配置文件</p><p>这里如果使用内网走代理的话，要加个代理，不然网络原因一只启动不了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name: etcd1</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;172.19.19.122:2380</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.122:2380</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.122:2379,http:&#x2F;&#x2F;127.0.0.1:2379 </span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;172.19.19.122:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">discovery-proxy: http:&#x2F;&#x2F;192.168.59.241:8888</span><br><span class="line">discovery: https:&#x2F;&#x2F;discovery.etcd.io&#x2F;982846b900d7c377a7716564aae3d19e</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name: etcd2</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;172.19.19.123:2380</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.123:2380</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.123:2379,http:&#x2F;&#x2F;127.0.0.1:2379 </span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;172.19.19.123:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">discovery-proxy: http:&#x2F;&#x2F;192.168.59.241:8888</span><br><span class="line">discovery: https:&#x2F;&#x2F;discovery.etcd.io&#x2F;982846b900d7c377a7716564aae3d19e</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name: etcd3</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;172.19.19.124:2380</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.124:2380</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.124:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;172.19.19.124:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">discovery-proxy: http:&#x2F;&#x2F;192.168.59.241:8888</span><br><span class="line">discovery: https:&#x2F;&#x2F;discovery.etcd.io&#x2F;982846b900d7c377a7716564aae3d19e</span><br></pre></td></tr></table></figure><p>三台机器执行命令：<code>etcd --config-file=/etc/etcd/conf.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 etcd]# etcd --config-file&#x3D;.&#x2F;conf-discovery2.yml </span><br><span class="line">2019-07-23 01:40:59.557398 I | etcdmain: Loading server configuration from &quot;.&#x2F;conf-discovery2.yml&quot;</span><br><span class="line">2019-07-23 01:40:59.558676 I | etcdmain: etcd Version: 3.3.13</span><br><span class="line">2019-07-23 01:40:59.558693 I | etcdmain: Git SHA: 98d3084</span><br><span class="line">2019-07-23 01:40:59.558701 I | etcdmain: Go Version: go1.10.8</span><br><span class="line">2019-07-23 01:40:59.558716 I | etcdmain: Go OS&#x2F;Arch: linux&#x2F;amd64</span><br><span class="line">2019-07-23 01:40:59.558726 I | etcdmain: setting maximum number of CPUs to 4, total number of available CPUs is 4</span><br><span class="line">2019-07-23 01:40:59.558950 I | embed: listening for peers on http:&#x2F;&#x2F;172.19.19.124:2380</span><br><span class="line">2019-07-23 01:40:59.559045 I | embed: listening for client requests on 127.0.0.1:2379</span><br><span class="line">2019-07-23 01:40:59.559111 I | embed: listening for client requests on 172.19.19.124:2379</span><br><span class="line">2019-07-23 01:40:59.576086 I | discovery: using proxy &quot;http:&#x2F;&#x2F;192.168.59.241:8888&quot;</span><br><span class="line">2019-07-23 01:41:01.489247 N | discovery: found peer 72c1c6de2cd8a18d in the cluster</span><br><span class="line">2019-07-23 01:41:01.489277 N | discovery: found peer 335a21e8bbfde639 in the cluster</span><br><span class="line">2019-07-23 01:41:01.489288 N | discovery: found self c5cd5d147247c226 in the cluster</span><br></pre></td></tr></table></figure><p>查看成员状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# etcdctl member list</span><br><span class="line">4ec2e078d2dd79af, started, etcd3, http:&#x2F;&#x2F;172.19.19.124:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.124:2379</span><br><span class="line">4f3cb37486cdc6d6, started, etcd1, http:&#x2F;&#x2F;172.19.19.122:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.122:2379</span><br><span class="line">558b1d86dce97a96, started, etcd2, http:&#x2F;&#x2F;172.19.19.123:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.123:2379</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# endpoints&#x3D;172.19.19.122:2379,172.19.19.124:2379,172.19.19.123:2379</span><br><span class="line">[root@jw-etcd01 ~]# etcdctl --endpoints&#x3D;$endpoints  endpoint status -w table</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|      ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| 172.19.19.122:2379 | 4f3cb37486cdc6d6 |  3.3.13 |   20 kB |      true |         2 |          8 |</span><br><span class="line">| 172.19.19.124:2379 | 4ec2e078d2dd79af |  3.3.13 |   20 kB |     false |         2 |          8 |</span><br><span class="line">| 172.19.19.123:2379 | 558b1d86dce97a96 |  3.3.13 |   20 kB |     false |         2 |          8 |</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><h3 id="DNS-SRV-Records"><a href="#DNS-SRV-Records" class="headerlink" title="DNS SRV Records"></a>DNS SRV Records</h3><p><code>etcd</code>基于dns做服务发现时，实际上利用了dns的srv记录不断轮询查询实现的，</p><p><code>dns srv</code>：是dns数据库支持的一种资源记录的类型，它记录了哪台计算机提供了哪个服务的简单记录和信息。</p><p>这里采用<code>dnsmasq</code>作为dns服务器。</p><p>提前在hostname为<code>etcd03</code>、ip为<code>172.19.19.124</code>机器上搭建好一台dns服务器。然后另外两台机器添加这台机器的dns服务器在第一位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# cat &#x2F;etc&#x2F;resolv.conf </span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">search 8.8.8.8</span><br><span class="line">nameserver 172.19.19.124</span><br><span class="line">nameserver 192.168.58.241</span><br><span class="line"></span><br><span class="line">[root@jw-etcd02 ~]# cat &#x2F;etc&#x2F;resolv.conf</span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">search 8.8.8.8</span><br><span class="line">nameserver 172.19.19.124</span><br><span class="line">nameserver 192.168.59.241</span><br></pre></td></tr></table></figure><h4 id="增加dns-srv记录"><a href="#增加dns-srv记录" class="headerlink" title="增加dns srv记录"></a>增加dns srv记录</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# vim &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line"># test etcd</span><br><span class="line">srv-host&#x3D;_etcd-server._tcp.hi-etcd.com,etcd1.hi-etcd.com,2380,0,100</span><br><span class="line">srv-host&#x3D;_etcd-server._tcp.hi-etcd.com,etcd2.hi-etcd.com,2380,0,100</span><br><span class="line">srv-host&#x3D;_etcd-server._tcp.hi-etcd.com,etcd3.hi-etcd.com,2380,0,100</span><br></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# vim &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line"># test etcd</span><br><span class="line">srv-host&#x3D;_etcd-client._tcp.hi-etcd.com,etcd1.hi-etcd.com,2379,0,100</span><br><span class="line">srv-host&#x3D;_etcd-client._tcp.hi-etcd.com,etcd2.hi-etcd.com,2379,0,100</span><br><span class="line">srv-host&#x3D;_etcd-client._tcp.hi-etcd.com,etcd3.hi-etcd.com,2379,0,100</span><br></pre></td></tr></table></figure><h4 id="增加对应的域名解析"><a href="#增加对应的域名解析" class="headerlink" title="增加对应的域名解析"></a>增加对应的域名解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# cat &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line"># test etcd</span><br><span class="line">172.19.19.124 etcd3.hi-etcd.com</span><br><span class="line">172.19.19.123 etcd2.hi-etcd.com</span><br><span class="line">172.19.19.122 etcd1.hi-etcd.com</span><br></pre></td></tr></table></figure><h4 id="重启dnsmasq"><a href="#重启dnsmasq" class="headerlink" title="重启dnsmasq"></a>重启dnsmasq</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart dnsmasq</span><br></pre></td></tr></table></figure><h4 id="查询dns-srv记录"><a href="#查询dns-srv记录" class="headerlink" title="查询dns srv记录"></a>查询dns srv记录</h4><p>没有该命令的先安装：<code>yum install bind-utils -y</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# dig +noall +answer SRV _etcd-server._tcp.hi-etcd.com</span><br><span class="line">_etcd-server._tcp.hi-etcd.com. 0 INSRV0 100 2380 etcd2.hi-etcd.com.</span><br><span class="line">_etcd-server._tcp.hi-etcd.com. 0 INSRV0 100 2380 etcd1.hi-etcd.com.</span><br><span class="line">_etcd-server._tcp.hi-etcd.com. 0 INSRV0 100 2380 etcd3.hi-etcd.com.</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 etcd]# dig +noall +answer SRV _etcd-client._tcp.hi-etcd.com</span><br><span class="line">_etcd-client._tcp.hi-etcd.com. 0 INSRV0 100 2379 etcd3.hi-etcd.com.</span><br><span class="line">_etcd-client._tcp.hi-etcd.com. 0 INSRV0 100 2379 etcd2.hi-etcd.com.</span><br><span class="line">_etcd-client._tcp.hi-etcd.com. 0 INSRV0 100 2379 etcd1.hi-etcd.com.</span><br></pre></td></tr></table></figure><ul><li><code>_etcd-server</code>：代表一个服务，名称应以下划线开头，比如：<code>_ldap</code>、<code>_ftp</code>、<code>_smtp</code>，该标识说明把这台服务器当做响应<code>etcd-server</code>请求的服务器。</li><li><code>_tcp</code>：本服务使用的协议，名称应以下划线开头，可以是tcp或者udp。</li><li><code>topsec-etcd.com</code>：此记录所在的域名。</li><li><code>300</code>：此记录默认生存的时间，以秒为单位。</li><li><code>IN</code>：标准DNS Internet类。</li><li><code>SRV</code>：将这条记录标识为SRV记录。</li><li><code>0</code>：优先级，如果相同的服务有多条记录，会尝试先连接优先级最低的记录。</li><li><code>100</code>：负载均衡机制，多条srv记录并且优先级也相同，那么会尝试连接权重最高的记录。</li><li><code>2380</code>：此服务使用的端口。</li><li><code>etcd1.topsec-etcd.com.</code>：提供此服务的主机。</li></ul><h4 id="查询域名解析结果"><a href="#查询域名解析结果" class="headerlink" title="查询域名解析结果"></a>查询域名解析结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# dig +noall +answer etcd1.hi-etcd.com etcd2.hi-etcd.com etcd3.hi-etcd.com</span><br><span class="line">etcd1.hi-etcd.com.0INA172.19.19.122</span><br><span class="line">etcd2.hi-etcd.com.0INA172.19.19.123</span><br><span class="line">etcd3.hi-etcd.com.0INA172.19.19.124</span><br></pre></td></tr></table></figure><h4 id="使用dns引导etcd集群"><a href="#使用dns引导etcd集群" class="headerlink" title="使用dns引导etcd集群"></a>使用dns引导etcd集群</h4><h5 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h5><p>编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name: etcd1</span><br><span class="line">discovery-srv: hi-etcd.com</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;etcd1.hi-etcd.com:2380</span><br><span class="line">initial-cluster-token: etcd-cluster-1</span><br><span class="line">initial-cluster-state: new</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.122:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.122:2380</span><br><span class="line">discovery-proxy: </span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;etcd1.hi-etcd.com:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name: etcd2</span><br><span class="line">discovery-srv: hi-etcd.com</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;etcd2.hi-etcd.com:2380</span><br><span class="line">initial-cluster-token: etcd-cluster-1</span><br><span class="line">initial-cluster-state: new</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.123:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.123:2380</span><br><span class="line">discovery-proxy: </span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;etcd2.hi-etcd.com:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name: etcd3</span><br><span class="line">discovery-srv: hi-etcd.com</span><br><span class="line">initial-advertise-peer-urls: http:&#x2F;&#x2F;etcd3.hi-etcd.com:2380</span><br><span class="line">initial-cluster-token: etcd-cluster-1</span><br><span class="line">initial-cluster-state: new</span><br><span class="line">listen-client-urls: http:&#x2F;&#x2F;172.19.19.124:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line">listen-peer-urls: http:&#x2F;&#x2F;172.19.19.124:2380</span><br><span class="line">discovery-proxy: </span><br><span class="line">advertise-client-urls: http:&#x2F;&#x2F;etcd3.hi-etcd.com:2379,http:&#x2F;&#x2F;127.0.0.1:2379</span><br></pre></td></tr></table></figure><p>三台机器分别执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcd --config-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;conf-discovery-dns.yml</span><br></pre></td></tr></table></figure><p>查看成员状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 etcd]# etcdctl member list</span><br><span class="line">5ee0e04e205fa694, started, etcd3, http:&#x2F;&#x2F;etcd3.hi-etcd.com:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;etcd3.hi-etcd.com:2379</span><br><span class="line">9a99a7e8e3abdf6a, started, etcd2, http:&#x2F;&#x2F;etcd2.hi-etcd.com:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;etcd2.hi-etcd.com:2379</span><br><span class="line">efb48b68f151a3b7, started, etcd1, http:&#x2F;&#x2F;etcd1.hi-etcd.com:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;etcd1.hi-etcd.com:2379</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 etcd]#  endpoints&#x3D;etcd1.hi-etcd.com:2379,etcd2.hi-etcd.com:2379,etcd3.hi-etcd.com:2379</span><br><span class="line"></span><br><span class="line">[root@jw-etcd01 etcd]# etcdctl --endpoints&#x3D;$endpoints  endpoint status -w table</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|        ENDPOINT        |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| etcd1.hi-etcd.com:2379 | efb48b68f151a3b7 |  3.3.13 |   20 kB |     false |         4 |          9 |</span><br><span class="line">| etcd2.hi-etcd.com:2379 | 9a99a7e8e3abdf6a |  3.3.13 |   20 kB |     false |         4 |          9 |</span><br><span class="line">| etcd3.hi-etcd.com:2379 | 5ee0e04e205fa694 |  3.3.13 |   20 kB |      true |         4 |          9 |</span><br><span class="line">+------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>etcd简介</title>
      <link href="/etcd%E7%AE%80%E4%BB%8B.html"/>
      <url>/etcd%E7%AE%80%E4%BB%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>etcd</code>是用go语言编写的一个开源的、分布式的键值对存储服务。但它不仅仅是存储，还可以用于配置共享和服务发现等功能。其四个核心特点：</p><ul><li>简单：基于HTTP+JSON的API让你用curl命令就可以轻松使用。</li><li>安全：可选SSL客户认证机制。</li><li>快速：每个实例每秒支持一千次写操作。</li><li>可信：使用Raft算法充分实现了分布式。</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="/uploads/etcd%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt=""></p><h2 id="相关词汇表"><a href="#相关词汇表" class="headerlink" title="相关词汇表"></a>相关词汇表</h2><ul><li><code>Raft</code>：<code>etcd</code>所采用的保证分布式系统强一致性的算法。</li><li><code>Node</code>：一个<code>Raft</code>状态机实例。</li><li><code>Member</code>： 一个<code>etcd</code>实例。它管理着一个<code>Node</code>，并且可以为客户端请求提供服务。</li><li><code>Cluster</code>：由多个<code>Member</code>构成可以协同工作的<code>etcd</code>集群。</li><li><code>Peer</code>：对同一个<code>etcd</code>集群中另外一个<code>Member</code>的称呼。</li><li><code>Client</code>： 向<code>etcd</code>集群发送HTTP请求的客户端。</li><li><code>WAL</code>：预写式日志，<code>etcd</code>用于持久化存储的日志格式。</li><li><code>snapshot</code>：<code>etcd</code>防止<code>WAL</code>文件过多而设置的快照，存储<code>etcd</code>数据状态。</li><li><code>Proxy</code>：<code>etcd</code>的一种模式，为<code>etcd</code>集群提供反向代理服务。</li><li><code>Leader：</code>Raft`算法中通过竞选而产生的处理所有数据提交的节点。</li><li><code>Follower</code>：竞选失败的节点作为<code>Raft</code>中的从属节点，为算法提供强一致性保证。</li><li><code>Candidate</code>：当<code>Follower</code>超过一定时间接收不到<code>Leader</code>的心跳时转变为<code>Candidate</code>开始<code>Leader</code>竞选。</li><li><code>Term</code>：某个节点成为<code>Leader</code>到下一次竞选开始的时间周期，称为一个<code>Term</code>。</li><li><code>Index</code>：数据项编号。<code>Raft</code>中通过<code>Term</code>和<code>Index</code>来定位数据。</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 选择下载的版本</span><br><span class="line">VERSION&#x3D;v3.3.13</span><br><span class="line"></span><br><span class="line"># 设置下载的url</span><br><span class="line">DOWNLOAD_URL&#x3D;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases&#x2F;download</span><br><span class="line"></span><br><span class="line"># 创建安装目录</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;etcd</span><br><span class="line"></span><br><span class="line"># curl下载</span><br><span class="line">curl -L $&#123;DOWNLOAD_URL&#125;&#x2F;$&#123;VERSION&#125;&#x2F;etcd-$&#123;VERSION&#125;-linux-amd64.tar.gz -o &#x2F;tmp&#x2F;etcd-$&#123;VERSION&#125;-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar xzvf &#x2F;tmp&#x2F;etcd-$&#123;VERSION&#125;-linux-amd64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;etcd --strip-components&#x3D;1</span><br><span class="line"></span><br><span class="line"># 删除下载</span><br><span class="line">rm -f &#x2F;tmp&#x2F;etcd-$&#123;VERSION&#125;-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line"># add etcd</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;etcd</span><br><span class="line">export ETCDCTL_API&#x3D;3</span><br><span class="line"></span><br><span class="line"># 配置生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h2 id="编写systemd服务"><a href="#编写systemd服务" class="headerlink" title="编写systemd服务"></a>编写systemd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 写入文件</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;etcd.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;etcd</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;etcd</span><br><span class="line">Conflicts&#x3D;etcd.service</span><br><span class="line">Conflicts&#x3D;etcd2.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;notify</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;5s</span><br><span class="line">LimitNOFILE&#x3D;40000</span><br><span class="line">TimeoutStartSec&#x3D;0</span><br><span class="line"></span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;etcd&#x2F;etcd --config-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;conf-discovery-dns.yml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 重新加载配置</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 启动etcd</span><br><span class="line">systemctl start etcd</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>我这里编写的是etcd集群服务。通过dns发现的机制引导集群。单机的etcd服务需要自行更改<code>ExecStart</code>。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># etcd</span><br><span class="line">[root@jw-centos1 ~]# etcd --version</span><br><span class="line">etcd Version: 3.3.13</span><br><span class="line">Git SHA: 98d3084</span><br><span class="line">Go Version: go1.10.8</span><br><span class="line">Go OS&#x2F;Arch: linux&#x2F;amd64</span><br><span class="line"></span><br><span class="line"># etcdctl</span><br><span class="line">[root@jw-centos1 ~]# etcdctl version</span><br><span class="line">etcdctl version: 3.3.13</span><br><span class="line">API version: 3.3</span><br></pre></td></tr></table></figure><h3 id="设置一个key"><a href="#设置一个key" class="headerlink" title="设置一个key"></a>设置一个key</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-centos1 ~]# etcdctl put foo bar</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@jw-centos1 ~]# etcdctl get foo</span><br><span class="line">foo</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>如果确定打印，那么<code>etcd</code>正在运行！</p>]]></content>
      
      
      <categories>
          
          <category> Etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>etcd集群演示</title>
      <link href="/etcd%E9%9B%86%E7%BE%A4%E6%BC%94%E7%A4%BA.html"/>
      <url>/etcd%E9%9B%86%E7%BE%A4%E6%BC%94%E7%A4%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="集群演示"><a href="#集群演示" class="headerlink" title="集群演示"></a>集群演示</h1><p>集群的方式有三种，这里只是静态配置的机制来引导。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>有三种方式配置<code>etcd</code>。优先级：配置文件 &gt; 命令行 &gt; 环境变量。</p><p>准备好三台机器，安装好<code>etcd</code>，在每个<code>etcd</code>节点上，添加配置文件来指定集群成员。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 创建etcd配置文件夹</span><br><span class="line">mkdir /etc/etcd</span><br><span class="line"></span><br><span class="line"># 创建配置yaml文件</span><br><span class="line">cat &gt; /etc/etcd/conf.yml &lt;&lt;EOF</span><br><span class="line">name: etcd<span class="number">-1</span></span><br><span class="line">data-dir: /etc/etcd/data</span><br><span class="line">listen-client-urls: http:<span class="comment">//172.19.19.122:2379,http://127.0.0.1:2379</span></span><br><span class="line">advertise-client-urls: http:<span class="comment">//172.19.19.122:2379,http://127.0.0.1:2379</span></span><br><span class="line">listen-peer-urls: http:<span class="comment">//172.19.19.122:2380</span></span><br><span class="line">initial-advertise-peer-urls: http:<span class="comment">//172.19.19.122:2380</span></span><br><span class="line">initial-cluster: etcd<span class="number">-1</span>=http:<span class="comment">//172.19.19.122:2380,etcd-2=http://172.19.19.123:2380,etcd-3=http://172.19.19.124:2380</span></span><br><span class="line">initial-cluster-token: etcd-cluster-token</span><br><span class="line">initial-cluster-state: <span class="built_in">new</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 该etcd使用的api版本为v3，配置环境变量：后面的相关命令就可以不用指定</span><br><span class="line">ENDPOINTS=<span class="number">172.19</span><span class="number">.19</span><span class="number">.122</span>:<span class="number">2379</span>,<span class="number">172.19</span><span class="number">.19</span><span class="number">.123</span>:<span class="number">2379</span>,<span class="number">172.19</span><span class="number">.19</span><span class="number">.124</span>:<span class="number">2379</span></span><br></pre></td></tr></table></figure><p>另外两台机器，更改对应的<code>name</code>，和相关的<code>ip:port</code>即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 创建etcd配置文件夹</span><br><span class="line">mkdir /etc/etcd</span><br><span class="line"></span><br><span class="line"># 创建配置yaml文件</span><br><span class="line">cat &gt; /etc/etcd/conf.yml &lt;&lt;EOF</span><br><span class="line">name: etcd<span class="number">-2</span></span><br><span class="line">data-dir: /etc/etcd/data</span><br><span class="line">listen-client-urls: http:<span class="comment">//172.19.19.123:2379,http://127.0.0.1:2379</span></span><br><span class="line">advertise-client-urls: http:<span class="comment">//172.19.19.123:2379,http://127.0.0.1:2379</span></span><br><span class="line">listen-peer-urls: http:<span class="comment">//172.19.19.123:2380</span></span><br><span class="line">initial-advertise-peer-urls: http:<span class="comment">//172.19.19.123:2380</span></span><br><span class="line">initial-cluster: etcd<span class="number">-1</span>=http:<span class="comment">//172.19.19.122:2380,etcd-2=http://172.19.19.123:2380,etcd-3=http://172.19.19.124:2380</span></span><br><span class="line">initial-cluster-token: etcd-cluster-token</span><br><span class="line">initial-cluster-state: <span class="built_in">new</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 该etcd使用的api版本为v3，配置环境变量：后面的相关命令就可以不用指定</span><br><span class="line">ENDPOINTS=<span class="number">172.19</span><span class="number">.19</span><span class="number">.122</span>:<span class="number">2379</span>,<span class="number">172.19</span><span class="number">.19</span><span class="number">.123</span>:<span class="number">2379</span>,<span class="number">172.19</span><span class="number">.19</span><span class="number">.124</span>:<span class="number">2379</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 创建etcd配置文件夹</span><br><span class="line">mkdir /etc/etcd</span><br><span class="line"></span><br><span class="line"># 创建配置yaml文件</span><br><span class="line">cat &gt; /etc/etcd/conf.yml &lt;&lt;EOF</span><br><span class="line">name: etcd<span class="number">-3</span></span><br><span class="line">data-dir: /etc/etcd/data</span><br><span class="line">listen-client-urls: http:<span class="comment">//172.19.19.124:2379,http://127.0.0.1:2379</span></span><br><span class="line">advertise-client-urls: http:<span class="comment">//172.19.19.124:2379,http://127.0.0.1:2379</span></span><br><span class="line">listen-peer-urls: http:<span class="comment">//172.19.19.124:2380</span></span><br><span class="line">initial-advertise-peer-urls: http:<span class="comment">//172.19.19.124:2380</span></span><br><span class="line">initial-cluster: etcd<span class="number">-1</span>=http:<span class="comment">//172.19.19.122:2380,etcd-2=http://172.19.19.123:2380,etcd-3=http://172.19.19.124:2380</span></span><br><span class="line">initial-cluster-token: etcd-cluster-token</span><br><span class="line">initial-cluster-state: <span class="built_in">new</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 该etcd使用的api版本为v3，配置环境变量：后面的相关命令就可以不用指定</span><br><span class="line">ENDPOINTS=<span class="number">172.19</span><span class="number">.19</span><span class="number">.122</span>:<span class="number">2379</span>,<span class="number">172.19</span><span class="number">.19</span><span class="number">.123</span>:<span class="number">2379</span>,<span class="number">172.19</span><span class="number">.19</span><span class="number">.124</span>:<span class="number">2379</span></span><br></pre></td></tr></table></figure><h2 id="配置字段说明"><a href="#配置字段说明" class="headerlink" title="配置字段说明"></a>配置字段说明</h2><h3 id="–name"><a href="#–name" class="headerlink" title="–name"></a>–name</h3><ul><li>该成员的名称</li><li>env：<code>ETCD_NAME</code></li><li>默认值：<code>default</code></li></ul><h3 id="–data-dir"><a href="#–data-dir" class="headerlink" title="–data-dir"></a>–data-dir</h3><ul><li>数据目录的路径</li><li>env：<code>ETCD_DATA_DIR</code></li><li>默认值： <code>${name}.etcd</code></li></ul><h3 id="–listen-client-urls"><a href="#–listen-client-urls" class="headerlink" title="–listen-client-urls"></a>–listen-client-urls</h3><ul><li>要监听客户端流量的URL列表。此标志告诉etcd接受来自客户端的指定https(http):// ip:port的传入请求。域名无效。</li><li>env：<code>ETCD_LISTEN_CLIENT_URLS</code></li><li>默认值：<code>http://localhost:2379/</code></li></ul><h3 id="–advertise-client-urls"><a href="#–advertise-client-urls" class="headerlink" title="–advertise-client-urls"></a>–advertise-client-urls</h3><ul><li>此成员的客户端URL列表，用于通告群集的其余部分。这些URL可以包含域名。</li><li>env：<code>ETCD_ADVERTISE_CLIENT_URLS</code></li><li>默认值：<code>http://localhost:2379/</code></li></ul><h3 id="–listen-peer-urls"><a href="#–listen-peer-urls" class="headerlink" title="–listen-peer-urls"></a>–listen-peer-urls</h3><ul><li>侦听对等流量的URL列表。此标志告诉etcd接受来自其对等体的指定https(http):// ip:port传入请求。域名无效。</li><li>env：<code>ETCD_LISTEN_PEER_URLS</code></li><li>默认值：<code>http://localhost:2380/</code></li></ul><h3 id="–initial-advertise-peer-urls"><a href="#–initial-advertise-peer-urls" class="headerlink" title="–initial-advertise-peer-urls"></a>–initial-advertise-peer-urls</h3><ul><li>此成员的对等URL的列表，用于通告群集的其余部分。这些地址用于在集群周围传输etcd数据。必须至少有一个可路由到所有集群成员。这些URL可以包含域名。</li><li>env：<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code></li><li>默认值：<code>http://localhost:2380/</code></li></ul><h3 id="–initial-cluster"><a href="#–initial-cluster" class="headerlink" title="–initial-cluster"></a>–initial-cluster</h3><ul><li>引导的初始集群配置</li><li>env：<code>ETCD_INITIAL_CLUSTER</code></li><li>默认值：<code>http://localhost:2380/</code></li></ul><h3 id="–initial-cluster-token"><a href="#–initial-cluster-token" class="headerlink" title="–initial-cluster-token"></a>–initial-cluster-token</h3><ul><li>引导期间etcd集群的初始集群令牌</li><li>env：<code>ETCD_INITIAL_CLUSTER_TOKEN</code></li><li>默认值：<code>etcd-cluster</code></li></ul><h3 id="–initial-cluster-state"><a href="#–initial-cluster-state" class="headerlink" title="–initial-cluster-state"></a>–initial-cluster-state</h3><ul><li>初始集群状态：<code>new</code> or <code>existing</code>，设置<code>new</code>为初始静态或DNS引导期间出现的所有成员。如果将此选项设置为<code>existing</code>，则etcd将尝试加入现有群集。如果设置了错误的值，etcd将尝试启动但安全失败。</li><li>env：<code>ETCD_INITIAL_CLUSTER_STATE</code></li><li>默认值：<code>new</code></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在每台机器上运行。启动命令为：<code>etcd --config-file=/etc/etcd/conf.yml</code></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><h3 id="查看集群成员"><a href="#查看集群成员" class="headerlink" title="查看集群成员"></a>查看集群成员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl member list</span><br><span class="line">1f83556bca2b8a68, started, etcd-2, http:&#x2F;&#x2F;172.19.19.123:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.123:2379</span><br><span class="line">7e41f23968a025a0, started, etcd-3, http:&#x2F;&#x2F;172.19.19.124:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.124:2379</span><br><span class="line">d7e3204f9f2095cc, started, etcd-1, http:&#x2F;&#x2F;172.19.19.122:2380, http:&#x2F;&#x2F;127.0.0.1:2379,http:&#x2F;&#x2F;172.19.19.122:2379</span><br></pre></td></tr></table></figure><h3 id="集群健康检查"><a href="#集群健康检查" class="headerlink" title="集群健康检查"></a>集群健康检查</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl --endpoints=$ENDPOINTS endpoint health</span><br><span class="line"><span class="number">172.19</span><span class="number">.19</span><span class="number">.122</span>:<span class="number">2379</span> is healthy: successfully committed proposal: took = <span class="number">1.827468</span>ms</span><br><span class="line"><span class="number">172.19</span><span class="number">.19</span><span class="number">.124</span>:<span class="number">2379</span> is healthy: successfully committed proposal: took = <span class="number">1.935687</span>ms</span><br><span class="line"><span class="number">172.19</span><span class="number">.19</span><span class="number">.123</span>:<span class="number">2379</span> is healthy: successfully committed proposal: took = <span class="number">2.141641</span>ms</span><br></pre></td></tr></table></figure><h3 id="集群健康状态"><a href="#集群健康状态" class="headerlink" title="集群健康状态"></a>集群健康状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl --endpoints&#x3D;$ENDPOINTS endpoint status -w table</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|      ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| 172.19.19.122:2379 | dfaea2c8a602307f |  3.3.13 |   20 kB |      true |      1087 |          9 |</span><br><span class="line">| 172.19.19.123:2379 | 3a4962cd88561ea0 |  3.3.13 |   20 kB |     false |      1087 |          9 |</span><br><span class="line">| 172.19.19.124:2379 | 3e6ee7f8b997733a |  3.3.13 |   20 kB |     false |      1087 |          9 |</span><br><span class="line">+--------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl put foo &#39;Hello Etcd!&#39;</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd01 ~]# etcdctl get foo</span><br><span class="line">foo</span><br><span class="line">Hello Etcd!</span><br></pre></td></tr></table></figure><h3 id="通过前缀获取"><a href="#通过前缀获取" class="headerlink" title="通过前缀获取"></a>通过前缀获取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># put</span><br><span class="line">[root@jw-etcd01 ~]# etcdctl put web1 value1</span><br><span class="line">OK</span><br><span class="line">[root@jw-etcd01 ~]# etcdctl put web2 value2</span><br><span class="line">OK</span><br><span class="line">[root@jw-etcd01 ~]# etcdctl put web3 value3</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"># get</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl get web --prefix</span><br><span class="line">web1</span><br><span class="line">value1</span><br><span class="line">web2</span><br><span class="line">value2</span><br><span class="line">web3</span><br><span class="line">value3</span><br></pre></td></tr></table></figure><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl put key value</span><br><span class="line">OK</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl get key</span><br><span class="line">key</span><br><span class="line">value</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl del key</span><br><span class="line">1</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl del key</span><br><span class="line">0</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl put k1 v1</span><br><span class="line">OK</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl put k2 v2</span><br><span class="line">OK</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl del k --prefix</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>先在一台机器上<code>watch</code>监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcdctl watch stock1</span><br></pre></td></tr></table></figure><p>之后会等待状态。在另一台机器上<code>put</code>一个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl put stock1 1000</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>再回来看之前监听的机器上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcdctl watch stock1</span><br><span class="line">PUT</span><br><span class="line">stock1</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><p>再删除这个<code>key</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl del stock1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcdctl watch stock1</span><br><span class="line">PUT</span><br><span class="line">stock1</span><br><span class="line">1000</span><br><span class="line">PUT</span><br><span class="line">stock1</span><br><span class="line">2000</span><br><span class="line">DELETE</span><br><span class="line">stock1</span><br></pre></td></tr></table></figure><p>也就是这个命令会一直监听这个key的增删。</p><h3 id="lease"><a href="#lease" class="headerlink" title="lease"></a>lease</h3><h4 id="创建一个lease"><a href="#创建一个lease" class="headerlink" title="创建一个lease"></a>创建一个lease</h4><p><code>lease grant time</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lease grant 30</span><br><span class="line">lease 733a6c05eaa6c67a granted with TTL(30s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl put k v --lease&#x3D;733a6c05eaa6c67a</span><br><span class="line">OK</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl get k</span><br><span class="line">k</span><br><span class="line">v</span><br></pre></td></tr></table></figure><h4 id="查看到期时间"><a href="#查看到期时间" class="headerlink" title="查看到期时间"></a>查看到期时间</h4><p><code>lease timetoliv LeaseID</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lease timetoliv 733a6c05eaa6c67a</span><br><span class="line">lease 733a6c05eaa6c67a granted with TTL(30s), remaining(11s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease timetoliv 733a6c05eaa6c67a</span><br><span class="line">lease 733a6c05eaa6c67a granted with TTL(30s), remaining(5s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl get k</span><br><span class="line">[root@jw-etcd03 ~]#</span><br></pre></td></tr></table></figure><h4 id="查看所有lease"><a href="#查看所有lease" class="headerlink" title="查看所有lease"></a>查看所有lease</h4><p><code>lease list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lease grant 300</span><br><span class="line">lease 733a6c05eaa6c68e granted with TTL(300s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease grant 300</span><br><span class="line">lease 733a6c05eaa6c690 granted with TTL(300s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease grant 300</span><br><span class="line">lease 733a6c05eaa6c692 granted with TTL(300s)</span><br><span class="line"># 查看lease</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease list</span><br><span class="line">found 3 leases</span><br><span class="line">733a6c05eaa6c68e</span><br><span class="line">733a6c05eaa6c690</span><br><span class="line">733a6c05eaa6c692</span><br></pre></td></tr></table></figure><h4 id="移除lease"><a href="#移除lease" class="headerlink" title="移除lease"></a>移除lease</h4><p><code>lease revoke LeaseID</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lease revoke 733a6c05eaa6c692</span><br><span class="line">lease 733a6c05eaa6c692 revoked</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease list</span><br><span class="line">found 2 leases</span><br><span class="line">733a6c05eaa6c68e</span><br><span class="line">733a6c05eaa6c690</span><br></pre></td></tr></table></figure><h4 id="续订lease"><a href="#续订lease" class="headerlink" title="续订lease"></a>续订lease</h4><p><code>lease keep-alive LeaseID</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lease timetolive 733a6c05eaa6c690</span><br><span class="line">lease 733a6c05eaa6c690 granted with TTL(300s), remaining(126s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease timetolive 733a6c05eaa6c690</span><br><span class="line">lease 733a6c05eaa6c690 granted with TTL(300s), remaining(125s)</span><br><span class="line">[root@jw-etcd03 ~]# etcdctl lease keep-alive 733a6c05eaa6c690</span><br><span class="line">lease 733a6c05eaa6c690 keepalived with TTL(300)</span><br></pre></td></tr></table></figure><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><p>先在一台机器创建锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcdctl lock mutex02</span><br><span class="line">mutex02&#x2F;1ea06c042f957064</span><br></pre></td></tr></table></figure><p>再去另一台机器创建(会卡住)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lock mutex02</span><br></pre></td></tr></table></figure><p>返回之前机器，强行停止：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd02 ~]# etcdctl lock mutex02</span><br><span class="line">mutex02&#x2F;1ea06c042f957064</span><br><span class="line"></span><br><span class="line">^C[root@jw-etcd02 ~]#</span><br></pre></td></tr></table></figure><p>然后，第二台机器就可以用，会自己生成一个锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw-etcd03 ~]# etcdctl lock mutex02</span><br><span class="line">mutex02&#x2F;733a6c05eaa6c6b2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Etcd </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的接口</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8E%A5%E5%8F%A3.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8E%A5%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的接口"><a href="#go语言的接口" class="headerlink" title="go语言的接口"></a>go语言的接口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>接口是双方规定的一种合作协议，接口实现者不需要关心接口会被怎样使用，调用者不需要关心接口的实现细节。接口是一种类型。也是一种抽象结构。不会暴露所含数据的格式、类型及结构。比如只要一台洗衣机有洗衣服的功能和甩干的功能，我们就称为洗衣机，不关心属性(数据)，只关心行为(方法)。</li><li>接口和其他动态语言的鸭子模型有密切关系。比如说<code>python</code>、<code>javascript</code>。任何类型，只要实现了该接口中的方法集，那么就属于这个类型。</li><li>每个接口由数个方法组成。</li></ul><h2 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h2><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口类型名 <span class="keyword">interface</span> &#123;</span><br><span class="line">    方法名<span class="number">1</span>( 参数列表<span class="number">1</span> ) 返回值列表<span class="number">1</span></span><br><span class="line">    方法名<span class="number">2</span>( 参数列表<span class="number">2</span> ) 返回值列表<span class="number">2</span></span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口类型名：使用<code>type</code>将接口定义为自定义的类型名</li><li>方法名：当方法名首字母是大写时，且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包之外的代码访问。</li><li>参数列表、返回值列表：参数列表和返回值列表的参数变量名可以被忽略</li></ul><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以吃</span></span><br><span class="line"><span class="keyword">type</span> Eat <span class="keyword">interface</span> &#123;</span><br><span class="line">    eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个接口时，只知道他有一个<code>eat()</code>方法。并不知道谁实现了这些接口，也不知道是怎么实现的这些这个方法的。</p><h2 id="实现接口的条件"><a href="#实现接口的条件" class="headerlink" title="实现接口的条件"></a>实现接口的条件</h2><ul><li>接口的方法与实现接口的类型方法格式一致</li><li>接口的方法与实现接口的类型方法数目保持一致。即接口中的所有方法均被实现。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个鸭子类型接口</span></span><br><span class="line"><span class="keyword">type</span> Duck <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 鸭子叫</span></span><br><span class="line">    GaGa()</span><br><span class="line">    <span class="comment">// 鸭子走</span></span><br><span class="line">    YouYong()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个小鸡类型的结构体</span></span><br><span class="line"><span class="keyword">type</span> Chicken <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为小鸡结构体实现GaGa</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Chicken)</span> <span class="title">GaGa</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"我是小鸡，但我也会嘎嘎叫"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为小鸡结构体实现YouYong</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Chicken)</span> <span class="title">YouYong</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"我是小鸡，但我也会游泳"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例化一个小鸡</span></span><br><span class="line">    c := <span class="built_in">new</span>(Chicken)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个小鸡小鸭合体类型</span></span><br><span class="line">    <span class="keyword">var</span> duckChicken Duck = c</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小鸡小鸭开始嘎嘎</span></span><br><span class="line">    duckChicken.GaGa()</span><br><span class="line">    <span class="comment">// 小鸡小鸭开始游泳</span></span><br><span class="line">    duckChicken.YouYong()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来，<code>duckChicken</code>可以直接调用<code>GaGa</code>和<code>YouYong</code>。他并不知道这两个方法内部怎么实现的。</p><h2 id="值类型接收者和指针型接收者实现接口"><a href="#值类型接收者和指针型接收者实现接口" class="headerlink" title="值类型接收者和指针型接收者实现接口"></a>值类型接收者和指针型接收者实现接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个汪汪叫的接口</span></span><br><span class="line"><span class="keyword">type</span> WangWager <span class="keyword">interface</span> &#123;</span><br><span class="line">    Wang()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个狗结构体</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span> <span class="title">Wang</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(<span class="string">"汪汪叫"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d1 := Dog&#123;<span class="string">"小狗1"</span>&#125;</span><br><span class="line">    d2 := &amp;Dog&#123;</span><br><span class="line">        <span class="string">"小狗2"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> w1 WangWager = d1</span><br><span class="line">    w1.Wang()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> w2 WangWager = d2</span><br><span class="line">    w2.Wang()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，使用值类型实现接口后，不管dog结构体实例化是指针型还是值类型。都可以赋值给该接口变量。因为go语言内部有对指针类型变量求值的语法糖。</p><p>但是指针型实现接口后，只能指针型变量赋值给接口变量。</p><h2 id="类型与接口的关系"><a href="#类型与接口的关系" class="headerlink" title="类型与接口的关系"></a>类型与接口的关系</h2><p>类型与接口有一对多和多对多的关系。</p><h3 id="一-类型-对多-接口-："><a href="#一-类型-对多-接口-：" class="headerlink" title="一(类型)对多(接口)："></a>一(类型)对多(接口)：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Writer接口</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Writer(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Closer接口</span></span><br><span class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Closer() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个socket结构体类型</span></span><br><span class="line"><span class="keyword">type</span> Socket <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为socket实现一个Writer()方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Socket)</span> <span class="title">Writer</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"开始写入"</span>)</span><br><span class="line">    <span class="keyword">return</span> n, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为socket实现一个Closer()方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Socket)</span> <span class="title">Closer</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"开始关闭"</span>)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，负责写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useWriter</span><span class="params">(w Writer)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 执行w接口的写方法</span></span><br><span class="line">    _, _ := w.Writer(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个函数，负责关闭</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useCloser</span><span class="params">(c Closer)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 执行c接口的关闭方法</span></span><br><span class="line">    _ := c.Closer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"理解类型与接口的关系"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型和接口之间有一对多和多对一的关系。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个类型可以实现多个接口</span></span><br><span class="line">    <span class="comment">// 实例化socker结构体</span></span><br><span class="line">    s := <span class="built_in">new</span>(Socket)</span><br><span class="line">    useWriter(s)</span><br><span class="line">    useCloser(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出两个函数完全独立，完全不知道对方的存在，也不知道使用自己的接口是socket使用的</p><h3 id="多-类型-对一-接口"><a href="#多-类型-对一-接口" class="headerlink" title="多(类型)对一(接口)"></a>多(类型)对一(接口)</h3><p>接口的方法不一定要一个结构体类型完全实现，接口的方法可以通过结构体嵌入实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个服务接口，实现了服务开启和日志输出的方法</span></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span> &#123;</span><br><span class="line">    Start()     <span class="comment">// 启动服务</span></span><br><span class="line">    Log(<span class="keyword">string</span>) <span class="comment">// 日志输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个游戏服务结构体</span></span><br><span class="line"><span class="keyword">type</span> GameService <span class="keyword">struct</span> &#123;</span><br><span class="line">    Logger <span class="comment">// 内嵌logger结构体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为游戏结构体实现游戏服务的启动method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameService)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"游戏服务启动成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个日志器结构体</span></span><br><span class="line"><span class="keyword">type</span> Logger <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为日志服务器结构体实现日志输出的method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Logger)</span> <span class="title">Log</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个类型可以实现相同的接口</span></span><br><span class="line">    <span class="keyword">var</span> ser Service = <span class="built_in">new</span>(GameService)</span><br><span class="line">    ser.Start()</span><br><span class="line">    ser.Log(<span class="string">"日志输出"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，服务接口下一个服务启动功能和日志输出功能，但是游戏服务类型并没有实现日志输出功能，而是间接通过内嵌日志类型来实现，日志类型实现了日志输出功能，所有游戏服务类型实现的接口可以直接使用日志输出功能。</p><h2 id="接口的嵌套组合"><a href="#接口的嵌套组合" class="headerlink" title="接口的嵌套组合"></a>接口的嵌套组合</h2><p>不仅类型与类型之间可以嵌套，接口与接口之间也可以嵌套。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Say接口</span></span><br><span class="line"><span class="keyword">type</span> Say <span class="keyword">interface</span> &#123;</span><br><span class="line">    Say(s <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Run接口</span></span><br><span class="line"><span class="keyword">type</span> Run <span class="keyword">interface</span> &#123;</span><br><span class="line">    Run(n <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Skill接口</span></span><br><span class="line"><span class="keyword">type</span> Skill <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 嵌套了两个接口</span></span><br><span class="line">    Say</span><br><span class="line">    Run</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Person结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Person结构体实现Say方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">Say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"说话："</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Person结构体实现Run方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">Run</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"步数："</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实现人的结构体的技能类型</span></span><br><span class="line">    <span class="keyword">var</span> s Skill = <span class="built_in">new</span>(Person)</span><br><span class="line">    s.Say(<span class="string">"Life Is Short Let's Go"</span>)</span><br><span class="line">    s.Run(<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现哑巴(人)结构体的技能类型，无法说话，只能跑步</span></span><br><span class="line">    <span class="keyword">var</span> yaBa Run = <span class="built_in">new</span>(Person)</span><br><span class="line">    yaBa.Run(<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2><p>空接口是接口类型的特殊形式，空接口没有任何方法。因此任何类型都无须实现，从实现的角度来看。任何值都满足这个接口的需求。因此空接口类型可以保存任何值，也可以从中取值。</p><h3 id="保存值"><a href="#保存值" class="headerlink" title="保存值"></a>保存值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 将各种数据类型的值保存到空接口</span></span><br><span class="line">    <span class="keyword">var</span> any <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    any = <span class="number">1</span></span><br><span class="line">    fmt.Println(any)</span><br><span class="line">    any = <span class="number">0.99</span></span><br><span class="line">    fmt.Println(any)</span><br><span class="line">    any = <span class="string">"Hello Gp"</span></span><br><span class="line">    fmt.Println(any)</span><br><span class="line">    any = <span class="literal">true</span></span><br><span class="line">    fmt.Println(any)</span><br><span class="line">    any = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    fmt.Println(any)</span><br><span class="line">    any = [...]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    fmt.Println(any)</span><br><span class="line">    any = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    fmt.Println(any)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空接口的应用"><a href="#空接口的应用" class="headerlink" title="空接口的应用"></a>空接口的应用</h3><h4 id="空接口作为函数的参数"><a href="#空接口作为函数的参数" class="headerlink" title="空接口作为函数的参数"></a>空接口作为函数的参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span>  &#123;</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    show(<span class="string">"江子牙"</span>)</span><br><span class="line">    show(<span class="number">520</span>)</span><br><span class="line">    show(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空接口作为map的value"><a href="#空接口作为map的value" class="headerlink" title="空接口作为map的value"></a>空接口作为map的value</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">"name"</span>:    <span class="string">"江子牙"</span>,</span><br><span class="line">        <span class="string">"age"</span>:     <span class="number">21</span>,</span><br><span class="line">        <span class="string">"isLogin"</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口和类型之间的转换"><a href="#接口和类型之间的转换" class="headerlink" title="接口和类型之间的转换"></a>接口和类型之间的转换</h2><p>go 语言中使用接口断言(type assertions) 将接口转换成另一外一个接口，也可以将接口转另外的类型。使用非常频繁。</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := i.(T)</span><br></pre></td></tr></table></figure><ul><li>i：代表接口变量</li><li>T：代表转换的目标类型</li><li>t：转换后的变量</li></ul><p>如果i没有完全实现T接口的方法，这个语句会触发宕机，触发宕机不是很友好，因为有另一种保守写法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t, ok := i.(T)</span><br></pre></td></tr></table></figure><p>这种写法的好处就是如果发送接口未实现时，将会返回一个布尔值<code>false</code>，即<code>ok</code>的值，而且t的类型为0。正常实现时，<code>ok</code>为<code>true</code>。</p><h3 id="接口转化为其他接口"><a href="#接口转化为其他接口" class="headerlink" title="接口转化为其他接口"></a>接口转化为其他接口</h3><p>例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义飞行动物接口</span></span><br><span class="line"><span class="keyword">type</span> Flyer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Fly(s <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义爬行动物接口</span></span><br><span class="line"><span class="keyword">type</span> Walker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Walk(s <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义小鸟类结构体</span></span><br><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义小猪类结构体</span></span><br><span class="line"><span class="keyword">type</span> Pig <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为小鸟类实现飞的技能和走路的技能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bird)</span> <span class="title">Fly</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"小鸟飞行："</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bird)</span> <span class="title">Walk</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"小鸟走路："</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为小猪实现走路的技能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pig)</span> <span class="title">Walk</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"死猪跑不动吗："</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 先创建一个字典来存放接口的信息。</span></span><br><span class="line">    animals := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">"bird"</span>: <span class="built_in">new</span>(Bird),</span><br><span class="line">        <span class="string">"pig"</span>:  <span class="built_in">new</span>(Pig),</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(animals)</span><br><span class="line">    <span class="comment">// 循环map</span></span><br><span class="line">    <span class="keyword">for</span> name, obj := <span class="keyword">range</span> animals &#123;</span><br><span class="line">        <span class="comment">// 类型断言：判断obj是爬行动物还是飞行动物</span></span><br><span class="line">        f, isFly := obj.(Flyer)</span><br><span class="line">        w, isWalk := obj.(Walker)</span><br><span class="line">        fmt.Printf(<span class="string">"name：%s\tisFlyer：%v\tisWalker：%v\n"</span>, name, isFly, isWalk)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类型判断</span></span><br><span class="line">        <span class="keyword">if</span> isFly &#123;</span><br><span class="line">            f.Fly(<span class="string">"100米"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> isWalk &#123;</span><br><span class="line">            w.Walk(<span class="string">"1000步"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口转化为类型"><a href="#接口转化为类型" class="headerlink" title="接口转化为类型"></a>接口转化为类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义爬行动物接口</span></span><br><span class="line"><span class="keyword">type</span> Walker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Walk(s <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义小猪类结构体</span></span><br><span class="line"><span class="keyword">type</span> Pig <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为小猪实现走路的技能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pig)</span> <span class="title">Walk</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"死猪跑不动吗："</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 将接口转为其他类型：可以实现将接口转为普通的指针类型</span></span><br><span class="line">    <span class="comment">// 实例化出一个小猪结构体</span></span><br><span class="line">    p1 := <span class="built_in">new</span>(Pig)</span><br><span class="line">    <span class="comment">// 声明一个类型为小猪爬行类w接口</span></span><br><span class="line">    <span class="keyword">var</span> w Walker = p1</span><br><span class="line">    fmt.Println(w)</span><br><span class="line">    fmt.Printf(<span class="string">"%T\n"</span>, w)</span><br><span class="line">    fmt.Printf(<span class="string">"%T\n"</span>, p1)</span><br><span class="line">    <span class="comment">// 将w接口转为*Pig类型</span></span><br><span class="line">    p2 := w.(*Pig)</span><br><span class="line">    fmt.Printf(<span class="string">"p1 = %p\np2 = %p"</span>, p1, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123;&#125;</span><br><span class="line">*main.Pig</span><br><span class="line">*main.Pig</span><br><span class="line">p1 = <span class="number">0x5861b0</span></span><br><span class="line">p2 = <span class="number">0x5861b0</span></span><br></pre></td></tr></table></figure><h2 id="判断接口中变量的类型"><a href="#判断接口中变量的类型" class="headerlink" title="判断接口中变量的类型"></a>判断接口中变量的类型</h2><h3 id="判断基本类型"><a href="#判断基本类型" class="headerlink" title="判断基本类型"></a>判断基本类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        fmt.Println(<span class="string">"int类型"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        fmt.Println(<span class="string">"string类型"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">        fmt.Println(<span class="string">"bool类型"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"不知名类型"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用类型分支判断基本类型</span></span><br><span class="line">    printType(<span class="string">"str"</span>)</span><br><span class="line">    printType(<span class="number">1</span>)</span><br><span class="line">    printType(<span class="literal">true</span>)</span><br><span class="line">    printType([]<span class="keyword">string</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>类型</span><br><span class="line"><span class="keyword">int</span>类型</span><br><span class="line"><span class="keyword">bool</span>类型</span><br><span class="line">不知名类型</span><br></pre></td></tr></table></figure><h3 id="判断接口类型"><a href="#判断接口类型" class="headerlink" title="判断接口类型"></a>判断接口类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷脸的接口</span></span><br><span class="line"><span class="keyword">type</span> useFace <span class="keyword">interface</span> &#123;</span><br><span class="line">    Face(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷人民币值为100的接口</span></span><br><span class="line"><span class="keyword">type</span> useOneHundred <span class="keyword">interface</span> &#123;</span><br><span class="line">    OneHundred(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付宝方式结构体</span></span><br><span class="line"><span class="keyword">type</span> Alipy <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现金方式方式结构体</span></span><br><span class="line"><span class="keyword">type</span> Cash <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为支付宝提供人脸支付的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Alipy)</span> <span class="title">Face</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为现金支付提供支付100元的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cash)</span> <span class="title">OneHundred</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPay</span><span class="params">(payMethod <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pay = payMethod</span><br><span class="line">    <span class="comment">// 判断接口类型</span></span><br><span class="line">    <span class="keyword">switch</span> payMethod.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> useFace:</span><br><span class="line">        face := pay.(*Alipy)</span><br><span class="line">        face.Face(<span class="string">"刷脸"</span>)</span><br><span class="line">    <span class="keyword">case</span> useOneHundred:</span><br><span class="line">        cash := pay.(*Cash)</span><br><span class="line">        cash.OneHundred(<span class="string">"支付100毛爷爷"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用类型分支判断接口类型</span></span><br><span class="line">    printPay(<span class="built_in">new</span>(Alipy))</span><br><span class="line">    printPay(<span class="built_in">new</span>(Cash))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">刷脸</span><br><span class="line">支付<span class="number">100</span>毛爷爷</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的切片</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%87%E7%89%87.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%87%E7%89%87.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的切片"><a href="#go语言的切片" class="headerlink" title="go语言的切片"></a>go语言的切片</h1><p>因为数组的长度固定不变并且长度也是数组类型的一部分，所以它有很多局限性。这时有了一种新的数据类型。在go语言中叫做切片(<code>slice</code>)</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>切片是一个拥有相同数据类型元素的可变长度的序列。它是基于数组类型做的一层封装，它非常灵活，支持自动扩容。</p><p>切片是一个引用类型，它的内部结构包含<code>地址</code>、<code>长度</code>和<code>容量</code>。切片一般用于快速地操作一块数据集合。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>基本语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 切片变量名 []切片元素类型</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>切片必须初始化或者<code>append</code>之后才能使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := []<span class="keyword">float64</span>&#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类型：[]float64值：[]float64&#123;1.1, 2.2, 3.3&#125;</span></span><br><span class="line">    fmt.Printf(<span class="string">"类型：%T\t值：%#v\n"</span>, slice, slice)</span><br><span class="line">    <span class="comment">// [1.1 2.2 3.3]</span></span><br><span class="line">    fmt.Println(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成切片"><a href="#生成切片" class="headerlink" title="生成切片"></a>生成切片</h2><h3 id="基于数组"><a href="#基于数组" class="headerlink" title="基于数组"></a>基于数组</h3><p>切片的底层就是数组，可以通过数组得到切片。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    array1 := [<span class="number">5</span>]<span class="keyword">float64</span>&#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>&#125;</span><br><span class="line">    slice1 := array1[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到切片：[2.2 3.3 4.4 5.5]</span></span><br><span class="line">    fmt.Println(slice1)</span><br><span class="line">    <span class="comment">// 类型：[]float64</span></span><br><span class="line">    fmt.Printf(<span class="string">"%T"</span>,slice1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的切片和python的列表类似，顾头不顾尾，还支持省略头和尾</p><h3 id="make函数"><a href="#make函数" class="headerlink" title="make函数"></a>make函数</h3><p>上面都是基于数组来创建的切片，如果需要动态的创建一个切片，我们就需要使用内置的<code>make()</code>函数，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, size, <span class="built_in">cap</span>)</span><br></pre></td></tr></table></figure><ul><li>T：切片元素类型</li><li>size：切片中元素数量</li><li>cap：切片的容量，设置后，不影响size，只是提前分配空间，降低多次分配空间造成的性能问题</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// [0 0]</span></span><br><span class="line">    fmt.Println(slice)</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice))</span><br><span class="line">    <span class="comment">// 10</span></span><br><span class="line">    fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中<code>slice</code>的内部存储空间已经分配了10个，但实际上只用了2个。 容量并不会影响当前元素的个数，所以<code>len(slice)</code>返回2，<code>cap(slice)</code>则返回该切片的容量。</p><h2 id="切片的长度和容量"><a href="#切片的长度和容量" class="headerlink" title="切片的长度和容量"></a>切片的长度和容量</h2><p>切片拥有自己的长度和容量，我们可以通过使用内置的<code>len()</code>函数求长度，使用内置的<code>cap()</code>函数求切片的容量。</p><p>切片的底层是数组，长度指当前切片内的元素数目。容量指底层数组的容下的最大元素数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    array1 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">    slice1 := array1[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    fmt.Println(<span class="string">"长度："</span>, <span class="built_in">len</span>(slice1))</span><br><span class="line">    <span class="comment">// 9</span></span><br><span class="line">    fmt.Println(<span class="string">"容量："</span>, <span class="built_in">cap</span>(slice1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片的常用操作"><a href="#切片的常用操作" class="headerlink" title="切片的常用操作"></a>切片的常用操作</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h4><p>当切片容量不够时，可以通过<code>append()</code>扩容，最简单的扩容规律按两倍数扩充：1,2,4…</p><p>扩容规律还有其他情况，这里暂不讨论。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> slice6 []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">        slice6 = <span class="built_in">append</span>(slice6, i)</span><br><span class="line">        <span class="comment">// 打印扩容情况</span></span><br><span class="line">        fmt.Printf(<span class="string">"长度：%d     cap：%d      指针：%p\n"</span>, <span class="built_in">len</span>(slice6), <span class="built_in">cap</span>(slice6), slice6)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">长度：<span class="number">1</span>     <span class="built_in">cap</span>：<span class="number">1</span>      指针：<span class="number">0xc000056080</span></span><br><span class="line">长度：<span class="number">2</span>     <span class="built_in">cap</span>：<span class="number">2</span>      指针：<span class="number">0xc0000560c0</span></span><br><span class="line">长度：<span class="number">3</span>     <span class="built_in">cap</span>：<span class="number">4</span>      指针：<span class="number">0xc0000540c0</span></span><br><span class="line">长度：<span class="number">4</span>     <span class="built_in">cap</span>：<span class="number">4</span>      指针：<span class="number">0xc0000540c0</span></span><br><span class="line">长度：<span class="number">5</span>     <span class="built_in">cap</span>：<span class="number">8</span>      指针：<span class="number">0xc0000680c0</span></span><br><span class="line">长度：<span class="number">6</span>     <span class="built_in">cap</span>：<span class="number">8</span>      指针：<span class="number">0xc0000680c0</span></span><br><span class="line">长度：<span class="number">7</span>     <span class="built_in">cap</span>：<span class="number">8</span>      指针：<span class="number">0xc0000680c0</span></span><br><span class="line">长度：<span class="number">8</span>     <span class="built_in">cap</span>：<span class="number">8</span>      指针：<span class="number">0xc0000680c0</span></span><br><span class="line">长度：<span class="number">9</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">10</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">11</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">12</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">13</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">14</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">15</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">16</span>     <span class="built_in">cap</span>：<span class="number">16</span>      指针：<span class="number">0xc000086080</span></span><br><span class="line">长度：<span class="number">17</span>     <span class="built_in">cap</span>：<span class="number">32</span>      指针：<span class="number">0xc00003c100</span></span><br><span class="line">长度：<span class="number">18</span>     <span class="built_in">cap</span>：<span class="number">32</span>      指针：<span class="number">0xc00003c100</span></span><br><span class="line">长度：<span class="number">19</span>     <span class="built_in">cap</span>：<span class="number">32</span>      指针：<span class="number">0xc00003c100</span></span><br><span class="line">长度：<span class="number">20</span>     <span class="built_in">cap</span>：<span class="number">32</span>      指针：<span class="number">0xc00003c100</span></span><br></pre></td></tr></table></figure><h4 id="多个元素"><a href="#多个元素" class="headerlink" title="多个元素"></a>多个元素</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> slice6 []<span class="keyword">int</span></span><br><span class="line">    </span><br><span class="line">    slice6 = <span class="built_in">append</span>(slice6, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    fmt.Println(slice6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加切片"><a href="#添加切片" class="headerlink" title="添加切片"></a>添加切片</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> slice6 []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    slice6 = <span class="built_in">append</span>(slice6, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// [1 2 3 4]</span></span><br><span class="line">    fmt.Println(slice6)</span><br><span class="line"></span><br><span class="line">    slice6 = <span class="built_in">append</span>(slice6,[]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;...)</span><br><span class="line">    <span class="comment">// [1 2 3 4 5 6 7]</span></span><br><span class="line">    fmt.Println(slice6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>go语言中并没有提供切片删除元素的方法，但是我们可以使用切片本身的特性来删除元素。</p><p>本质：以被删除的元素为分界点，将前后两个部分的内存重新连接起来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>&#125;</span><br><span class="line">    <span class="comment">// 删除c</span></span><br><span class="line">    slice = <span class="built_in">append</span>(slice[:<span class="number">2</span>],slice[<span class="number">3</span>:]...)</span><br><span class="line">    fmt.Println(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的数组</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的数组"><a href="#go语言的数组" class="headerlink" title="go语言的数组"></a>go语言的数组</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>数组是同一种数据类型元素的集合，固定大小的连续空间，和Python这种动态语言的列表有点区别。</p><p>数组长度在声明时已经确定，或者编译器确定了，后期可以修改数组成员，但是不能修改大小。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组变量名 [元素数量]类型</span><br></pre></td></tr></table></figure><p>声明一个变量名为<code>team</code>，长度为4，元素类型为<code>string</code>的数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team [<span class="number">4</span>]<span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>数组的长度必须是常量。长度是数组类型的一部分，比如<code>var team1 [2]string</code>和<code>team</code>类型是不一样的。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="空数组"><a href="#空数组" class="headerlink" title="空数组"></a>空数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kong = []<span class="keyword">string</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>使用初始化列表来设置数组元素的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 声明并初始化</span></span><br><span class="line">    <span class="keyword">var</span> team  = [<span class="number">4</span>]<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"Go"</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [Linux Python Java Go]</span></span><br><span class="line">    fmt.Println(team)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>让编译器确定数组的长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 让编译器确定数组的长度</span><br><span class="line">    var team &#x3D; [...]string&#123;&quot;Linux&quot;, &quot;Python&quot;,&quot;Java&quot;,&quot;Go&quot;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; [Linux Python Java Go]</span><br><span class="line">    fmt.Println(team)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>还可以使用指定索引值的方式来初始化数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 指定索引值的方式来初始化数</span></span><br><span class="line">    <span class="keyword">var</span> team = [...]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"Linux"</span>, <span class="number">2</span>: <span class="string">"Python"</span>,<span class="number">4</span>: <span class="string">"Java"</span>,<span class="number">3</span>: <span class="string">"Go"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [Linux Python Java Go]</span></span><br><span class="line">    fmt.Println(team)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="for-range"><a href="#for-range" class="headerlink" title="for range"></a>for range</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> team = [...]<span class="keyword">string</span>&#123;<span class="number">0</span>: <span class="string">"Linux"</span>, <span class="number">1</span>: <span class="string">"Python"</span>,<span class="number">3</span>: <span class="string">"Java"</span>,<span class="number">2</span>: <span class="string">"Go"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组遍历：for range</span></span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> team &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"索引：%d\t索引值：%v\n"</span>, index, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> team = [...]<span class="keyword">string</span>&#123;<span class="number">0</span>: <span class="string">"Linux"</span>, <span class="number">1</span>: <span class="string">"Python"</span>, <span class="number">3</span>: <span class="string">"Java"</span>, <span class="number">2</span>: <span class="string">"Go"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(team); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"索引：%d\t索引值：%v\n"</span>, i, team[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种结果一样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">索引：<span class="number">0</span>索引值：Linux</span><br><span class="line">索引：<span class="number">1</span>索引值：Python</span><br><span class="line">索引：<span class="number">2</span>索引值：Go</span><br><span class="line">索引：<span class="number">3</span>索引值：Java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的函数</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的函数"><a href="#go语言的函数" class="headerlink" title="go语言的函数"></a>go语言的函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在任何编程语言中，函数就是对功能的封装，是组织好的，可重复使用，用于执行指定功能的代码块。在go语言中，函数属于一等公民。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在go语言当中，用<code>func</code>定义一个函数，格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名 <span class="params">(参数)</span> <span class="params">(返回值)</span></span> &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数名：由数字、字母、下划线组成。但是不能以数字开头，在同一个包内，函数名不能重复。</li><li>参数：一个参数由参数变量和参数类型组成，多个参数之间用<code>,</code>分隔。</li><li>返回值：可以是返回值类型，也可以是返回值变量和返回值类型组成。多个返回值用<code>()</code>包裹。并<code>,</code>分隔。</li><li>函数体：实现指定功能的代码块。</li></ul><p>定义一个求两数之和的函数并调用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个求两数之和的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用</span></span><br><span class="line">    res := add(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment">// 300</span></span><br><span class="line">    fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="参数简写"><a href="#参数简写" class="headerlink" title="参数简写"></a>参数简写</h4><p>当两个相邻参数的类型相同时，可以简写，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>有时候我们不知道我们传的参数有多少个，可以通过不固定参数来解决。在参数名后面加<code>...</code>来标识。类似python中的<code>*args</code> 、<code>**kwargs</code>。</p><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名 <span class="params">(固定参数, v ... T)</span> <span class="params">(返回值)</span></span> &#123;</span><br><span class="line">                函数体</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>v：可变参数变量，类型为<code>[]T</code> ，也就是拥有多个元素的类型切片 ，v 和 t 之间用 <code>...</code>。</li><li>T：可变参数变量类型，当类型为<code>interface{}</code>的时候，传入的值可以是任意值。</li></ul><h4 id="可变参数为多个字符串"><a href="#可变参数为多个字符串" class="headerlink" title="可变参数为多个字符串"></a>可变参数为多个字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">studentInfo</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>, args ...<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"固定参数："</span>, name, age)</span><br><span class="line">    fmt.Println(<span class="string">"不固定参数："</span>, args)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过遍历获取每一个参数</span></span><br><span class="line">    <span class="keyword">for</span> index, arg := <span class="keyword">range</span> args &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"索引：%d  参数值：%s\n"</span>, index, arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    studentInfo(<span class="string">"江子牙"</span>, <span class="number">21</span>, <span class="string">"江西省"</span>, <span class="string">"萍乡市"</span>, <span class="string">"莲花县"</span>, <span class="string">"坊楼镇"</span>, <span class="string">"小江村"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">固定参数： 江子牙 <span class="number">21</span></span><br><span class="line">不固定参数： [江西省 萍乡市 莲花县 坊楼镇 小江村]</span><br><span class="line">索引：<span class="number">0</span>  参数值：江西省</span><br><span class="line">索引：<span class="number">1</span>  参数值：萍乡市</span><br><span class="line">索引：<span class="number">2</span>  参数值：莲花县</span><br><span class="line">索引：<span class="number">3</span>  参数值：坊楼镇</span><br><span class="line">索引：<span class="number">4</span>  参数值：小江村</span><br></pre></td></tr></table></figure><h4 id="可变参数为空接口"><a href="#可变参数为空接口" class="headerlink" title="可变参数为空接口"></a>可变参数为空接口</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">studentInfo</span><span class="params">(name <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"固定参数"</span>, name)</span><br><span class="line">    fmt.Println(<span class="string">"不固定参数"</span>, args)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过遍历获取每一个参数的类型</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> args &#123;</span><br><span class="line"></span><br><span class="line">        fmt.Printf(<span class="string">"索引：%d  \t参数的类型：%T\t参数值：%v\n"</span>, k, v, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    studentInfo(<span class="string">"江子牙"</span>, <span class="number">22</span>, <span class="number">99.9</span>, <span class="string">"sex"</span>, <span class="literal">true</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"className"</span>: <span class="string">"高三(1)班"</span>,</span><br><span class="line">        <span class="string">"score"</span>:     <span class="string">"99"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">固定参数 江子牙</span><br><span class="line">不固定参数 [<span class="number">22</span> <span class="number">99.9</span> sex <span class="literal">true</span> <span class="keyword">map</span>[className:高三(<span class="number">1</span>)班 score:<span class="number">99</span>]]</span><br><span class="line">索引：<span class="number">0</span>  参数的类型：<span class="keyword">int</span>参数值：<span class="number">22</span></span><br><span class="line">索引：<span class="number">1</span>  参数的类型：<span class="keyword">float64</span>参数值：<span class="number">99.9</span></span><br><span class="line">索引：<span class="number">2</span>  参数的类型：<span class="keyword">string</span>参数值：sex</span><br><span class="line">索引：<span class="number">3</span>  参数的类型：<span class="keyword">bool</span>参数值：<span class="literal">true</span></span><br><span class="line">索引：<span class="number">4</span>  参数的类型：<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>参数值：<span class="keyword">map</span>[className:高三(<span class="number">1</span>)班 score:<span class="number">99</span>]</span><br></pre></td></tr></table></figure><p>本质上，可变参数是根据切片来实现的。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h4 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h4><p>go语言是支持多个返回值，如果有多个返回值就要用<code>()</code>包裹。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义一个求两数之和、两数之差的函数</span><br><span class="line">func cacl(a, b int) (int, int) &#123;</span><br><span class="line">    sum :&#x3D; a + b</span><br><span class="line">    sub :&#x3D; a - b</span><br><span class="line">    return sum, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    sum, sub :&#x3D; cacl(10, 10)</span><br><span class="line">    &#x2F;&#x2F; 两数之和 20</span><br><span class="line">    fmt.Println(&quot;两数之和&quot;, sum)</span><br><span class="line">    &#x2F;&#x2F; 两数之差 0</span><br><span class="line">    fmt.Println(&quot;两数之差&quot;, sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回值命名"><a href="#返回值命名" class="headerlink" title="返回值命名"></a>返回值命名</h4><p>返回值可以和参数一样，由返回值变量和返回值变量类型组成。最后由<code>return</code>关键字返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个求两数之和、两数之差的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacl</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(sum, sub <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sum = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum, sub := cacl(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 两数之和 20</span></span><br><span class="line">    fmt.Println(<span class="string">"两数之和"</span>, sum)</span><br><span class="line">    <span class="comment">// 两数之差 0</span></span><br><span class="line">    fmt.Println(<span class="string">"两数之差"</span>, sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>全局变量定义在函数外部的变量。它在程序整个运行周期内都有效，在函数中可以访问到全局变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个全局变量a 、b</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">10</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个求两数之和、两数之差的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacl</span><span class="params">()</span> <span class="params">(sum, sub <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"两个全局变量："</span>,a, b)</span><br><span class="line">    sum = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum, sub := cacl()</span><br><span class="line">    <span class="comment">// 两数之和 20</span></span><br><span class="line">    fmt.Println(<span class="string">"两数之和"</span>, sum)</span><br><span class="line">    <span class="comment">// 两数之差 0</span></span><br><span class="line">    fmt.Println(<span class="string">"两数之差"</span>, sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><h4 id="函数内部定义的局部变量函数外部无法访问"><a href="#函数内部定义的局部变量函数外部无法访问" class="headerlink" title="函数内部定义的局部变量函数外部无法访问"></a>函数内部定义的局部变量函数外部无法访问</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testLocalVar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    local := <span class="string">"我是函数内部的局部变量，函数外部无法访问我"</span></span><br><span class="line">    fmt.Println(local)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    testLocalVar()</span><br><span class="line">    <span class="comment">//fmt.Println(local) 访问不到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局变量和局部变量同时存在"><a href="#全局变量和局部变量同时存在" class="headerlink" title="全局变量和局部变量同时存在"></a>全局变量和局部变量同时存在</h4><p>如果局部变量和全局变量同名，优先访问局部变量，就近原则。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量num</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int64</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testNum</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">100</span></span><br><span class="line">    <span class="comment">//函数中优先使用局部变量</span></span><br><span class="line">    fmt.Println(<span class="string">"局部变量的num："</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    testNum()</span><br><span class="line">    fmt.Println(<span class="string">"全局变量的num："</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型与函数变量"><a href="#函数类型与函数变量" class="headerlink" title="函数类型与函数变量"></a>函数类型与函数变量</h3><p>函数也是一种类型，也可以赋值给一个变量保存起来。</p><h4 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f:= add</span><br><span class="line">    fmt.Printf(<span class="string">"类型：%T\n"</span>, f)</span><br><span class="line">    sum := f(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出函数也是一种类型，就像上面的<code>add</code>函数，用变量名保存起来之后，打印它的类型，<code>func(int, int) int</code>,函数变量名加<code>()</code>也可以调用。</p><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型：<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function">3</span></span><br></pre></td></tr></table></figure><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><p>既然函数也是一种类型，那么也可以声明一个函数类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个cacl函数类型</span></span><br><span class="line"><span class="keyword">type</span> cacl <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c cacl</span><br><span class="line">    c = add</span><br><span class="line">    fmt.Printf(<span class="string">"类型：%T\n"</span>, c)</span><br><span class="line">    sum := c(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型：main.cacl</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>满足其中一个条件为高阶函数</p><ul><li>函数作为参数传入</li><li>函数作为返回值返回</li></ul><h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacl</span><span class="params">(a, b <span class="keyword">int</span>, f <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := f(a, b)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    res := cacl(<span class="number">10</span>, <span class="number">10</span>, add)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个计算的函数，根据传入的操作字符串执行对应的加减</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacl</span><span class="params">(do <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">error</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> do &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"加"</span>:</span><br><span class="line">        <span class="keyword">return</span> sum, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"减"</span>:</span><br><span class="line">        <span class="keyword">return</span> sub, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        err := errors.New(<span class="string">"不支持该操作"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    do1, _ := cacl(<span class="string">"加"</span>)</span><br><span class="line">    sum := do1(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">    do2, _ := cacl(<span class="string">"减"</span>)</span><br><span class="line">    sub := do2(<span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">    fmt.Println(sub)</span><br><span class="line"></span><br><span class="line">    do2, err := cacl(<span class="string">"乘"</span>)</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">不支持该操作</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>在其他语言中，函数内部还可以定义函数，即函数嵌套。但是go语言函数内部不能再像以前那样定义函数了，只能定义匿名函数。顾名思义就是没有函数名字的函数，常用于回调函数和闭包。</p><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(参数)</span> <span class="params">(返回值)</span></span> &#123;</span><br><span class="line">                函数体</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以当做没有函数名字的普通函数定义</span></span><br></pre></td></tr></table></figure><p>因为没有函数名了，不能和普通函数那样直接调用。匿名函数需要保存到某个变量或者立即作为函数执行。</p><h4 id="保存为变量"><a href="#保存为变量" class="headerlink" title="保存为变量"></a>保存为变量</h4><p>定义一个匿名函数之后，保存到变量中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        sum := a + b</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">    sum := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h4><p>定义一个匿名函数之后，后面直接加<code>()，</code>立即执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        sum := a + b</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>函数是编译期静态的概念，闭包是运行期动态的概念。</p><p><code>闭包 = 函数 + 引用环境</code></p><h4 id="闭包示例1"><a href="#闭包示例1" class="headerlink" title="闭包示例1"></a>闭包示例1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        x += y</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// f是一个函数，应用了其外部作用域的x变量，此时f就是一个闭包，在f的声明周期内，x变量一直有效</span></span><br><span class="line">    f := adder()</span><br><span class="line">    fmt.Println(f(<span class="number">10</span>)) <span class="comment">//10</span></span><br><span class="line">    fmt.Println(f(<span class="number">20</span>)) <span class="comment">//30</span></span><br><span class="line">    fmt.Println(f(<span class="number">30</span>)) <span class="comment">//60</span></span><br><span class="line"></span><br><span class="line">    f1 := adder()</span><br><span class="line">    fmt.Println(f1(<span class="number">40</span>)) <span class="comment">//40</span></span><br><span class="line">    fmt.Println(f1(<span class="number">50</span>)) <span class="comment">//90</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="闭包示例2"><a href="#闭包示例2" class="headerlink" title="闭包示例2"></a>闭包示例2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个字符串变量</span></span><br><span class="line">    str1 := <span class="string">"hello world"</span></span><br><span class="line">    fmt.Printf(<span class="string">"修改之前---%s\n"</span>, str1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个匿名函数</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        str1 = <span class="string">"hello go"</span></span><br><span class="line">    &#125;()</span><br><span class="line">    fmt.Printf(<span class="string">"修改后---%s\n"</span>, str1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名函数中并没有定义<code>str1</code>，也不是通过参数传递的方式。就算通过传递参数话的方式。由于字符串不可变。不会对原有字符串发生改变。但是却对<code>str1</code>进行了修改。</p><p><code>str1</code> 的定义在匿名函数之前，此时，<code>str1</code>就被引用到匿名函数中形成了闭包。</p><h4 id="闭包示例3"><a href="#闭包示例3" class="headerlink" title="闭包示例3"></a>闭包示例3</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，返回值为一个匿名函数，匿名函数与原函数形成闭包，把name 、hp 返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Gen</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    hp := <span class="number">150</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name, hp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    gen := Gen(<span class="string">"天使彦"</span>)</span><br><span class="line">    <span class="comment">// 通过匿名函数和闭包，返回天使彦的名字和血量</span></span><br><span class="line">    name, hp := gen()</span><br><span class="line">    fmt.Println(name, hp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出闭包还具有一定的封装性，血量是无法从外部修改的，与面向对象的封装类似，限制外部内内部的访问权限。</p><p>闭包很灵活，记住一句话，<code>闭包 = 函数 + 引用环境</code>。</p><h3 id="defer语句"><a href="#defer语句" class="headerlink" title="defer语句"></a>defer语句</h3><p>这是go语言独有的特性，延时执行语句。</p><p>延时语句会在所在函数结束时进行。函数结束可以是正常返回时，也可以是发生宕机时。</p><p>由于<code>defer</code>语句延迟调用的特性，所以<code>defer</code>语句能非常方便的处理资源释放问题。比如：资源清理、文件关闭、解锁及记录时间等。</p><p>类似于栈，先进后出。先defer的语句最后执行，后defer的语句最先执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"----start----"</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="string">"----end----"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----start----</span><br><span class="line">----end----</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="宕机-panic-和宕机恢复-recover"><a href="#宕机-panic-和宕机恢复-recover" class="headerlink" title="宕机(panic)和宕机恢复(recover)"></a>宕机(panic)和宕机恢复(recover)</h3><ul><li><code>panic</code>：终止程序运行</li><li><code>recover</code>：防止程序崩溃</li></ul><p>go语言目前还没有异常机制，但使用<code>panic/recover</code>模式来处理错误，<code>panic</code>可以在任何地方引发，但<code>recover</code>只在<code>defer</code>调用的函数中有效。</p><p>可以手动触发宕机。让程序崩溃。开发者能及时的发现错误，同时减少可能的损失。</p><h4 id="示例1：手动触发宕机"><a href="#示例1：手动触发宕机" class="headerlink" title="示例1：手动触发宕机"></a>示例1：手动触发宕机</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPanic</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(<span class="string">"start"</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"宕机"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"end"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    testPanic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line"><span class="built_in">panic</span>: 宕机</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">main.testPanic()</span><br><span class="line">    D:/Study/Go_Study/src/golang/study/day04、函数/test.<span class="keyword">go</span>:<span class="number">7</span> +<span class="number">0x9d</span></span><br><span class="line">main.main()</span><br><span class="line">    D:/Study/Go_Study/src/golang/study/day04、函数/test.<span class="keyword">go</span>:<span class="number">12</span> +<span class="number">0x27</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="示例2：宕机后执行defer语句"><a href="#示例2：宕机后执行defer语句" class="headerlink" title="示例2：宕机后执行defer语句"></a>示例2：宕机后执行defer语句</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPanic</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(<span class="string">"start"</span>)</span><br><span class="line">    <span class="comment">// 在宕机时触发延迟执行语句</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"宕机要做的第二件事"</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"宕机要做的第一件事"</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"宕机"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    testPanic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">宕机要做的第一件事</span><br><span class="line">宕机要做的第二件事</span><br><span class="line"><span class="built_in">panic</span>: 宕机</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">main.testPanic()</span><br><span class="line">    D:/Study/Go_Study/src/golang/study/day04、函数/test.<span class="keyword">go</span>:<span class="number">10</span> +<span class="number">0x151</span></span><br><span class="line">main.main()</span><br><span class="line">    D:/Study/Go_Study/src/golang/study/day04、函数/test.<span class="keyword">go</span>:<span class="number">14</span> +<span class="number">0x27</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="示例3：宕机恢复"><a href="#示例3：宕机恢复" class="headerlink" title="示例3：宕机恢复"></a>示例3：宕机恢复</h4><p>无论是代码运行错误，抛出的宕机错误，还是主动触发的宕机错误，都可以配合defer和recover实现错误捕捉和恢复，让代码崩溃后继续运行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testRecover</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 延时语句捕捉宕机</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"开始捕捉"</span>)</span><br><span class="line">        err := <span class="built_in">recover</span>()</span><br><span class="line">        fmt.Println(<span class="string">"捕捉成功，错误为："</span>, err)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"发生宕机了，之后执行defer语句，defer语句执行匿名函数，函数内部recover()捕捉错误，继续执行"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    testRecover()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开始捕捉</span><br><span class="line">捕捉成功，错误为： 发生宕机了，之后执行<span class="keyword">defer</span>语句，<span class="keyword">defer</span>语句执行匿名函数，函数内部<span class="built_in">recover</span>()捕捉错误，继续执行</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>recover()</code>必须搭配<code>defer</code>使用。</li><li><code>defer</code>一定要在可能引发<code>panic</code>的语句之前定义。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的指针</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的指针"><a href="#go语言的指针" class="headerlink" title="go语言的指针"></a>go语言的指针</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在c语言中，指针是很难理解的一个知识。在go语言中，相关操作也简化了好多。</p><p>基本数据类型，变量存的就是值，也就是值类型。值类型都有对应的指针类型，形式为*值类型。</p><p>指针也是一种数据类型，属于引用类型。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>指针类型：<code>*int</code>、<code>*int64</code>、<code>*string</code>、<code>*struct</code>。</li><li>指针地址：对变量进行取地址操作用<code>&amp;</code>符合。</li><li>指针取值：根据取到的地址取其对应的值用<code>*</code>符号。</li></ul><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个int的变量num</span></span><br><span class="line">    <span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">    <span class="comment">// 对num进行取地址操作</span></span><br><span class="line">    <span class="keyword">var</span> ptr1 *<span class="keyword">int</span> = &amp;num</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ptr1的类型：*intptr1的值 ：0xc00 0086010</span></span><br><span class="line">    fmt.Printf(<span class="string">"ptr1的类型：%T\tptr1的值：%p\n"</span>, ptr1, ptr1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据取到的地址取其对应的值</span></span><br><span class="line">    tmp := *ptr1</span><br><span class="line">    <span class="comment">// 10</span></span><br><span class="line">    fmt.Println(tmp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 临时变量存取a指向的值</span></span><br><span class="line">    tmp := *a</span><br><span class="line"></span><br><span class="line">    <span class="comment">// b指向的值赋值给a</span></span><br><span class="line">    *a = *b</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 临时变量赋值给b</span></span><br><span class="line">    *b = tmp</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 利用指针交换两个数的值</span></span><br><span class="line"></span><br><span class="line">    a := <span class="number">100</span></span><br><span class="line">    b := <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"交换前："</span>, a, b)</span><br><span class="line">    swap(&amp;a, &amp;b)</span><br><span class="line">    fmt.Println(<span class="string">"交换后："</span>, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言的结构体</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93.html"/>
      <url>/go%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言的结构体"><a href="#go语言的结构体" class="headerlink" title="go语言的结构体"></a>go语言的结构体</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>go语言中没有类的概念，也不支持类的继承等面向对象的概念, 但在结构体的内嵌配合接口比面向对象更具更高的扩展性和灵活性。</p><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体<code>struct</code>，通过结构体来实现面向对象。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>使用<code>type</code>和<code>struct</code>关键字来定义结构体，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>类型名：表示自定义结构体的名称，在同一个包内不能重复。</li><li>字段名：表示结构体字段名，结构体中的名字必须唯一。</li><li>字段类型：表示结构体字段的具体类型。</li></ul><p>举个例子，定义一个坐标结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">    X <span class="keyword">int</span></span><br><span class="line">    Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同种类型的字段也可以放一行，定义一个颜色的三原色结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Color <span class="keyword">struct</span> &#123;</span><br><span class="line">    R, G, B <span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的实例化"><a href="#结构体的实例化" class="headerlink" title="结构体的实例化"></a>结构体的实例化</h2><p>结构体的定义只是一种内存布局的描述，此时并不会分配内存，只有实例化的时候才会真正分配内存。</p><p>在定义结构体并实例化才能使用结构体字段，有多重实例方式。</p><h3 id="基本实例化"><a href="#基本实例化" class="headerlink" title="基本实例化"></a>基本实例化</h3><p>结构体本身是一种类型，可以像声明变量一样，以 var 的方式声明结构体即可完成实例化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 结构体实例 结构体类型</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 Person</span><br><span class="line">    p1.name = <span class="string">"江子牙"</span></span><br><span class="line">    p1.city = <span class="string">"江西"</span></span><br><span class="line">    p1.age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;江子牙 江西 23&#125;</span></span><br><span class="line">    fmt.Println(p1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类型：main.Person       值：main.Person&#123;name:"江子牙", city:"江西", age:23&#125;</span></span><br><span class="line">    fmt.Printf(<span class="string">"类型：%T\t值：%#v"</span>, p1, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>.</code>来对结构体的字段进行赋值和取值操作。</p><h3 id="创建指针类型的结构体"><a href="#创建指针类型的结构体" class="headerlink" title="创建指针类型的结构体"></a>创建指针类型的结构体</h3><p>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := <span class="built_in">new</span>(Person)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&#123;  0&#125; 得到的是一个结构体指针，字段的值对应该字段类型的零值</span></span><br><span class="line">    fmt.Println(p1)</span><br><span class="line">    <span class="comment">// 指针：0xc00006e2d0      类型：*main.Person      值：&amp;main.Person&#123;name:"", city:"", age:0&#125;</span></span><br><span class="line">    fmt.Printf(<span class="string">"指针：%p\t类型：%T\t值：%#v"</span>, p1, p1, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管得到的是一个结构体指针，但是go语言中同样可以通过<code>.</code>来进行对字段进行操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := <span class="built_in">new</span>(Person)</span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">"江子牙"</span></span><br><span class="line">    p1.city = <span class="string">"江西"</span></span><br><span class="line">    p1.age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&#123;江子牙 江西 23&#125;</span></span><br><span class="line">    fmt.Println(p1)</span><br><span class="line">    <span class="comment">// 指针：0xc00006e2d0      类型：*main.Person      值：&amp;main.Person&#123;name:"江子牙", city:"江西", age:23&#125;</span></span><br><span class="line">    fmt.Printf(<span class="string">"指针：%p\t类型：%T\t值：%#v"</span>, p1, p1, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取结构体的地址实例化"><a href="#取结构体的地址实例化" class="headerlink" title="取结构体的地址实例化"></a>取结构体的地址实例化</h3><p>使用<code>&amp;</code>对结构体进行取地址操作相当于对结构体进行了一次<code>new</code>操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p2 := &amp;Person&#123;&#125;</span><br><span class="line">    p2.name = <span class="string">"江子牙"</span></span><br><span class="line">    p2.city = <span class="string">"江西"</span></span><br><span class="line">    p2.age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&#123;江子牙 江西 23&#125;</span></span><br><span class="line">    fmt.Println(p2)</span><br><span class="line">    <span class="comment">// 指针：0xc00006e2d0      类型：*main.Person      值：&amp;main.Person&#123;name:"江子牙", city:"江西", age:23&#125;</span></span><br><span class="line">    fmt.Printf(<span class="string">"指针：%p\t类型：%T\t值：%#v"</span>, p2, p2, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的初始化"><a href="#结构体的初始化" class="headerlink" title="结构体的初始化"></a>结构体的初始化</h2><h3 id="键值对初始化"><a href="#键值对初始化" class="headerlink" title="键值对初始化"></a>键值对初始化</h3><p>类似于Python的关键字传参</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    isLogin <span class="keyword">bool</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    p1 := Person&#123;</span><br><span class="line">        name:<span class="string">"江子牙"</span>,</span><br><span class="line">        age:<span class="number">23</span>,</span><br><span class="line">        isLogin:<span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// &#123;江子牙 23 true&#125;</span></span><br><span class="line">    fmt.Println(p1)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="值的列表初始化"><a href="#值的列表初始化" class="headerlink" title="值的列表初始化"></a>值的列表初始化</h3><p>类似于Python的位置参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    isLogin <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    p2 := Person&#123;</span><br><span class="line">        <span class="string">"江子牙"</span>, <span class="number">23</span>, <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &#123;江子牙 23 true&#125;</span></span><br><span class="line">    fmt.Println(p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用此方式初始化时，值得注意的是：</p><ul><li>必须初始化结构体的所有字段</li><li>初始化顺序必须和结构体声明时保持一致</li><li>两种方式的初始化不能混用</li></ul><h3 id="匿名结构体的初始化"><a href="#匿名结构体的初始化" class="headerlink" title="匿名结构体的初始化"></a>匿名结构体的初始化</h3><p>顾名思义，匿名结构体就是没有名字的结构体，无需用<code>type</code>关键字声明就可以直接使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="keyword">struct</span> &#123;</span><br><span class="line">        name <span class="keyword">string</span></span><br><span class="line">        age  <span class="keyword">int</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        <span class="string">"江子牙"</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 江子牙</span></span><br><span class="line">    fmt.Println(s1.name)</span><br><span class="line">    <span class="comment">// 23</span></span><br><span class="line">    fmt.Println(s1.age)</span><br><span class="line">    <span class="comment">// &#123;江子牙 23&#125;</span></span><br><span class="line">    fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>结构体没有构造函数，我们可以自己实现。因为结构体是值类型，如果结构体较复杂的话，值拷贝的性能开销会比较大，所以我们的构造函数返回结构体指针类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span></span><br><span class="line">    Color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCat</span><span class="params">(name, color <span class="keyword">string</span>)</span> *<span class="title">Cat</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Cat&#123;</span><br><span class="line">        Name:  name,</span><br><span class="line">        Color: color,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用构造函数实例化一个小豹子</span></span><br><span class="line">    cat := NewCat(<span class="string">"小豹子"</span>, <span class="string">"豹纹"</span>)</span><br><span class="line">    <span class="comment">// &amp;&#123;小豹子 豹纹&#125;</span></span><br><span class="line">    fmt.Println(cat)</span><br><span class="line">    <span class="comment">// 小豹子</span></span><br><span class="line">    fmt.Println(cat.Name)</span><br><span class="line">    <span class="comment">// 豹纹</span></span><br><span class="line">    fmt.Println(cat.Color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法Method"><a href="#方法Method" class="headerlink" title="方法Method"></a>方法Method</h2><p>go语言中的方法method是一种作用于特定类型变量的函数，叫做<code>receiver</code>，可以理解为其他语言的<code>this</code>和<code>self</code>。</p><p>格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(接收器变量 接收器类型)</span> 方法名 <span class="params">(参数列表)</span> <span class="params">(返回值列表)</span></span> &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接收器变量：官方建议，该接收器变量最好和接收器类型的第一个字母保持一致。如 Cat c 、Bag b 、Dog d。</li><li>接收者类型：可以是指针类型和非指针类型。</li><li>方法名、参数列表、返回值：与函数定义相同。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个包的结构体</span></span><br><span class="line"><span class="keyword">type</span> Bag <span class="keyword">struct</span> &#123;</span><br><span class="line">    items []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体定义一个Insert方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bag)</span> <span class="title">Insert</span><span class="params">(thing <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    b.items = <span class="built_in">append</span>(b.items, thing)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化一个包</span></span><br><span class="line">    bag := <span class="built_in">new</span>(Bag)</span><br><span class="line">    <span class="comment">// 放入一个东西</span></span><br><span class="line">    bag.Insert(<span class="string">"口红"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [口红]</span></span><br><span class="line">    fmt.Println(bag.items)</span><br><span class="line">    <span class="comment">// &amp;&#123;[口红]&#125;</span></span><br><span class="line">    fmt.Println(bag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放入一个手机</span></span><br><span class="line">    bag.Insert(<span class="string">"手机"</span>)</span><br><span class="line">    <span class="comment">// [口红 手机]</span></span><br><span class="line">    fmt.Println(bag.items)</span><br><span class="line">    <span class="comment">// &amp;&#123;[口红 手机]&#125;</span></span><br><span class="line">    fmt.Println(bag)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h2><h3 id="指针类型的接收者"><a href="#指针类型的接收者" class="headerlink" title="指针类型的接收者"></a>指针类型的接收者</h3><p>指针类型的接收器是一个结构体的指针，更接近于面向对象的this or self。</p><p>由于指针的特性，调用方法时，修改接收器指针的任意成员变量，在方法调用结束后，已经修改过得都是有效的。  </p><p>上个例子的接收器*Bag就是一个指针接收器，所以才能append之后保持修改。</p><h3 id="值类型的接收者"><a href="#值类型的接收者" class="headerlink" title="值类型的接收者"></a>值类型的接收者</h3><p>当方法作用与非指针接收器时，go语言内部会在代码运行的时候将接收器的数据复制一份，在非指针接收器的方法可以获取，也可以修改，只是修改无效而已。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bag <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bag)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    b.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bag)</span> <span class="title">SetName1</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(name, <span class="string">"修改不生效"</span>)</span><br><span class="line">    b.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化一个包</span></span><br><span class="line">    bag := <span class="built_in">new</span>(Bag)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    bag.SetName(<span class="string">"指针类型的接收者"</span>)</span><br><span class="line">    <span class="comment">// 生效了：指针类型的接收者</span></span><br><span class="line">    fmt.Println(bag.name)</span><br><span class="line">    <span class="comment">// 再设置</span></span><br><span class="line">    bag.SetName1(<span class="string">"值类型的接收者"</span>)</span><br><span class="line">    <span class="comment">// 不生效：指针类型的接收者</span></span><br><span class="line">    fmt.Println(bag.name)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>需要修改接收者中的值</p></li><li><p>接收者是拷贝代价比较大的大对象</p></li><li><p>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</p></li></ul><h2 id="为任意类型添加方法"><a href="#为任意类型添加方法" class="headerlink" title="为任意类型添加方法"></a>为任意类型添加方法</h2><p>go语言可以对任何一种类型添加方法。给一种类型添加方法就像给结构体添加方法一样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个MyInt类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 MyInt 添加是否为0的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyInt)</span> <span class="title">IsZero</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 MyInt 添加add()方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyInt)</span> <span class="title">Add</span><span class="params">(other <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(m) + other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b MyInt</span><br><span class="line">    <span class="comment">// 定义之后为零值</span></span><br><span class="line">    fmt.Println(b.IsZero())</span><br><span class="line">    </span><br><span class="line">    b = <span class="number">100</span></span><br><span class="line">    <span class="comment">// 赋值之后不为0</span></span><br><span class="line">    fmt.Println(b.IsZero())</span><br><span class="line">    <span class="comment">// 两数相加：100+150</span></span><br><span class="line">    fmt.Println(b.Add(<span class="number">150</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的匿名字段"><a href="#结构体的匿名字段" class="headerlink" title="结构体的匿名字段"></a>结构体的匿名字段</h2><p>结构体允许字段没有字段名，只有类型。这种字段就叫做匿名字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个匿名字段的结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := &amp;Person&#123;</span><br><span class="line">        <span class="string">"江子牙"</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &amp;&#123;江子牙 23&#125;</span></span><br><span class="line">    fmt.Println(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h2><p>一个结构体中可以嵌套包含另一个结构体或结构体指针。</p><p>比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个学生的结构体</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    *Class  <span class="comment">// 嵌套一个匿名结构体的指针</span></span><br><span class="line">    School <span class="comment">// 嵌套一个匿名结构体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个班级结构体</span></span><br><span class="line"><span class="keyword">type</span> Class <span class="keyword">struct</span> &#123;</span><br><span class="line">    className <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个学校结构体</span></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">    schoolName <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := &amp;Student&#123;</span><br><span class="line">        <span class="string">"江子牙"</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        &amp;Class&#123;</span><br><span class="line">            <span class="string">"高三一班"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        School&#123;<span class="string">"明珠中学"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &amp;&#123;江子牙 23 0xc0000421c0 &#123;明珠中学&#125;&#125;</span></span><br><span class="line">    fmt.Println(s1)</span><br><span class="line">    <span class="comment">// 高三一班</span></span><br><span class="line">    fmt.Println(s1.className)</span><br><span class="line">    <span class="comment">// 明珠中学</span></span><br><span class="line">    fmt.Println(s1.schoolName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生结构体嵌套了班级和学校两个结构体，获取班级学校和班级名字的时候，会一直往下找。可以通过<code>.</code>的方式。</p><h2 id="结构体的继承"><a href="#结构体的继承" class="headerlink" title="结构体的继承"></a>结构体的继承</h2><p>go语言没有面向对象，更没有继承。只是可以实现同样的效果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个儿子的结构体</span></span><br><span class="line"><span class="keyword">type</span> Child <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    *Father <span class="comment">// 通过匿名结构体实现继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个父亲结构体</span></span><br><span class="line"><span class="keyword">type</span> Father <span class="keyword">struct</span> &#123;</span><br><span class="line">    money <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为父亲添加一个生小孩的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Father)</span> <span class="title">Make</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s生小孩"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := &amp;Child&#123;</span><br><span class="line">        name:<span class="string">"小明"</span>,</span><br><span class="line">        Father:&amp;Father&#123;<span class="number">50000</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小明继承的财产为：50000</span></span><br><span class="line">    fmt.Printf(<span class="string">"%s继承的财产为：%d\n"</span>,ch.name, ch.money )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小明生小孩</span></span><br><span class="line">    ch.Make(<span class="string">"小明"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小明结构体中并没有<code>money</code>字段和<code>Make</code>方法。这两个都是他父亲结构体中才有的，这样一来便实现了继承属性和方法。</p><h2 id="结构体字段的可见性"><a href="#结构体字段的可见性" class="headerlink" title="结构体字段的可见性"></a>结构体字段的可见性</h2><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p><h2 id="结构体json序列化"><a href="#结构体json序列化" class="headerlink" title="结构体json序列化"></a>结构体json序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生结构体</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID      <span class="keyword">int</span></span><br><span class="line">    Gender  <span class="keyword">string</span></span><br><span class="line">    Name    <span class="keyword">string</span></span><br><span class="line">    IsLogin <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stu1 = Student&#123;</span><br><span class="line">        ID:      <span class="number">1</span>,</span><br><span class="line">        Gender:  <span class="string">"男"</span>,</span><br><span class="line">        Name:    <span class="string">"豪杰"</span>,</span><br><span class="line">        IsLogin: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化：把内存里的数据转换为字符串，以便用于网络传输和数据交换</span></span><br><span class="line">    <span class="keyword">if</span> v, err := json.Marshal(stu1); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"JSON格式化出错"</span>)</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 字节类型的切片</span></span><br><span class="line">        fmt.Println(v)</span><br><span class="line">        <span class="comment">// 转为字符串</span></span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(v))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化：把json字符串转换为当前编程语言可用的对象</span></span><br><span class="line">    str := <span class="string">`&#123;"ID":1,"Gender":"男","Name":"豪杰","IsLogin":false&#125;`</span></span><br><span class="line">    stu2 := <span class="built_in">new</span>(Student)</span><br><span class="line">    _ = json.Unmarshal([]<span class="keyword">byte</span>(str), stu2)</span><br><span class="line">    fmt.Println(stu2)</span><br><span class="line">    fmt.Printf(<span class="string">"stu2 类型：%T\tstu2值：%#v"</span>, stu2, stu2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的标签"><a href="#结构体的标签" class="headerlink" title="结构体的标签"></a>结构体的标签</h2><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对反引号包裹起来，具体的格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`key1:"value1" key2:"value2"`</span></span><br></pre></td></tr></table></figure><p>结构体标签由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。 </p><p><strong>注意事项：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p><p>因为序列化和反序列化大多是与前端进行数据交互。不能给他返回一些大写的键。所以可以通过<code>tag</code>来解决。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student 学生</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID     <span class="keyword">int</span>    <span class="string">`json:"id"`</span> <span class="comment">//通过指定tag实现json序列化该字段时的key</span></span><br><span class="line">    Gender <span class="keyword">string</span> <span class="comment">//json序列化是默认使用字段名作为key</span></span><br><span class="line">    name   <span class="keyword">string</span> <span class="comment">//私有不能被json包访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := Student&#123;</span><br><span class="line">        ID:     <span class="number">1</span>,</span><br><span class="line">        Gender: <span class="string">"男"</span>,</span><br><span class="line">        name:   <span class="string">"沙河娜扎"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data, err := json.Marshal(s1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"json marshal failed!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json str:&#123;"id":1,"Gender":"男"&#125;</span></span><br><span class="line">    fmt.Printf(<span class="string">"json str:%s\n"</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
